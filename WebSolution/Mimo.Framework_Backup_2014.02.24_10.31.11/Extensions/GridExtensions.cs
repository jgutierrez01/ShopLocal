using Mimo.Framework.Data;
using Telerik.Web.UI;
using System.Collections.Generic;
using System.Diagnostics;

namespace Mimo.Framework.Extensions
{

    public static class GridExtensions
    {

        public static SortOrder ToObjectSetOrder(this GridSortOrder grdSort)
        {
            switch (grdSort)
            {
                case GridSortOrder.Ascending:
                    return SortOrder.Ascending;
                case GridSortOrder.Descending:
                    return SortOrder.Descending;
                default:
                    return SortOrder.None;
            }
        }

        public static void LocalizeMenu(this RadGrid grid)
        {
            GridFilterMenu filterMenu = grid.FilterMenu;

            foreach (RadMenuItem item in filterMenu.Items)
            {
                switch (item.Text)
                {
                    case "NoFilter":
                        item.Text = "Ninguno";
                        break;
                    case "Contains":
                        item.Text = "Contiene";
                        break;
                    case "DoesNotContain":
                        item.Text = "No contiene";
                        break;
                    case "StartsWith":
                        item.Text = "Empieza con";
                        break;
                    case "EndsWith":
                        item.Text = "Termina con";
                        break;
                    case "EqualTo":
                        item.Text = "Igual a";
                        break;
                    case "NotEqualTo":
                        item.Text = "Diferente de";
                        break;
                    case "GreaterThan":
                        item.Text = "Mayor que";
                        break;
                    case "LessThan":
                        item.Text = "Menor que";
                        break;
                    case "GreaterThanOrEqualTo":
                        item.Text = "Mayor o igual que";
                        break;
                    case "LessThanOrEqualTo":
                        item.Text = "Menor o igual que";
                        break;
                    case "Between":
                        item.Text = "Entre";
                        break;
                    case "NotBetween":
                        item.Text = "Afuera";
                        break;
                    case "IsEmpty":
                        item.Text = "Vacío";
                        break;
                    case "NotIsEmpty":
                        item.Text = "No vacío";
                        break;
                    case "IsNull":
                        item.Text = "Nulo";
                        break;
                    case "NotIsNull":
                        item.Text = "No nulo";
                        break;
                    default:
                        break;
                }
            }
        }

        public static List<ObjectSetFilter> GetCurrentFilters(this RadGrid grid)
        {
            List<ObjectSetFilter> list = new List<ObjectSetFilter>();
            ObjectSetFilter filter = null;

            foreach (GridColumn column in grid.MasterTableView.Columns)
            {
                filter = appendFilter(list, filter, column);
            }

            foreach (GridColumn column in grid.MasterTableView.AutoGeneratedColumns)
            {
                filter = appendFilter(list, filter, column);
            }

            return list;
        }

        private static ObjectSetFilter appendFilter(List<ObjectSetFilter> list, ObjectSetFilter filter, GridColumn column)
        {
            if (column is GridBoundColumn)
            {
                filter = new ObjectSetFilter
                {
                    ColumnName = ((GridBoundColumn)column).DataField,
                    FilterValue = column.CurrentFilterValue,
                    Operator = QueryOperator.NoOperator,
                    ColumnType = column.DataTypeName
                };

                switch (column.CurrentFilterFunction)
                {
                    case GridKnownFunction.Contains:
                        filter.Operator = QueryOperator.Contains;
                        break;
                    case GridKnownFunction.EqualTo:
                        filter.Operator = QueryOperator.EqualTo;
                        break;
                    case GridKnownFunction.GreaterThan:
                        filter.Operator = QueryOperator.GreaterThan;
                        break;
                    case GridKnownFunction.GreaterThanOrEqualTo:
                        filter.Operator = QueryOperator.GreaterThanOrEqualTo;
                        break;
                    case GridKnownFunction.LessThan:
                        filter.Operator = QueryOperator.LessThan;
                        break;
                    case GridKnownFunction.LessThanOrEqualTo:
                        filter.Operator = QueryOperator.LessThanOrEqualTo;
                        break;
                    case GridKnownFunction.StartsWith:
                        filter.Operator = QueryOperator.StartsWith;
                        break;
                    case GridKnownFunction.EndsWith:
                        filter.Operator = QueryOperator.EndsWith;
                        break;
                    default:
                        break;
                }
            }

            if (filter.Operator != QueryOperator.NoOperator)
            {
                list.Add(filter);
            }

            return filter;
        }

        public static List<ObjectSetOrder> GetCurrentSortings(this RadGrid grid)
        {
            List<ObjectSetOrder> lst = null;

            if (grid.MasterTableView.SortExpressions.Count == 0)
            {
                lst = null;
            }
            else
            {
                lst = new List<ObjectSetOrder>();
                string sortClause = string.Empty;

                foreach (GridSortExpression sortExp in grid.MasterTableView.SortExpressions)
                {
                    lst.Add(new ObjectSetOrder { ColumnName = sortExp.FieldName, Order = (sortExp.SortOrder == GridSortOrder.Ascending ? SortOrder.Ascending : SortOrder.Descending) });
                }
            }

            return lst;
        }
    }
}