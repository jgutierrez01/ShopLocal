//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Corte))]
    [KnownType(typeof(MaterialSpool))]
    [KnownType(typeof(OrdenTrabajoSpool))]
    [KnownType(typeof(Maquina))]
    [KnownType(typeof(OrdenTrabajoMaterial))]
    [KnownType(typeof(NumeroUnicoMovimiento))]
    [Serializable]
    public partial class CorteDetalle: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CorteDetalleID
        {
            get { return _corteDetalleID; }
            set
            {
                if (_corteDetalleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CorteDetalleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _corteDetalleID = value;
                    OnPropertyChanged("CorteDetalleID");
                }
            }
        }
        private int _corteDetalleID;
    
        [DataMember]
        public int CorteID
        {
            get { return _corteID; }
            set
            {
                if (_corteID != value)
                {
                    ChangeTracker.RecordOriginalValue("CorteID", _corteID);
                    if (!IsDeserializing)
                    {
                        if (Corte != null && Corte.CorteID != value)
                        {
                            Corte = null;
                        }
                    }
                    _corteID = value;
                    OnPropertyChanged("CorteID");
                }
            }
        }
        private int _corteID;
    
        [DataMember]
        public int OrdenTrabajoSpoolID
        {
            get { return _ordenTrabajoSpoolID; }
            set
            {
                if (_ordenTrabajoSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpoolID", _ordenTrabajoSpoolID);
                    if (!IsDeserializing)
                    {
                        if (OrdenTrabajoSpool != null && OrdenTrabajoSpool.OrdenTrabajoSpoolID != value)
                        {
                            OrdenTrabajoSpool = null;
                        }
                    }
                    _ordenTrabajoSpoolID = value;
                    OnPropertyChanged("OrdenTrabajoSpoolID");
                }
            }
        }
        private int _ordenTrabajoSpoolID;
    
        [DataMember]
        public int MaterialSpoolID
        {
            get { return _materialSpoolID; }
            set
            {
                if (_materialSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("MaterialSpoolID", _materialSpoolID);
                    if (!IsDeserializing)
                    {
                        if (MaterialSpool != null && MaterialSpool.MaterialSpoolID != value)
                        {
                            MaterialSpool = null;
                        }
                    }
                    _materialSpoolID = value;
                    OnPropertyChanged("MaterialSpoolID");
                }
            }
        }
        private int _materialSpoolID;
    
        [DataMember]
        public int Cantidad
        {
            get { return _cantidad; }
            set
            {
                if (_cantidad != value)
                {
                    _cantidad = value;
                    OnPropertyChanged("Cantidad");
                }
            }
        }
        private int _cantidad;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<System.DateTime> FechaCorte
        {
            get { return _fechaCorte; }
            set
            {
                if (_fechaCorte != value)
                {
                    _fechaCorte = value;
                    OnPropertyChanged("FechaCorte");
                }
            }
        }
        private Nullable<System.DateTime> _fechaCorte;
    
        [DataMember]
        public Nullable<int> MaquinaID
        {
            get { return _maquinaID; }
            set
            {
                if (_maquinaID != value)
                {
                    ChangeTracker.RecordOriginalValue("MaquinaID", _maquinaID);
                    if (!IsDeserializing)
                    {
                        if (Maquina != null && Maquina.MaquinaID != value)
                        {
                            Maquina = null;
                        }
                    }
                    _maquinaID = value;
                    OnPropertyChanged("MaquinaID");
                }
            }
        }
        private Nullable<int> _maquinaID;
    
        [DataMember]
        public bool Cancelado
        {
            get { return _cancelado; }
            set
            {
                if (_cancelado != value)
                {
                    _cancelado = value;
                    OnPropertyChanged("Cancelado");
                }
            }
        }
        private bool _cancelado;
    
        [DataMember]
        public bool EsAjuste
        {
            get { return _esAjuste; }
            set
            {
                if (_esAjuste != value)
                {
                    _esAjuste = value;
                    OnPropertyChanged("EsAjuste");
                }
            }
        }
        private bool _esAjuste;
    
        [DataMember]
        public Nullable<int> SalidaInventarioID
        {
            get { return _salidaInventarioID; }
            set
            {
                if (_salidaInventarioID != value)
                {
                    ChangeTracker.RecordOriginalValue("SalidaInventarioID", _salidaInventarioID);
                    if (!IsDeserializing)
                    {
                        if (NumeroUnicoMovimiento != null && NumeroUnicoMovimiento.NumeroUnicoMovimientoID != value)
                        {
                            NumeroUnicoMovimiento = null;
                        }
                    }
                    _salidaInventarioID = value;
                    OnPropertyChanged("SalidaInventarioID");
                }
            }
        }
        private Nullable<int> _salidaInventarioID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Corte Corte
        {
            get { return _corte; }
            set
            {
                if (!ReferenceEquals(_corte, value))
                {
                    var previousValue = _corte;
                    _corte = value;
                    FixupCorte(previousValue);
                    OnNavigationPropertyChanged("Corte");
                }
            }
        }
        private Corte _corte;
    
        [DataMember]
        public MaterialSpool MaterialSpool
        {
            get { return _materialSpool; }
            set
            {
                if (!ReferenceEquals(_materialSpool, value))
                {
                    var previousValue = _materialSpool;
                    _materialSpool = value;
                    FixupMaterialSpool(previousValue);
                    OnNavigationPropertyChanged("MaterialSpool");
                }
            }
        }
        private MaterialSpool _materialSpool;
    
        [DataMember]
        public OrdenTrabajoSpool OrdenTrabajoSpool
        {
            get { return _ordenTrabajoSpool; }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoSpool, value))
                {
                    var previousValue = _ordenTrabajoSpool;
                    _ordenTrabajoSpool = value;
                    FixupOrdenTrabajoSpool(previousValue);
                    OnNavigationPropertyChanged("OrdenTrabajoSpool");
                }
            }
        }
        private OrdenTrabajoSpool _ordenTrabajoSpool;
    
        [DataMember]
        public Maquina Maquina
        {
            get { return _maquina; }
            set
            {
                if (!ReferenceEquals(_maquina, value))
                {
                    var previousValue = _maquina;
                    _maquina = value;
                    FixupMaquina(previousValue);
                    OnNavigationPropertyChanged("Maquina");
                }
            }
        }
        private Maquina _maquina;
    
        [DataMember]
        public TrackableCollection<OrdenTrabajoMaterial> OrdenTrabajoMaterial
        {
            get
            {
                if (_ordenTrabajoMaterial == null)
                {
                    _ordenTrabajoMaterial = new TrackableCollection<OrdenTrabajoMaterial>();
                    _ordenTrabajoMaterial.CollectionChanged += FixupOrdenTrabajoMaterial;
                }
                return _ordenTrabajoMaterial;
            }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoMaterial, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ordenTrabajoMaterial != null)
                    {
                        _ordenTrabajoMaterial.CollectionChanged -= FixupOrdenTrabajoMaterial;
                    }
                    _ordenTrabajoMaterial = value;
                    if (_ordenTrabajoMaterial != null)
                    {
                        _ordenTrabajoMaterial.CollectionChanged += FixupOrdenTrabajoMaterial;
                    }
                    OnNavigationPropertyChanged("OrdenTrabajoMaterial");
                }
            }
        }
        private TrackableCollection<OrdenTrabajoMaterial> _ordenTrabajoMaterial;
    
        [DataMember]
        public NumeroUnicoMovimiento NumeroUnicoMovimiento
        {
            get { return _numeroUnicoMovimiento; }
            set
            {
                if (!ReferenceEquals(_numeroUnicoMovimiento, value))
                {
                    var previousValue = _numeroUnicoMovimiento;
                    _numeroUnicoMovimiento = value;
                    FixupNumeroUnicoMovimiento(previousValue);
                    OnNavigationPropertyChanged("NumeroUnicoMovimiento");
                }
            }
        }
        private NumeroUnicoMovimiento _numeroUnicoMovimiento;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_ordenTrabajoMaterial != null)
    		{
    			_ordenTrabajoMaterial.CollectionChanged -= FixupOrdenTrabajoMaterial;
    			_ordenTrabajoMaterial.CollectionChanged += FixupOrdenTrabajoMaterial;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Corte = null;
            MaterialSpool = null;
            OrdenTrabajoSpool = null;
            Maquina = null;
            OrdenTrabajoMaterial.Clear();
            NumeroUnicoMovimiento = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCorte(Corte previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteDetalle.Contains(this))
            {
                previousValue.CorteDetalle.Remove(this);
            }
    
            if (Corte != null)
            {
                if (!Corte.CorteDetalle.Contains(this))
                {
                    Corte.CorteDetalle.Add(this);
                }
    
                CorteID = Corte.CorteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Corte")
                    && (ChangeTracker.OriginalValues["Corte"] == Corte))
                {
                    ChangeTracker.OriginalValues.Remove("Corte");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Corte", previousValue);
                }
                if (Corte != null && !Corte.ChangeTracker.ChangeTrackingEnabled)
                {
                    Corte.StartTracking();
                }
            }
        }
    
        private void FixupMaterialSpool(MaterialSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteDetalle.Contains(this))
            {
                previousValue.CorteDetalle.Remove(this);
            }
    
            if (MaterialSpool != null)
            {
                if (!MaterialSpool.CorteDetalle.Contains(this))
                {
                    MaterialSpool.CorteDetalle.Add(this);
                }
    
                MaterialSpoolID = MaterialSpool.MaterialSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MaterialSpool")
                    && (ChangeTracker.OriginalValues["MaterialSpool"] == MaterialSpool))
                {
                    ChangeTracker.OriginalValues.Remove("MaterialSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MaterialSpool", previousValue);
                }
                if (MaterialSpool != null && !MaterialSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    MaterialSpool.StartTracking();
                }
            }
        }
    
        private void FixupOrdenTrabajoSpool(OrdenTrabajoSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteDetalle.Contains(this))
            {
                previousValue.CorteDetalle.Remove(this);
            }
    
            if (OrdenTrabajoSpool != null)
            {
                if (!OrdenTrabajoSpool.CorteDetalle.Contains(this))
                {
                    OrdenTrabajoSpool.CorteDetalle.Add(this);
                }
    
                OrdenTrabajoSpoolID = OrdenTrabajoSpool.OrdenTrabajoSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrdenTrabajoSpool")
                    && (ChangeTracker.OriginalValues["OrdenTrabajoSpool"] == OrdenTrabajoSpool))
                {
                    ChangeTracker.OriginalValues.Remove("OrdenTrabajoSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpool", previousValue);
                }
                if (OrdenTrabajoSpool != null && !OrdenTrabajoSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    OrdenTrabajoSpool.StartTracking();
                }
            }
        }
    
        private void FixupMaquina(Maquina previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteDetalle.Contains(this))
            {
                previousValue.CorteDetalle.Remove(this);
            }
    
            if (Maquina != null)
            {
                if (!Maquina.CorteDetalle.Contains(this))
                {
                    Maquina.CorteDetalle.Add(this);
                }
    
                MaquinaID = Maquina.MaquinaID;
            }
            else if (!skipKeys)
            {
                MaquinaID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Maquina")
                    && (ChangeTracker.OriginalValues["Maquina"] == Maquina))
                {
                    ChangeTracker.OriginalValues.Remove("Maquina");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Maquina", previousValue);
                }
                if (Maquina != null && !Maquina.ChangeTracker.ChangeTrackingEnabled)
                {
                    Maquina.StartTracking();
                }
            }
        }
    
        private void FixupNumeroUnicoMovimiento(NumeroUnicoMovimiento previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cortes.Contains(this))
            {
                previousValue.Cortes.Remove(this);
            }
    
            if (NumeroUnicoMovimiento != null)
            {
                if (!NumeroUnicoMovimiento.Cortes.Contains(this))
                {
                    NumeroUnicoMovimiento.Cortes.Add(this);
                }
    
                SalidaInventarioID = NumeroUnicoMovimiento.NumeroUnicoMovimientoID;
            }
            else if (!skipKeys)
            {
                SalidaInventarioID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NumeroUnicoMovimiento")
                    && (ChangeTracker.OriginalValues["NumeroUnicoMovimiento"] == NumeroUnicoMovimiento))
                {
                    ChangeTracker.OriginalValues.Remove("NumeroUnicoMovimiento");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnicoMovimiento", previousValue);
                }
                if (NumeroUnicoMovimiento != null && !NumeroUnicoMovimiento.ChangeTracker.ChangeTrackingEnabled)
                {
                    NumeroUnicoMovimiento.StartTracking();
                }
            }
        }
    
        private void FixupOrdenTrabajoMaterial(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrdenTrabajoMaterial item in e.NewItems)
                {
                    item.CorteDetalle = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrdenTrabajoMaterial", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrdenTrabajoMaterial item in e.OldItems)
                {
                    if (ReferenceEquals(item.CorteDetalle, this))
                    {
                        item.CorteDetalle = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrdenTrabajoMaterial", item);
                    }
                }
            }
        }

        #endregion

    }
}
