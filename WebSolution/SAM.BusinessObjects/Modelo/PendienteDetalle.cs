//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CategoriaPendiente))]
    [KnownType(typeof(Usuario))]
    [KnownType(typeof(Pendiente))]
    [Serializable]
    public partial class PendienteDetalle: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PendienteDetalleID
        {
            get { return _pendienteDetalleID; }
            set
            {
                if (_pendienteDetalleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PendienteDetalleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pendienteDetalleID = value;
                    OnPropertyChanged("PendienteDetalleID");
                }
            }
        }
        private int _pendienteDetalleID;
    
        [DataMember]
        public int PendienteID
        {
            get { return _pendienteID; }
            set
            {
                if (_pendienteID != value)
                {
                    ChangeTracker.RecordOriginalValue("PendienteID", _pendienteID);
                    if (!IsDeserializing)
                    {
                        if (Pendiente != null && Pendiente.PendienteID != value)
                        {
                            Pendiente = null;
                        }
                    }
                    _pendienteID = value;
                    OnPropertyChanged("PendienteID");
                }
            }
        }
        private int _pendienteID;
    
        [DataMember]
        public int CategoriaPendienteID
        {
            get { return _categoriaPendienteID; }
            set
            {
                if (_categoriaPendienteID != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoriaPendienteID", _categoriaPendienteID);
                    if (!IsDeserializing)
                    {
                        if (CategoriaPendiente != null && CategoriaPendiente.CategoriaPendienteID != value)
                        {
                            CategoriaPendiente = null;
                        }
                    }
                    _categoriaPendienteID = value;
                    OnPropertyChanged("CategoriaPendienteID");
                }
            }
        }
        private int _categoriaPendienteID;
    
        [DataMember]
        public bool EsAlta
        {
            get { return _esAlta; }
            set
            {
                if (_esAlta != value)
                {
                    _esAlta = value;
                    OnPropertyChanged("EsAlta");
                }
            }
        }
        private bool _esAlta;
    
        [DataMember]
        public System.Guid Responsable
        {
            get { return _responsable; }
            set
            {
                if (_responsable != value)
                {
                    ChangeTracker.RecordOriginalValue("Responsable", _responsable);
                    if (!IsDeserializing)
                    {
                        if (UsuarioResponsable != null && UsuarioResponsable.UserId != value)
                        {
                            UsuarioResponsable = null;
                        }
                    }
                    _responsable = value;
                    OnPropertyChanged("Responsable");
                }
            }
        }
        private System.Guid _responsable;
    
        [DataMember]
        public string Estatus
        {
            get { return _estatus; }
            set
            {
                if (_estatus != value)
                {
                    _estatus = value;
                    OnPropertyChanged("Estatus");
                }
            }
        }
        private string _estatus;
    
        [DataMember]
        public string Observaciones
        {
            get { return _observaciones; }
            set
            {
                if (_observaciones != value)
                {
                    _observaciones = value;
                    OnPropertyChanged("Observaciones");
                }
            }
        }
        private string _observaciones;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CategoriaPendiente CategoriaPendiente
        {
            get { return _categoriaPendiente; }
            set
            {
                if (!ReferenceEquals(_categoriaPendiente, value))
                {
                    var previousValue = _categoriaPendiente;
                    _categoriaPendiente = value;
                    FixupCategoriaPendiente(previousValue);
                    OnNavigationPropertyChanged("CategoriaPendiente");
                }
            }
        }
        private CategoriaPendiente _categoriaPendiente;
    
        [DataMember]
        public Usuario UsuarioResponsable
        {
            get { return _usuarioResponsable; }
            set
            {
                if (!ReferenceEquals(_usuarioResponsable, value))
                {
                    var previousValue = _usuarioResponsable;
                    _usuarioResponsable = value;
                    FixupUsuarioResponsable(previousValue);
                    OnNavigationPropertyChanged("UsuarioResponsable");
                }
            }
        }
        private Usuario _usuarioResponsable;
    
        [DataMember]
        public Pendiente Pendiente
        {
            get { return _pendiente; }
            set
            {
                if (!ReferenceEquals(_pendiente, value))
                {
                    var previousValue = _pendiente;
                    _pendiente = value;
                    FixupPendiente(previousValue);
                    OnNavigationPropertyChanged("Pendiente");
                }
            }
        }
        private Pendiente _pendiente;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            CategoriaPendiente = null;
            UsuarioResponsable = null;
            Pendiente = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCategoriaPendiente(CategoriaPendiente previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PendienteDetalle.Contains(this))
            {
                previousValue.PendienteDetalle.Remove(this);
            }
    
            if (CategoriaPendiente != null)
            {
                if (!CategoriaPendiente.PendienteDetalle.Contains(this))
                {
                    CategoriaPendiente.PendienteDetalle.Add(this);
                }
    
                CategoriaPendienteID = CategoriaPendiente.CategoriaPendienteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CategoriaPendiente")
                    && (ChangeTracker.OriginalValues["CategoriaPendiente"] == CategoriaPendiente))
                {
                    ChangeTracker.OriginalValues.Remove("CategoriaPendiente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CategoriaPendiente", previousValue);
                }
                if (CategoriaPendiente != null && !CategoriaPendiente.ChangeTracker.ChangeTrackingEnabled)
                {
                    CategoriaPendiente.StartTracking();
                }
            }
        }
    
        private void FixupUsuarioResponsable(Usuario previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PendienteDetalle.Contains(this))
            {
                previousValue.PendienteDetalle.Remove(this);
            }
    
            if (UsuarioResponsable != null)
            {
                if (!UsuarioResponsable.PendienteDetalle.Contains(this))
                {
                    UsuarioResponsable.PendienteDetalle.Add(this);
                }
    
                Responsable = UsuarioResponsable.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UsuarioResponsable")
                    && (ChangeTracker.OriginalValues["UsuarioResponsable"] == UsuarioResponsable))
                {
                    ChangeTracker.OriginalValues.Remove("UsuarioResponsable");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UsuarioResponsable", previousValue);
                }
                if (UsuarioResponsable != null && !UsuarioResponsable.ChangeTracker.ChangeTrackingEnabled)
                {
                    UsuarioResponsable.StartTracking();
                }
            }
        }
    
        private void FixupPendiente(Pendiente previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PendienteDetalle.Contains(this))
            {
                previousValue.PendienteDetalle.Remove(this);
            }
    
            if (Pendiente != null)
            {
                if (!Pendiente.PendienteDetalle.Contains(this))
                {
                    Pendiente.PendienteDetalle.Add(this);
                }
    
                PendienteID = Pendiente.PendienteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Pendiente")
                    && (ChangeTracker.OriginalValues["Pendiente"] == Pendiente))
                {
                    ChangeTracker.OriginalValues.Remove("Pendiente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Pendiente", previousValue);
                }
                if (Pendiente != null && !Pendiente.ChangeTracker.ChangeTrackingEnabled)
                {
                    Pendiente.StartTracking();
                }
            }
        }

        #endregion

    }
}
