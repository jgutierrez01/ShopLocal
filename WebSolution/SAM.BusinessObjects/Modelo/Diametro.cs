//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Espesor))]
    [KnownType(typeof(KgTeorico))]
    [KnownType(typeof(Peq))]
    [KnownType(typeof(CostoArmado))]
    [KnownType(typeof(CostoProcesoRaiz))]
    [KnownType(typeof(CostoProcesoRelleno))]
    [Serializable]
    public partial class Diametro: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DiametroID
        {
            get { return _diametroID; }
            set
            {
                if (_diametroID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DiametroID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _diametroID = value;
                    OnPropertyChanged("DiametroID");
                }
            }
        }
        private int _diametroID;
    
        [DataMember]
        public decimal Valor
        {
            get { return _valor; }
            set
            {
                if (_valor != value)
                {
                    _valor = value;
                    OnPropertyChanged("Valor");
                }
            }
        }
        private decimal _valor;
    
        [DataMember]
        public bool VerificadoPorCalidad
        {
            get { return _verificadoPorCalidad; }
            set
            {
                if (_verificadoPorCalidad != value)
                {
                    _verificadoPorCalidad = value;
                    OnPropertyChanged("VerificadoPorCalidad");
                }
            }
        }
        private bool _verificadoPorCalidad;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Espesor> Espesor
        {
            get
            {
                if (_espesor == null)
                {
                    _espesor = new TrackableCollection<Espesor>();
                    _espesor.CollectionChanged += FixupEspesor;
                }
                return _espesor;
            }
            set
            {
                if (!ReferenceEquals(_espesor, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_espesor != null)
                    {
                        _espesor.CollectionChanged -= FixupEspesor;
                    }
                    _espesor = value;
                    if (_espesor != null)
                    {
                        _espesor.CollectionChanged += FixupEspesor;
                    }
                    OnNavigationPropertyChanged("Espesor");
                }
            }
        }
        private TrackableCollection<Espesor> _espesor;
    
        [DataMember]
        public TrackableCollection<KgTeorico> KgTeorico
        {
            get
            {
                if (_kgTeorico == null)
                {
                    _kgTeorico = new TrackableCollection<KgTeorico>();
                    _kgTeorico.CollectionChanged += FixupKgTeorico;
                }
                return _kgTeorico;
            }
            set
            {
                if (!ReferenceEquals(_kgTeorico, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_kgTeorico != null)
                    {
                        _kgTeorico.CollectionChanged -= FixupKgTeorico;
                    }
                    _kgTeorico = value;
                    if (_kgTeorico != null)
                    {
                        _kgTeorico.CollectionChanged += FixupKgTeorico;
                    }
                    OnNavigationPropertyChanged("KgTeorico");
                }
            }
        }
        private TrackableCollection<KgTeorico> _kgTeorico;
    
        [DataMember]
        public TrackableCollection<Peq> Peq
        {
            get
            {
                if (_peq == null)
                {
                    _peq = new TrackableCollection<Peq>();
                    _peq.CollectionChanged += FixupPeq;
                }
                return _peq;
            }
            set
            {
                if (!ReferenceEquals(_peq, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_peq != null)
                    {
                        _peq.CollectionChanged -= FixupPeq;
                    }
                    _peq = value;
                    if (_peq != null)
                    {
                        _peq.CollectionChanged += FixupPeq;
                    }
                    OnNavigationPropertyChanged("Peq");
                }
            }
        }
        private TrackableCollection<Peq> _peq;
    
        [DataMember]
        public TrackableCollection<CostoArmado> CostoArmado
        {
            get
            {
                if (_costoArmado == null)
                {
                    _costoArmado = new TrackableCollection<CostoArmado>();
                    _costoArmado.CollectionChanged += FixupCostoArmado;
                }
                return _costoArmado;
            }
            set
            {
                if (!ReferenceEquals(_costoArmado, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_costoArmado != null)
                    {
                        _costoArmado.CollectionChanged -= FixupCostoArmado;
                    }
                    _costoArmado = value;
                    if (_costoArmado != null)
                    {
                        _costoArmado.CollectionChanged += FixupCostoArmado;
                    }
                    OnNavigationPropertyChanged("CostoArmado");
                }
            }
        }
        private TrackableCollection<CostoArmado> _costoArmado;
    
        [DataMember]
        public TrackableCollection<CostoProcesoRaiz> CostoProcesoRaiz
        {
            get
            {
                if (_costoProcesoRaiz == null)
                {
                    _costoProcesoRaiz = new TrackableCollection<CostoProcesoRaiz>();
                    _costoProcesoRaiz.CollectionChanged += FixupCostoProcesoRaiz;
                }
                return _costoProcesoRaiz;
            }
            set
            {
                if (!ReferenceEquals(_costoProcesoRaiz, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_costoProcesoRaiz != null)
                    {
                        _costoProcesoRaiz.CollectionChanged -= FixupCostoProcesoRaiz;
                    }
                    _costoProcesoRaiz = value;
                    if (_costoProcesoRaiz != null)
                    {
                        _costoProcesoRaiz.CollectionChanged += FixupCostoProcesoRaiz;
                    }
                    OnNavigationPropertyChanged("CostoProcesoRaiz");
                }
            }
        }
        private TrackableCollection<CostoProcesoRaiz> _costoProcesoRaiz;
    
        [DataMember]
        public TrackableCollection<CostoProcesoRelleno> CostoProcesoRelleno
        {
            get
            {
                if (_costoProcesoRelleno == null)
                {
                    _costoProcesoRelleno = new TrackableCollection<CostoProcesoRelleno>();
                    _costoProcesoRelleno.CollectionChanged += FixupCostoProcesoRelleno;
                }
                return _costoProcesoRelleno;
            }
            set
            {
                if (!ReferenceEquals(_costoProcesoRelleno, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_costoProcesoRelleno != null)
                    {
                        _costoProcesoRelleno.CollectionChanged -= FixupCostoProcesoRelleno;
                    }
                    _costoProcesoRelleno = value;
                    if (_costoProcesoRelleno != null)
                    {
                        _costoProcesoRelleno.CollectionChanged += FixupCostoProcesoRelleno;
                    }
                    OnNavigationPropertyChanged("CostoProcesoRelleno");
                }
            }
        }
        private TrackableCollection<CostoProcesoRelleno> _costoProcesoRelleno;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_espesor != null)
    		{
    			_espesor.CollectionChanged -= FixupEspesor;
    			_espesor.CollectionChanged += FixupEspesor;
    			}
    			if (_kgTeorico != null)
    		{
    			_kgTeorico.CollectionChanged -= FixupKgTeorico;
    			_kgTeorico.CollectionChanged += FixupKgTeorico;
    			}
    			if (_peq != null)
    		{
    			_peq.CollectionChanged -= FixupPeq;
    			_peq.CollectionChanged += FixupPeq;
    			}
    			if (_costoArmado != null)
    		{
    			_costoArmado.CollectionChanged -= FixupCostoArmado;
    			_costoArmado.CollectionChanged += FixupCostoArmado;
    			}
    			if (_costoProcesoRaiz != null)
    		{
    			_costoProcesoRaiz.CollectionChanged -= FixupCostoProcesoRaiz;
    			_costoProcesoRaiz.CollectionChanged += FixupCostoProcesoRaiz;
    			}
    			if (_costoProcesoRelleno != null)
    		{
    			_costoProcesoRelleno.CollectionChanged -= FixupCostoProcesoRelleno;
    			_costoProcesoRelleno.CollectionChanged += FixupCostoProcesoRelleno;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Espesor.Clear();
            KgTeorico.Clear();
            Peq.Clear();
            CostoArmado.Clear();
            CostoProcesoRaiz.Clear();
            CostoProcesoRelleno.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupEspesor(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Espesor item in e.NewItems)
                {
                    item.Diametro = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Espesor", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Espesor item in e.OldItems)
                {
                    if (ReferenceEquals(item.Diametro, this))
                    {
                        item.Diametro = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Espesor", item);
                    }
                }
            }
        }
    
        private void FixupKgTeorico(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KgTeorico item in e.NewItems)
                {
                    item.Diametro = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KgTeorico", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KgTeorico item in e.OldItems)
                {
                    if (ReferenceEquals(item.Diametro, this))
                    {
                        item.Diametro = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KgTeorico", item);
                    }
                }
            }
        }
    
        private void FixupPeq(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Peq item in e.NewItems)
                {
                    item.Diametro = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Peq", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Peq item in e.OldItems)
                {
                    if (ReferenceEquals(item.Diametro, this))
                    {
                        item.Diametro = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Peq", item);
                    }
                }
            }
        }
    
        private void FixupCostoArmado(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CostoArmado item in e.NewItems)
                {
                    item.Diametro = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CostoArmado", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CostoArmado item in e.OldItems)
                {
                    if (ReferenceEquals(item.Diametro, this))
                    {
                        item.Diametro = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CostoArmado", item);
                    }
                }
            }
        }
    
        private void FixupCostoProcesoRaiz(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CostoProcesoRaiz item in e.NewItems)
                {
                    item.Diametro = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CostoProcesoRaiz", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CostoProcesoRaiz item in e.OldItems)
                {
                    if (ReferenceEquals(item.Diametro, this))
                    {
                        item.Diametro = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CostoProcesoRaiz", item);
                    }
                }
            }
        }
    
        private void FixupCostoProcesoRelleno(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CostoProcesoRelleno item in e.NewItems)
                {
                    item.Diametro = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CostoProcesoRelleno", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CostoProcesoRelleno item in e.OldItems)
                {
                    if (ReferenceEquals(item.Diametro, this))
                    {
                        item.Diametro = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CostoProcesoRelleno", item);
                    }
                }
            }
        }

        #endregion

    }
}
