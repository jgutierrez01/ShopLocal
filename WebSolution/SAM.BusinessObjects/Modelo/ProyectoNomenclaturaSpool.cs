//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class ProyectoNomenclaturaSpool: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProyectoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int CantidadSegmentosSpool
        {
            get { return _cantidadSegmentosSpool; }
            set
            {
                if (_cantidadSegmentosSpool != value)
                {
                    _cantidadSegmentosSpool = value;
                    OnPropertyChanged("CantidadSegmentosSpool");
                }
            }
        }
        private int _cantidadSegmentosSpool;
    
        [DataMember]
        public string SegmentoSpool1
        {
            get { return _segmentoSpool1; }
            set
            {
                if (_segmentoSpool1 != value)
                {
                    _segmentoSpool1 = value;
                    OnPropertyChanged("SegmentoSpool1");
                }
            }
        }
        private string _segmentoSpool1;
    
        [DataMember]
        public string SegmentoSpool2
        {
            get { return _segmentoSpool2; }
            set
            {
                if (_segmentoSpool2 != value)
                {
                    _segmentoSpool2 = value;
                    OnPropertyChanged("SegmentoSpool2");
                }
            }
        }
        private string _segmentoSpool2;
    
        [DataMember]
        public string SegmentoSpool3
        {
            get { return _segmentoSpool3; }
            set
            {
                if (_segmentoSpool3 != value)
                {
                    _segmentoSpool3 = value;
                    OnPropertyChanged("SegmentoSpool3");
                }
            }
        }
        private string _segmentoSpool3;
    
        [DataMember]
        public string SegmentoSpool4
        {
            get { return _segmentoSpool4; }
            set
            {
                if (_segmentoSpool4 != value)
                {
                    _segmentoSpool4 = value;
                    OnPropertyChanged("SegmentoSpool4");
                }
            }
        }
        private string _segmentoSpool4;
    
        [DataMember]
        public string SegmentoSpool5
        {
            get { return _segmentoSpool5; }
            set
            {
                if (_segmentoSpool5 != value)
                {
                    _segmentoSpool5 = value;
                    OnPropertyChanged("SegmentoSpool5");
                }
            }
        }
        private string _segmentoSpool5;
    
        [DataMember]
        public string SegmentoSpool7
        {
            get { return _segmentoSpool7; }
            set
            {
                if (_segmentoSpool7 != value)
                {
                    _segmentoSpool7 = value;
                    OnPropertyChanged("SegmentoSpool7");
                }
            }
        }
        private string _segmentoSpool7;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string SegmentoSpool6
        {
            get { return _segmentoSpool6; }
            set
            {
                if (_segmentoSpool6 != value)
                {
                    _segmentoSpool6 = value;
                    OnPropertyChanged("SegmentoSpool6");
                }
            }
        }
        private string _segmentoSpool6;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProyectoID != value.ProyectoID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProyectoNomenclaturaSpool, this))
            {
                previousValue.ProyectoNomenclaturaSpool = null;
            }
    
            if (Proyecto != null)
            {
                Proyecto.ProyectoNomenclaturaSpool = this;
                ProyectoID = Proyecto.ProyectoID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }

        #endregion

    }
}
