//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Fabricante))]
    [KnownType(typeof(Proveedor))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(Transportista))]
    [Serializable]
    public partial class Contacto: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ContactoID
        {
            get { return _contactoID; }
            set
            {
                if (_contactoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ContactoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _contactoID = value;
                    OnPropertyChanged("ContactoID");
                }
            }
        }
        private int _contactoID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string ApPaterno
        {
            get { return _apPaterno; }
            set
            {
                if (_apPaterno != value)
                {
                    _apPaterno = value;
                    OnPropertyChanged("ApPaterno");
                }
            }
        }
        private string _apPaterno;
    
        [DataMember]
        public string ApMaterno
        {
            get { return _apMaterno; }
            set
            {
                if (_apMaterno != value)
                {
                    _apMaterno = value;
                    OnPropertyChanged("ApMaterno");
                }
            }
        }
        private string _apMaterno;
    
        [DataMember]
        public string CorreoElectronico
        {
            get { return _correoElectronico; }
            set
            {
                if (_correoElectronico != value)
                {
                    _correoElectronico = value;
                    OnPropertyChanged("CorreoElectronico");
                }
            }
        }
        private string _correoElectronico;
    
        [DataMember]
        public string TelefonoOficina
        {
            get { return _telefonoOficina; }
            set
            {
                if (_telefonoOficina != value)
                {
                    _telefonoOficina = value;
                    OnPropertyChanged("TelefonoOficina");
                }
            }
        }
        private string _telefonoOficina;
    
        [DataMember]
        public string TelefonoParticular
        {
            get { return _telefonoParticular; }
            set
            {
                if (_telefonoParticular != value)
                {
                    _telefonoParticular = value;
                    OnPropertyChanged("TelefonoParticular");
                }
            }
        }
        private string _telefonoParticular;
    
        [DataMember]
        public string TelefonoCelular
        {
            get { return _telefonoCelular; }
            set
            {
                if (_telefonoCelular != value)
                {
                    _telefonoCelular = value;
                    OnPropertyChanged("TelefonoCelular");
                }
            }
        }
        private string _telefonoCelular;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Fabricante> Fabricante
        {
            get
            {
                if (_fabricante == null)
                {
                    _fabricante = new TrackableCollection<Fabricante>();
                    _fabricante.CollectionChanged += FixupFabricante;
                }
                return _fabricante;
            }
            set
            {
                if (!ReferenceEquals(_fabricante, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fabricante != null)
                    {
                        _fabricante.CollectionChanged -= FixupFabricante;
                    }
                    _fabricante = value;
                    if (_fabricante != null)
                    {
                        _fabricante.CollectionChanged += FixupFabricante;
                    }
                    OnNavigationPropertyChanged("Fabricante");
                }
            }
        }
        private TrackableCollection<Fabricante> _fabricante;
    
        [DataMember]
        public TrackableCollection<Proveedor> Proveedor
        {
            get
            {
                if (_proveedor == null)
                {
                    _proveedor = new TrackableCollection<Proveedor>();
                    _proveedor.CollectionChanged += FixupProveedor;
                }
                return _proveedor;
            }
            set
            {
                if (!ReferenceEquals(_proveedor, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_proveedor != null)
                    {
                        _proveedor.CollectionChanged -= FixupProveedor;
                    }
                    _proveedor = value;
                    if (_proveedor != null)
                    {
                        _proveedor.CollectionChanged += FixupProveedor;
                    }
                    OnNavigationPropertyChanged("Proveedor");
                }
            }
        }
        private TrackableCollection<Proveedor> _proveedor;
    
        [DataMember]
        public TrackableCollection<Proyecto> Proyecto
        {
            get
            {
                if (_proyecto == null)
                {
                    _proyecto = new TrackableCollection<Proyecto>();
                    _proyecto.CollectionChanged += FixupProyecto;
                }
                return _proyecto;
            }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_proyecto != null)
                    {
                        _proyecto.CollectionChanged -= FixupProyecto;
                    }
                    _proyecto = value;
                    if (_proyecto != null)
                    {
                        _proyecto.CollectionChanged += FixupProyecto;
                    }
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private TrackableCollection<Proyecto> _proyecto;
    
        [DataMember]
        public TrackableCollection<Transportista> Transportista
        {
            get
            {
                if (_transportista == null)
                {
                    _transportista = new TrackableCollection<Transportista>();
                    _transportista.CollectionChanged += FixupTransportista;
                }
                return _transportista;
            }
            set
            {
                if (!ReferenceEquals(_transportista, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_transportista != null)
                    {
                        _transportista.CollectionChanged -= FixupTransportista;
                    }
                    _transportista = value;
                    if (_transportista != null)
                    {
                        _transportista.CollectionChanged += FixupTransportista;
                    }
                    OnNavigationPropertyChanged("Transportista");
                }
            }
        }
        private TrackableCollection<Transportista> _transportista;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_fabricante != null)
    		{
    			_fabricante.CollectionChanged -= FixupFabricante;
    			_fabricante.CollectionChanged += FixupFabricante;
    			}
    			if (_proveedor != null)
    		{
    			_proveedor.CollectionChanged -= FixupProveedor;
    			_proveedor.CollectionChanged += FixupProveedor;
    			}
    			if (_proyecto != null)
    		{
    			_proyecto.CollectionChanged -= FixupProyecto;
    			_proyecto.CollectionChanged += FixupProyecto;
    			}
    			if (_transportista != null)
    		{
    			_transportista.CollectionChanged -= FixupTransportista;
    			_transportista.CollectionChanged += FixupTransportista;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Fabricante.Clear();
            Proveedor.Clear();
            Proyecto.Clear();
            Transportista.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupFabricante(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Fabricante item in e.NewItems)
                {
                    item.Contacto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Fabricante", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Fabricante item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contacto, this))
                    {
                        item.Contacto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Fabricante", item);
                    }
                }
            }
        }
    
        private void FixupProveedor(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Proveedor item in e.NewItems)
                {
                    item.Contacto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Proveedor", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Proveedor item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contacto, this))
                    {
                        item.Contacto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Proveedor", item);
                    }
                }
            }
        }
    
        private void FixupProyecto(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Proyecto item in e.NewItems)
                {
                    item.Contacto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Proyecto", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Proyecto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contacto, this))
                    {
                        item.Contacto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Proyecto", item);
                    }
                }
            }
        }
    
        private void FixupTransportista(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Transportista item in e.NewItems)
                {
                    item.Contacto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Transportista", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Transportista item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contacto, this))
                    {
                        item.Contacto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Transportista", item);
                    }
                }
            }
        }

        #endregion

    }
}
