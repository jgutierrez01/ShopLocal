//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(TipoPruebaSpool))]
    [KnownType(typeof(SpoolReportePnd))]
    [Serializable]
    public partial class ReporteSpoolPnd: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ReporteSpoolPndID
        {
            get { return _reporteSpoolPndID; }
            set
            {
                if (_reporteSpoolPndID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReporteSpoolPndID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reporteSpoolPndID = value;
                    OnPropertyChanged("ReporteSpoolPndID");
                }
            }
        }
        private int _reporteSpoolPndID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int TipoPruebaSpoolID
        {
            get { return _tipoPruebaSpoolID; }
            set
            {
                if (_tipoPruebaSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoPruebaSpoolID", _tipoPruebaSpoolID);
                    if (!IsDeserializing)
                    {
                        if (TipoPruebaSpool != null && TipoPruebaSpool.TipoPruebaSpoolID != value)
                        {
                            TipoPruebaSpool = null;
                        }
                    }
                    _tipoPruebaSpoolID = value;
                    OnPropertyChanged("TipoPruebaSpoolID");
                }
            }
        }
        private int _tipoPruebaSpoolID;
    
        [DataMember]
        public string NumeroReporte
        {
            get { return _numeroReporte; }
            set
            {
                if (_numeroReporte != value)
                {
                    _numeroReporte = value;
                    OnPropertyChanged("NumeroReporte");
                }
            }
        }
        private string _numeroReporte;
    
        [DataMember]
        public System.DateTime FechaReporte
        {
            get { return _fechaReporte; }
            set
            {
                if (_fechaReporte != value)
                {
                    _fechaReporte = value;
                    OnPropertyChanged("FechaReporte");
                }
            }
        }
        private System.DateTime _fechaReporte;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string Presion
        {
            get { return _presion; }
            set
            {
                if (_presion != value)
                {
                    _presion = value;
                    OnPropertyChanged("Presion");
                }
            }
        }
        private string _presion;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TipoPruebaSpool TipoPruebaSpool
        {
            get { return _tipoPruebaSpool; }
            set
            {
                if (!ReferenceEquals(_tipoPruebaSpool, value))
                {
                    var previousValue = _tipoPruebaSpool;
                    _tipoPruebaSpool = value;
                    FixupTipoPruebaSpool(previousValue);
                    OnNavigationPropertyChanged("TipoPruebaSpool");
                }
            }
        }
        private TipoPruebaSpool _tipoPruebaSpool;
    
        [DataMember]
        public TrackableCollection<SpoolReportePnd> SpoolReportePnd
        {
            get
            {
                if (_spoolReportePnd == null)
                {
                    _spoolReportePnd = new TrackableCollection<SpoolReportePnd>();
                    _spoolReportePnd.CollectionChanged += FixupSpoolReportePnd;
                }
                return _spoolReportePnd;
            }
            set
            {
                if (!ReferenceEquals(_spoolReportePnd, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_spoolReportePnd != null)
                    {
                        _spoolReportePnd.CollectionChanged -= FixupSpoolReportePnd;
                    }
                    _spoolReportePnd = value;
                    if (_spoolReportePnd != null)
                    {
                        _spoolReportePnd.CollectionChanged += FixupSpoolReportePnd;
                    }
                    OnNavigationPropertyChanged("SpoolReportePnd");
                }
            }
        }
        private TrackableCollection<SpoolReportePnd> _spoolReportePnd;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_spoolReportePnd != null)
    		{
    			_spoolReportePnd.CollectionChanged -= FixupSpoolReportePnd;
    			_spoolReportePnd.CollectionChanged += FixupSpoolReportePnd;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
            TipoPruebaSpool = null;
            SpoolReportePnd.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReporteSpoolPnd.Contains(this))
            {
                previousValue.ReporteSpoolPnd.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.ReporteSpoolPnd.Contains(this))
                {
                    Proyecto.ReporteSpoolPnd.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupTipoPruebaSpool(TipoPruebaSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReporteSpoolPnd.Contains(this))
            {
                previousValue.ReporteSpoolPnd.Remove(this);
            }
    
            if (TipoPruebaSpool != null)
            {
                if (!TipoPruebaSpool.ReporteSpoolPnd.Contains(this))
                {
                    TipoPruebaSpool.ReporteSpoolPnd.Add(this);
                }
    
                TipoPruebaSpoolID = TipoPruebaSpool.TipoPruebaSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoPruebaSpool")
                    && (ChangeTracker.OriginalValues["TipoPruebaSpool"] == TipoPruebaSpool))
                {
                    ChangeTracker.OriginalValues.Remove("TipoPruebaSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoPruebaSpool", previousValue);
                }
                if (TipoPruebaSpool != null && !TipoPruebaSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoPruebaSpool.StartTracking();
                }
            }
        }
    
        private void FixupSpoolReportePnd(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpoolReportePnd item in e.NewItems)
                {
                    item.ReporteSpoolPnd = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpoolReportePnd", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpoolReportePnd item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReporteSpoolPnd, this))
                    {
                        item.ReporteSpoolPnd = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpoolReportePnd", item);
                    }
                }
            }
        }

        #endregion

    }
}
