//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(Usuario))]
    [Serializable]
    public partial class ProyectoCamposRecepcion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProyectoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int CantidadCamposRecepcion
        {
            get { return _cantidadCamposRecepcion; }
            set
            {
                if (_cantidadCamposRecepcion != value)
                {
                    _cantidadCamposRecepcion = value;
                    OnPropertyChanged("CantidadCamposRecepcion");
                }
            }
        }
        private int _cantidadCamposRecepcion;
    
        [DataMember]
        public string CampoRecepcion1
        {
            get { return _campoRecepcion1; }
            set
            {
                if (_campoRecepcion1 != value)
                {
                    _campoRecepcion1 = value;
                    OnPropertyChanged("CampoRecepcion1");
                }
            }
        }
        private string _campoRecepcion1;
    
        [DataMember]
        public string CampoRecepcion2
        {
            get { return _campoRecepcion2; }
            set
            {
                if (_campoRecepcion2 != value)
                {
                    _campoRecepcion2 = value;
                    OnPropertyChanged("CampoRecepcion2");
                }
            }
        }
        private string _campoRecepcion2;
    
        [DataMember]
        public string CampoRecepcion3
        {
            get { return _campoRecepcion3; }
            set
            {
                if (_campoRecepcion3 != value)
                {
                    _campoRecepcion3 = value;
                    OnPropertyChanged("CampoRecepcion3");
                }
            }
        }
        private string _campoRecepcion3;
    
        [DataMember]
        public string CampoRecepcion4
        {
            get { return _campoRecepcion4; }
            set
            {
                if (_campoRecepcion4 != value)
                {
                    _campoRecepcion4 = value;
                    OnPropertyChanged("CampoRecepcion4");
                }
            }
        }
        private string _campoRecepcion4;
    
        [DataMember]
        public string CampoRecepcion5
        {
            get { return _campoRecepcion5; }
            set
            {
                if (_campoRecepcion5 != value)
                {
                    _campoRecepcion5 = value;
                    OnPropertyChanged("CampoRecepcion5");
                }
            }
        }
        private string _campoRecepcion5;
    
        [DataMember]
        public int CantidadCamposNumeroUnico
        {
            get { return _cantidadCamposNumeroUnico; }
            set
            {
                if (_cantidadCamposNumeroUnico != value)
                {
                    _cantidadCamposNumeroUnico = value;
                    OnPropertyChanged("CantidadCamposNumeroUnico");
                }
            }
        }
        private int _cantidadCamposNumeroUnico;
    
        [DataMember]
        public string CampoNumeroUnico1
        {
            get { return _campoNumeroUnico1; }
            set
            {
                if (_campoNumeroUnico1 != value)
                {
                    _campoNumeroUnico1 = value;
                    OnPropertyChanged("CampoNumeroUnico1");
                }
            }
        }
        private string _campoNumeroUnico1;
    
        [DataMember]
        public string CampoNumeroUnico2
        {
            get { return _campoNumeroUnico2; }
            set
            {
                if (_campoNumeroUnico2 != value)
                {
                    _campoNumeroUnico2 = value;
                    OnPropertyChanged("CampoNumeroUnico2");
                }
            }
        }
        private string _campoNumeroUnico2;
    
        [DataMember]
        public string CampoNumeroUnico3
        {
            get { return _campoNumeroUnico3; }
            set
            {
                if (_campoNumeroUnico3 != value)
                {
                    _campoNumeroUnico3 = value;
                    OnPropertyChanged("CampoNumeroUnico3");
                }
            }
        }
        private string _campoNumeroUnico3;
    
        [DataMember]
        public string CampoNumeroUnico4
        {
            get { return _campoNumeroUnico4; }
            set
            {
                if (_campoNumeroUnico4 != value)
                {
                    _campoNumeroUnico4 = value;
                    OnPropertyChanged("CampoNumeroUnico4");
                }
            }
        }
        private string _campoNumeroUnico4;
    
        [DataMember]
        public string CampoNumeroUnico5
        {
            get { return _campoNumeroUnico5; }
            set
            {
                if (_campoNumeroUnico5 != value)
                {
                    _campoNumeroUnico5 = value;
                    OnPropertyChanged("CampoNumeroUnico5");
                }
            }
        }
        private string _campoNumeroUnico5;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuarioModifica", _usuarioModifica);
                    if (!IsDeserializing)
                    {
                        if (Usuario != null && Usuario.UserId != value)
                        {
                            Usuario = null;
                        }
                    }
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProyectoID != value.ProyectoID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public Usuario Usuario
        {
            get { return _usuario; }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    var previousValue = _usuario;
                    _usuario = value;
                    FixupUsuario(previousValue);
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private Usuario _usuario;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
            Usuario = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProyectoCamposRecepcion, this))
            {
                previousValue.ProyectoCamposRecepcion = null;
            }
    
            if (Proyecto != null)
            {
                Proyecto.ProyectoCamposRecepcion = this;
                ProyectoID = Proyecto.ProyectoID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupUsuario(Usuario previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProyectoCamposRecepcion.Contains(this))
            {
                previousValue.ProyectoCamposRecepcion.Remove(this);
            }
    
            if (Usuario != null)
            {
                if (!Usuario.ProyectoCamposRecepcion.Contains(this))
                {
                    Usuario.ProyectoCamposRecepcion.Add(this);
                }
    
                UsuarioModifica = Usuario.UserId;
            }
            else if (!skipKeys)
            {
                UsuarioModifica = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Usuario")
                    && (ChangeTracker.OriginalValues["Usuario"] == Usuario))
                {
                    ChangeTracker.OriginalValues.Remove("Usuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Usuario", previousValue);
                }
                if (Usuario != null && !Usuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    Usuario.StartTracking();
                }
            }
        }

        #endregion

    }
}
