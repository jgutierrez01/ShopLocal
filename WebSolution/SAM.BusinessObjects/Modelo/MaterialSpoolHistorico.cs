//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SpoolHistorico))]
    [Serializable]
    public partial class MaterialSpoolHistorico: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MaterialSpoolHistoricoID
        {
            get { return _materialSpoolHistoricoID; }
            set
            {
                if (_materialSpoolHistoricoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MaterialSpoolHistoricoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _materialSpoolHistoricoID = value;
                    OnPropertyChanged("MaterialSpoolHistoricoID");
                }
            }
        }
        private int _materialSpoolHistoricoID;
    
        [DataMember]
        public int SpoolHistoricoID
        {
            get { return _spoolHistoricoID; }
            set
            {
                if (_spoolHistoricoID != value)
                {
                    ChangeTracker.RecordOriginalValue("SpoolHistoricoID", _spoolHistoricoID);
                    if (!IsDeserializing)
                    {
                        if (SpoolHistorico != null && SpoolHistorico.SpoolHistoricoID != value)
                        {
                            SpoolHistorico = null;
                        }
                    }
                    _spoolHistoricoID = value;
                    OnPropertyChanged("SpoolHistoricoID");
                }
            }
        }
        private int _spoolHistoricoID;
    
        [DataMember]
        public int MaterialSpoolID
        {
            get { return _materialSpoolID; }
            set
            {
                if (_materialSpoolID != value)
                {
                    _materialSpoolID = value;
                    OnPropertyChanged("MaterialSpoolID");
                }
            }
        }
        private int _materialSpoolID;
    
        [DataMember]
        public int SpoolID
        {
            get { return _spoolID; }
            set
            {
                if (_spoolID != value)
                {
                    _spoolID = value;
                    OnPropertyChanged("SpoolID");
                }
            }
        }
        private int _spoolID;
    
        [DataMember]
        public int ItemCodeID
        {
            get { return _itemCodeID; }
            set
            {
                if (_itemCodeID != value)
                {
                    _itemCodeID = value;
                    OnPropertyChanged("ItemCodeID");
                }
            }
        }
        private int _itemCodeID;
    
        [DataMember]
        public decimal Diametro1
        {
            get { return _diametro1; }
            set
            {
                if (_diametro1 != value)
                {
                    _diametro1 = value;
                    OnPropertyChanged("Diametro1");
                }
            }
        }
        private decimal _diametro1;
    
        [DataMember]
        public decimal Diametro2
        {
            get { return _diametro2; }
            set
            {
                if (_diametro2 != value)
                {
                    _diametro2 = value;
                    OnPropertyChanged("Diametro2");
                }
            }
        }
        private decimal _diametro2;
    
        [DataMember]
        public string Etiqueta
        {
            get { return _etiqueta; }
            set
            {
                if (_etiqueta != value)
                {
                    _etiqueta = value;
                    OnPropertyChanged("Etiqueta");
                }
            }
        }
        private string _etiqueta;
    
        [DataMember]
        public int Cantidad
        {
            get { return _cantidad; }
            set
            {
                if (_cantidad != value)
                {
                    _cantidad = value;
                    OnPropertyChanged("Cantidad");
                }
            }
        }
        private int _cantidad;
    
        [DataMember]
        public Nullable<decimal> Peso
        {
            get { return _peso; }
            set
            {
                if (_peso != value)
                {
                    _peso = value;
                    OnPropertyChanged("Peso");
                }
            }
        }
        private Nullable<decimal> _peso;
    
        [DataMember]
        public Nullable<decimal> Area
        {
            get { return _area; }
            set
            {
                if (_area != value)
                {
                    _area = value;
                    OnPropertyChanged("Area");
                }
            }
        }
        private Nullable<decimal> _area;
    
        [DataMember]
        public string Especificacion
        {
            get { return _especificacion; }
            set
            {
                if (_especificacion != value)
                {
                    _especificacion = value;
                    OnPropertyChanged("Especificacion");
                }
            }
        }
        private string _especificacion;
    
        [DataMember]
        public string Grupo
        {
            get { return _grupo; }
            set
            {
                if (_grupo != value)
                {
                    _grupo = value;
                    OnPropertyChanged("Grupo");
                }
            }
        }
        private string _grupo;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string SpoolNombre
        {
            get { return _spoolNombre; }
            set
            {
                if (_spoolNombre != value)
                {
                    _spoolNombre = value;
                    OnPropertyChanged("SpoolNombre");
                }
            }
        }
        private string _spoolNombre;
    
        [DataMember]
        public string ItemCodeDescripcionEspanol
        {
            get { return _itemCodeDescripcionEspanol; }
            set
            {
                if (_itemCodeDescripcionEspanol != value)
                {
                    _itemCodeDescripcionEspanol = value;
                    OnPropertyChanged("ItemCodeDescripcionEspanol");
                }
            }
        }
        private string _itemCodeDescripcionEspanol;
    
        [DataMember]
        public string ItemCodeDescripcionIngles
        {
            get { return _itemCodeDescripcionIngles; }
            set
            {
                if (_itemCodeDescripcionIngles != value)
                {
                    _itemCodeDescripcionIngles = value;
                    OnPropertyChanged("ItemCodeDescripcionIngles");
                }
            }
        }
        private string _itemCodeDescripcionIngles;
    
        [DataMember]
        public string ItemCodeCodigo
        {
            get { return _itemCodeCodigo; }
            set
            {
                if (_itemCodeCodigo != value)
                {
                    _itemCodeCodigo = value;
                    OnPropertyChanged("ItemCodeCodigo");
                }
            }
        }
        private string _itemCodeCodigo;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public SpoolHistorico SpoolHistorico
        {
            get { return _spoolHistorico; }
            set
            {
                if (!ReferenceEquals(_spoolHistorico, value))
                {
                    var previousValue = _spoolHistorico;
                    _spoolHistorico = value;
                    FixupSpoolHistorico(previousValue);
                    OnNavigationPropertyChanged("SpoolHistorico");
                }
            }
        }
        private SpoolHistorico _spoolHistorico;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            SpoolHistorico = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSpoolHistorico(SpoolHistorico previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MaterialSpoolHistorico.Contains(this))
            {
                previousValue.MaterialSpoolHistorico.Remove(this);
            }
    
            if (SpoolHistorico != null)
            {
                if (!SpoolHistorico.MaterialSpoolHistorico.Contains(this))
                {
                    SpoolHistorico.MaterialSpoolHistorico.Add(this);
                }
    
                SpoolHistoricoID = SpoolHistorico.SpoolHistoricoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SpoolHistorico")
                    && (ChangeTracker.OriginalValues["SpoolHistorico"] == SpoolHistorico))
                {
                    ChangeTracker.OriginalValues.Remove("SpoolHistorico");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SpoolHistorico", previousValue);
                }
                if (SpoolHistorico != null && !SpoolHistorico.ChangeTracker.ChangeTrackingEnabled)
                {
                    SpoolHistorico.StartTracking();
                }
            }
        }

        #endregion

    }
}
