//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cuadrante))]
    [KnownType(typeof(Usuario))]
    [KnownType(typeof(Patio))]
    [Serializable]
    public partial class Destino: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DestinoID
        {
            get { return _destinoID; }
            set
            {
                if (_destinoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DestinoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _destinoID = value;
                    OnPropertyChanged("DestinoID");
                }
            }
        }
        private int _destinoID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public Nullable<int> CuadranteID
        {
            get { return _cuadranteID; }
            set
            {
                if (_cuadranteID != value)
                {
                    ChangeTracker.RecordOriginalValue("CuadranteID", _cuadranteID);
                    if (!IsDeserializing)
                    {
                        if (Cuadrante != null && Cuadrante.CuadranteID != value)
                        {
                            Cuadrante = null;
                        }
                    }
                    _cuadranteID = value;
                    OnPropertyChanged("CuadranteID");
                }
            }
        }
        private Nullable<int> _cuadranteID;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuarioModifica", _usuarioModifica);
                    if (!IsDeserializing)
                    {
                        if (Usuario != null && Usuario.UserId != value)
                        {
                            Usuario = null;
                        }
                    }
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public int PatioID
        {
            get { return _patioID; }
            set
            {
                if (_patioID != value)
                {
                    ChangeTracker.RecordOriginalValue("PatioID", _patioID);
                    if (!IsDeserializing)
                    {
                        if (Patio != null && Patio.PatioID != value)
                        {
                            Patio = null;
                        }
                    }
                    _patioID = value;
                    OnPropertyChanged("PatioID");
                }
            }
        }
        private int _patioID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Cuadrante Cuadrante
        {
            get { return _cuadrante; }
            set
            {
                if (!ReferenceEquals(_cuadrante, value))
                {
                    var previousValue = _cuadrante;
                    _cuadrante = value;
                    FixupCuadrante(previousValue);
                    OnNavigationPropertyChanged("Cuadrante");
                }
            }
        }
        private Cuadrante _cuadrante;
    
        [DataMember]
        public Usuario Usuario
        {
            get { return _usuario; }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    var previousValue = _usuario;
                    _usuario = value;
                    FixupUsuario(previousValue);
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private Usuario _usuario;
    
        [DataMember]
        public Patio Patio
        {
            get { return _patio; }
            set
            {
                if (!ReferenceEquals(_patio, value))
                {
                    var previousValue = _patio;
                    _patio = value;
                    FixupPatio(previousValue);
                    OnNavigationPropertyChanged("Patio");
                }
            }
        }
        private Patio _patio;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Cuadrante = null;
            Usuario = null;
            Patio = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCuadrante(Cuadrante previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Destino.Contains(this))
            {
                previousValue.Destino.Remove(this);
            }
    
            if (Cuadrante != null)
            {
                if (!Cuadrante.Destino.Contains(this))
                {
                    Cuadrante.Destino.Add(this);
                }
    
                CuadranteID = Cuadrante.CuadranteID;
            }
            else if (!skipKeys)
            {
                CuadranteID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Cuadrante")
                    && (ChangeTracker.OriginalValues["Cuadrante"] == Cuadrante))
                {
                    ChangeTracker.OriginalValues.Remove("Cuadrante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Cuadrante", previousValue);
                }
                if (Cuadrante != null && !Cuadrante.ChangeTracker.ChangeTrackingEnabled)
                {
                    Cuadrante.StartTracking();
                }
            }
        }
    
        private void FixupUsuario(Usuario previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Destino.Contains(this))
            {
                previousValue.Destino.Remove(this);
            }
    
            if (Usuario != null)
            {
                if (!Usuario.Destino.Contains(this))
                {
                    Usuario.Destino.Add(this);
                }
    
                UsuarioModifica = Usuario.UserId;
            }
            else if (!skipKeys)
            {
                UsuarioModifica = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Usuario")
                    && (ChangeTracker.OriginalValues["Usuario"] == Usuario))
                {
                    ChangeTracker.OriginalValues.Remove("Usuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Usuario", previousValue);
                }
                if (Usuario != null && !Usuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    Usuario.StartTracking();
                }
            }
        }
    
        private void FixupPatio(Patio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Destino.Contains(this))
            {
                previousValue.Destino.Remove(this);
            }
    
            if (Patio != null)
            {
                if (!Patio.Destino.Contains(this))
                {
                    Patio.Destino.Add(this);
                }
    
                PatioID = Patio.PatioID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Patio")
                    && (ChangeTracker.OriginalValues["Patio"] == Patio))
                {
                    ChangeTracker.OriginalValues.Remove("Patio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Patio", previousValue);
                }
                if (Patio != null && !Patio.ChangeTracker.ChangeTrackingEnabled)
                {
                    Patio.StartTracking();
                }
            }
        }

        #endregion

    }
}
