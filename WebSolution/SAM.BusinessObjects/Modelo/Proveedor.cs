//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Contacto))]
    [KnownType(typeof(NumeroUnico))]
    [KnownType(typeof(ProveedorProyecto))]
    [Serializable]
    public partial class Proveedor: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProveedorID
        {
            get { return _proveedorID; }
            set
            {
                if (_proveedorID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProveedorID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _proveedorID = value;
                    OnPropertyChanged("ProveedorID");
                }
            }
        }
        private int _proveedorID;
    
        [DataMember]
        public int ContactoID
        {
            get { return _contactoID; }
            set
            {
                if (_contactoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ContactoID", _contactoID);
                    if (!IsDeserializing)
                    {
                        if (Contacto != null && Contacto.ContactoID != value)
                        {
                            Contacto = null;
                        }
                    }
                    _contactoID = value;
                    OnPropertyChanged("ContactoID");
                }
            }
        }
        private int _contactoID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string Descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("Descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public string Direccion
        {
            get { return _direccion; }
            set
            {
                if (_direccion != value)
                {
                    _direccion = value;
                    OnPropertyChanged("Direccion");
                }
            }
        }
        private string _direccion;
    
        [DataMember]
        public string Telefono
        {
            get { return _telefono; }
            set
            {
                if (_telefono != value)
                {
                    _telefono = value;
                    OnPropertyChanged("Telefono");
                }
            }
        }
        private string _telefono;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Contacto Contacto
        {
            get { return _contacto; }
            set
            {
                if (!ReferenceEquals(_contacto, value))
                {
                    var previousValue = _contacto;
                    _contacto = value;
                    FixupContacto(previousValue);
                    OnNavigationPropertyChanged("Contacto");
                }
            }
        }
        private Contacto _contacto;
    
        [DataMember]
        public TrackableCollection<NumeroUnico> NumeroUnico
        {
            get
            {
                if (_numeroUnico == null)
                {
                    _numeroUnico = new TrackableCollection<NumeroUnico>();
                    _numeroUnico.CollectionChanged += FixupNumeroUnico;
                }
                return _numeroUnico;
            }
            set
            {
                if (!ReferenceEquals(_numeroUnico, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_numeroUnico != null)
                    {
                        _numeroUnico.CollectionChanged -= FixupNumeroUnico;
                    }
                    _numeroUnico = value;
                    if (_numeroUnico != null)
                    {
                        _numeroUnico.CollectionChanged += FixupNumeroUnico;
                    }
                    OnNavigationPropertyChanged("NumeroUnico");
                }
            }
        }
        private TrackableCollection<NumeroUnico> _numeroUnico;
    
        [DataMember]
        public TrackableCollection<ProveedorProyecto> ProveedorProyecto
        {
            get
            {
                if (_proveedorProyecto == null)
                {
                    _proveedorProyecto = new TrackableCollection<ProveedorProyecto>();
                    _proveedorProyecto.CollectionChanged += FixupProveedorProyecto;
                }
                return _proveedorProyecto;
            }
            set
            {
                if (!ReferenceEquals(_proveedorProyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_proveedorProyecto != null)
                    {
                        _proveedorProyecto.CollectionChanged -= FixupProveedorProyecto;
                    }
                    _proveedorProyecto = value;
                    if (_proveedorProyecto != null)
                    {
                        _proveedorProyecto.CollectionChanged += FixupProveedorProyecto;
                    }
                    OnNavigationPropertyChanged("ProveedorProyecto");
                }
            }
        }
        private TrackableCollection<ProveedorProyecto> _proveedorProyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_numeroUnico != null)
    		{
    			_numeroUnico.CollectionChanged -= FixupNumeroUnico;
    			_numeroUnico.CollectionChanged += FixupNumeroUnico;
    			}
    			if (_proveedorProyecto != null)
    		{
    			_proveedorProyecto.CollectionChanged -= FixupProveedorProyecto;
    			_proveedorProyecto.CollectionChanged += FixupProveedorProyecto;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Contacto = null;
            NumeroUnico.Clear();
            ProveedorProyecto.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupContacto(Contacto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Proveedor.Contains(this))
            {
                previousValue.Proveedor.Remove(this);
            }
    
            if (Contacto != null)
            {
                if (!Contacto.Proveedor.Contains(this))
                {
                    Contacto.Proveedor.Add(this);
                }
    
                ContactoID = Contacto.ContactoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Contacto")
                    && (ChangeTracker.OriginalValues["Contacto"] == Contacto))
                {
                    ChangeTracker.OriginalValues.Remove("Contacto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Contacto", previousValue);
                }
                if (Contacto != null && !Contacto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Contacto.StartTracking();
                }
            }
        }
    
        private void FixupNumeroUnico(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NumeroUnico item in e.NewItems)
                {
                    item.Proveedor = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NumeroUnico", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NumeroUnico item in e.OldItems)
                {
                    if (ReferenceEquals(item.Proveedor, this))
                    {
                        item.Proveedor = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NumeroUnico", item);
                    }
                }
            }
        }
    
        private void FixupProveedorProyecto(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProveedorProyecto item in e.NewItems)
                {
                    item.Proveedor = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProveedorProyecto", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProveedorProyecto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Proveedor, this))
                    {
                        item.Proveedor = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProveedorProyecto", item);
                    }
                }
            }
        }

        #endregion

    }
}
