//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EmbarqueSpool))]
    [KnownType(typeof(OrdenTrabajoSpool))]
    [KnownType(typeof(PinturaSpool))]
    [KnownType(typeof(ReporteDimensionalDetalle))]
    [KnownType(typeof(RequisicionPinturaDetalle))]
    [KnownType(typeof(EstimacionSpool))]
    [KnownType(typeof(InspeccionDimensionalPatio))]
    [KnownType(typeof(UltimoProceso))]
    [KnownType(typeof(SpoolRequisicion))]
    [KnownType(typeof(SpoolReportePnd))]
    [Serializable]
    public partial class WorkstatusSpool: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int WorkstatusSpoolID
        {
            get { return _workstatusSpoolID; }
            set
            {
                if (_workstatusSpoolID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'WorkstatusSpoolID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _workstatusSpoolID = value;
                    OnPropertyChanged("WorkstatusSpoolID");
                }
            }
        }
        private int _workstatusSpoolID;
    
        [DataMember]
        public int OrdenTrabajoSpoolID
        {
            get { return _ordenTrabajoSpoolID; }
            set
            {
                if (_ordenTrabajoSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpoolID", _ordenTrabajoSpoolID);
                    if (!IsDeserializing)
                    {
                        if (OrdenTrabajoSpool != null && OrdenTrabajoSpool.OrdenTrabajoSpoolID != value)
                        {
                            OrdenTrabajoSpool = null;
                        }
                    }
                    _ordenTrabajoSpoolID = value;
                    OnPropertyChanged("OrdenTrabajoSpoolID");
                }
            }
        }
        private int _ordenTrabajoSpoolID;
    
        [DataMember]
        public bool TieneLiberacionDimensional
        {
            get { return _tieneLiberacionDimensional; }
            set
            {
                if (_tieneLiberacionDimensional != value)
                {
                    _tieneLiberacionDimensional = value;
                    OnPropertyChanged("TieneLiberacionDimensional");
                }
            }
        }
        private bool _tieneLiberacionDimensional;
    
        [DataMember]
        public bool TieneRequisicionPintura
        {
            get { return _tieneRequisicionPintura; }
            set
            {
                if (_tieneRequisicionPintura != value)
                {
                    _tieneRequisicionPintura = value;
                    OnPropertyChanged("TieneRequisicionPintura");
                }
            }
        }
        private bool _tieneRequisicionPintura;
    
        [DataMember]
        public bool TienePintura
        {
            get { return _tienePintura; }
            set
            {
                if (_tienePintura != value)
                {
                    _tienePintura = value;
                    OnPropertyChanged("TienePintura");
                }
            }
        }
        private bool _tienePintura;
    
        [DataMember]
        public bool LiberadoPintura
        {
            get { return _liberadoPintura; }
            set
            {
                if (_liberadoPintura != value)
                {
                    _liberadoPintura = value;
                    OnPropertyChanged("LiberadoPintura");
                }
            }
        }
        private bool _liberadoPintura;
    
        [DataMember]
        public bool Preparado
        {
            get { return _preparado; }
            set
            {
                if (_preparado != value)
                {
                    _preparado = value;
                    OnPropertyChanged("Preparado");
                }
            }
        }
        private bool _preparado;
    
        [DataMember]
        public bool Embarcado
        {
            get { return _embarcado; }
            set
            {
                if (_embarcado != value)
                {
                    _embarcado = value;
                    OnPropertyChanged("Embarcado");
                }
            }
        }
        private bool _embarcado;
    
        [DataMember]
        public bool Certificado
        {
            get { return _certificado; }
            set
            {
                if (_certificado != value)
                {
                    _certificado = value;
                    OnPropertyChanged("Certificado");
                }
            }
        }
        private bool _certificado;
    
        [DataMember]
        public Nullable<System.DateTime> FechaPreparacion
        {
            get { return _fechaPreparacion; }
            set
            {
                if (_fechaPreparacion != value)
                {
                    _fechaPreparacion = value;
                    OnPropertyChanged("FechaPreparacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaPreparacion;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<int> UltimoProcesoID
        {
            get { return _ultimoProcesoID; }
            set
            {
                if (_ultimoProcesoID != value)
                {
                    ChangeTracker.RecordOriginalValue("UltimoProcesoID", _ultimoProcesoID);
                    if (!IsDeserializing)
                    {
                        if (UltimoProceso != null && UltimoProceso.UltimoProcesoID != value)
                        {
                            UltimoProceso = null;
                        }
                    }
                    _ultimoProcesoID = value;
                    OnPropertyChanged("UltimoProcesoID");
                }
            }
        }
        private Nullable<int> _ultimoProcesoID;
    
        [DataMember]
        public Nullable<System.DateTime> FechaCertificacion
        {
            get { return _fechaCertificacion; }
            set
            {
                if (_fechaCertificacion != value)
                {
                    _fechaCertificacion = value;
                    OnPropertyChanged("FechaCertificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaCertificacion;
    
        [DataMember]
        public string NumeroEtiqueta
        {
            get { return _numeroEtiqueta; }
            set
            {
                if (_numeroEtiqueta != value)
                {
                    _numeroEtiqueta = value;
                    OnPropertyChanged("NumeroEtiqueta");
                }
            }
        }
        private string _numeroEtiqueta;
    
        [DataMember]
        public Nullable<System.DateTime> FechaEtiqueta
        {
            get { return _fechaEtiqueta; }
            set
            {
                if (_fechaEtiqueta != value)
                {
                    _fechaEtiqueta = value;
                    OnPropertyChanged("FechaEtiqueta");
                }
            }
        }
        private Nullable<System.DateTime> _fechaEtiqueta;
    
        [DataMember]
        public Nullable<System.DateTime> FechaLiberacionCalidad
        {
            get { return _fechaLiberacionCalidad; }
            set
            {
                if (_fechaLiberacionCalidad != value)
                {
                    _fechaLiberacionCalidad = value;
                    OnPropertyChanged("FechaLiberacionCalidad");
                }
            }
        }
        private Nullable<System.DateTime> _fechaLiberacionCalidad;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioLiberacionCalidad
        {
            get { return _usuarioLiberacionCalidad; }
            set
            {
                if (_usuarioLiberacionCalidad != value)
                {
                    _usuarioLiberacionCalidad = value;
                    OnPropertyChanged("UsuarioLiberacionCalidad");
                }
            }
        }
        private Nullable<System.Guid> _usuarioLiberacionCalidad;
    
        [DataMember]
        public Nullable<System.DateTime> FechaLiberacionMateriales
        {
            get { return _fechaLiberacionMateriales; }
            set
            {
                if (_fechaLiberacionMateriales != value)
                {
                    _fechaLiberacionMateriales = value;
                    OnPropertyChanged("FechaLiberacionMateriales");
                }
            }
        }
        private Nullable<System.DateTime> _fechaLiberacionMateriales;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioLiberacionMateriales
        {
            get { return _usuarioLiberacionMateriales; }
            set
            {
                if (_usuarioLiberacionMateriales != value)
                {
                    _usuarioLiberacionMateriales = value;
                    OnPropertyChanged("UsuarioLiberacionMateriales");
                }
            }
        }
        private Nullable<System.Guid> _usuarioLiberacionMateriales;
    
        [DataMember]
        public Nullable<System.DateTime> FechaOkPnd
        {
            get { return _fechaOkPnd; }
            set
            {
                if (_fechaOkPnd != value)
                {
                    _fechaOkPnd = value;
                    OnPropertyChanged("FechaOkPnd");
                }
            }
        }
        private Nullable<System.DateTime> _fechaOkPnd;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioOkPnd
        {
            get { return _usuarioOkPnd; }
            set
            {
                if (_usuarioOkPnd != value)
                {
                    _usuarioOkPnd = value;
                    OnPropertyChanged("UsuarioOkPnd");
                }
            }
        }
        private Nullable<System.Guid> _usuarioOkPnd;
    
        [DataMember]
        public Nullable<int> FolioPreparacion
        {
            get { return _folioPreparacion; }
            set
            {
                if (_folioPreparacion != value)
                {
                    _folioPreparacion = value;
                    OnPropertyChanged("FolioPreparacion");
                }
            }
        }
        private Nullable<int> _folioPreparacion;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<EmbarqueSpool> EmbarqueSpool
        {
            get
            {
                if (_embarqueSpool == null)
                {
                    _embarqueSpool = new TrackableCollection<EmbarqueSpool>();
                    _embarqueSpool.CollectionChanged += FixupEmbarqueSpool;
                }
                return _embarqueSpool;
            }
            set
            {
                if (!ReferenceEquals(_embarqueSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_embarqueSpool != null)
                    {
                        _embarqueSpool.CollectionChanged -= FixupEmbarqueSpool;
                    }
                    _embarqueSpool = value;
                    if (_embarqueSpool != null)
                    {
                        _embarqueSpool.CollectionChanged += FixupEmbarqueSpool;
                    }
                    OnNavigationPropertyChanged("EmbarqueSpool");
                }
            }
        }
        private TrackableCollection<EmbarqueSpool> _embarqueSpool;
    
        [DataMember]
        public OrdenTrabajoSpool OrdenTrabajoSpool
        {
            get { return _ordenTrabajoSpool; }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoSpool, value))
                {
                    var previousValue = _ordenTrabajoSpool;
                    _ordenTrabajoSpool = value;
                    FixupOrdenTrabajoSpool(previousValue);
                    OnNavigationPropertyChanged("OrdenTrabajoSpool");
                }
            }
        }
        private OrdenTrabajoSpool _ordenTrabajoSpool;
    
        [DataMember]
        public TrackableCollection<PinturaSpool> PinturaSpool
        {
            get
            {
                if (_pinturaSpool == null)
                {
                    _pinturaSpool = new TrackableCollection<PinturaSpool>();
                    _pinturaSpool.CollectionChanged += FixupPinturaSpool;
                }
                return _pinturaSpool;
            }
            set
            {
                if (!ReferenceEquals(_pinturaSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pinturaSpool != null)
                    {
                        _pinturaSpool.CollectionChanged -= FixupPinturaSpool;
                    }
                    _pinturaSpool = value;
                    if (_pinturaSpool != null)
                    {
                        _pinturaSpool.CollectionChanged += FixupPinturaSpool;
                    }
                    OnNavigationPropertyChanged("PinturaSpool");
                }
            }
        }
        private TrackableCollection<PinturaSpool> _pinturaSpool;
    
        [DataMember]
        public TrackableCollection<ReporteDimensionalDetalle> ReporteDimensionalDetalle
        {
            get
            {
                if (_reporteDimensionalDetalle == null)
                {
                    _reporteDimensionalDetalle = new TrackableCollection<ReporteDimensionalDetalle>();
                    _reporteDimensionalDetalle.CollectionChanged += FixupReporteDimensionalDetalle;
                }
                return _reporteDimensionalDetalle;
            }
            set
            {
                if (!ReferenceEquals(_reporteDimensionalDetalle, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reporteDimensionalDetalle != null)
                    {
                        _reporteDimensionalDetalle.CollectionChanged -= FixupReporteDimensionalDetalle;
                    }
                    _reporteDimensionalDetalle = value;
                    if (_reporteDimensionalDetalle != null)
                    {
                        _reporteDimensionalDetalle.CollectionChanged += FixupReporteDimensionalDetalle;
                    }
                    OnNavigationPropertyChanged("ReporteDimensionalDetalle");
                }
            }
        }
        private TrackableCollection<ReporteDimensionalDetalle> _reporteDimensionalDetalle;
    
        [DataMember]
        public TrackableCollection<RequisicionPinturaDetalle> RequisicionPinturaDetalle
        {
            get
            {
                if (_requisicionPinturaDetalle == null)
                {
                    _requisicionPinturaDetalle = new TrackableCollection<RequisicionPinturaDetalle>();
                    _requisicionPinturaDetalle.CollectionChanged += FixupRequisicionPinturaDetalle;
                }
                return _requisicionPinturaDetalle;
            }
            set
            {
                if (!ReferenceEquals(_requisicionPinturaDetalle, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_requisicionPinturaDetalle != null)
                    {
                        _requisicionPinturaDetalle.CollectionChanged -= FixupRequisicionPinturaDetalle;
                    }
                    _requisicionPinturaDetalle = value;
                    if (_requisicionPinturaDetalle != null)
                    {
                        _requisicionPinturaDetalle.CollectionChanged += FixupRequisicionPinturaDetalle;
                    }
                    OnNavigationPropertyChanged("RequisicionPinturaDetalle");
                }
            }
        }
        private TrackableCollection<RequisicionPinturaDetalle> _requisicionPinturaDetalle;
    
        [DataMember]
        public TrackableCollection<EstimacionSpool> EstimacionSpool
        {
            get
            {
                if (_estimacionSpool == null)
                {
                    _estimacionSpool = new TrackableCollection<EstimacionSpool>();
                    _estimacionSpool.CollectionChanged += FixupEstimacionSpool;
                }
                return _estimacionSpool;
            }
            set
            {
                if (!ReferenceEquals(_estimacionSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_estimacionSpool != null)
                    {
                        _estimacionSpool.CollectionChanged -= FixupEstimacionSpool;
                    }
                    _estimacionSpool = value;
                    if (_estimacionSpool != null)
                    {
                        _estimacionSpool.CollectionChanged += FixupEstimacionSpool;
                    }
                    OnNavigationPropertyChanged("EstimacionSpool");
                }
            }
        }
        private TrackableCollection<EstimacionSpool> _estimacionSpool;
    
        [DataMember]
        public TrackableCollection<InspeccionDimensionalPatio> InspeccionDimensionalPatio
        {
            get
            {
                if (_inspeccionDimensionalPatio == null)
                {
                    _inspeccionDimensionalPatio = new TrackableCollection<InspeccionDimensionalPatio>();
                    _inspeccionDimensionalPatio.CollectionChanged += FixupInspeccionDimensionalPatio;
                }
                return _inspeccionDimensionalPatio;
            }
            set
            {
                if (!ReferenceEquals(_inspeccionDimensionalPatio, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_inspeccionDimensionalPatio != null)
                    {
                        _inspeccionDimensionalPatio.CollectionChanged -= FixupInspeccionDimensionalPatio;
                    }
                    _inspeccionDimensionalPatio = value;
                    if (_inspeccionDimensionalPatio != null)
                    {
                        _inspeccionDimensionalPatio.CollectionChanged += FixupInspeccionDimensionalPatio;
                    }
                    OnNavigationPropertyChanged("InspeccionDimensionalPatio");
                }
            }
        }
        private TrackableCollection<InspeccionDimensionalPatio> _inspeccionDimensionalPatio;
    
        [DataMember]
        public UltimoProceso UltimoProceso
        {
            get { return _ultimoProceso; }
            set
            {
                if (!ReferenceEquals(_ultimoProceso, value))
                {
                    var previousValue = _ultimoProceso;
                    _ultimoProceso = value;
                    FixupUltimoProceso(previousValue);
                    OnNavigationPropertyChanged("UltimoProceso");
                }
            }
        }
        private UltimoProceso _ultimoProceso;
    
        [DataMember]
        public TrackableCollection<SpoolRequisicion> SpoolRequisicion
        {
            get
            {
                if (_spoolRequisicion == null)
                {
                    _spoolRequisicion = new TrackableCollection<SpoolRequisicion>();
                    _spoolRequisicion.CollectionChanged += FixupSpoolRequisicion;
                }
                return _spoolRequisicion;
            }
            set
            {
                if (!ReferenceEquals(_spoolRequisicion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_spoolRequisicion != null)
                    {
                        _spoolRequisicion.CollectionChanged -= FixupSpoolRequisicion;
                    }
                    _spoolRequisicion = value;
                    if (_spoolRequisicion != null)
                    {
                        _spoolRequisicion.CollectionChanged += FixupSpoolRequisicion;
                    }
                    OnNavigationPropertyChanged("SpoolRequisicion");
                }
            }
        }
        private TrackableCollection<SpoolRequisicion> _spoolRequisicion;
    
        [DataMember]
        public TrackableCollection<SpoolReportePnd> SpoolReportePnd
        {
            get
            {
                if (_spoolReportePnd == null)
                {
                    _spoolReportePnd = new TrackableCollection<SpoolReportePnd>();
                    _spoolReportePnd.CollectionChanged += FixupSpoolReportePnd;
                }
                return _spoolReportePnd;
            }
            set
            {
                if (!ReferenceEquals(_spoolReportePnd, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_spoolReportePnd != null)
                    {
                        _spoolReportePnd.CollectionChanged -= FixupSpoolReportePnd;
                    }
                    _spoolReportePnd = value;
                    if (_spoolReportePnd != null)
                    {
                        _spoolReportePnd.CollectionChanged += FixupSpoolReportePnd;
                    }
                    OnNavigationPropertyChanged("SpoolReportePnd");
                }
            }
        }
        private TrackableCollection<SpoolReportePnd> _spoolReportePnd;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_embarqueSpool != null)
    		{
    			_embarqueSpool.CollectionChanged -= FixupEmbarqueSpool;
    			_embarqueSpool.CollectionChanged += FixupEmbarqueSpool;
    			}
    			if (_pinturaSpool != null)
    		{
    			_pinturaSpool.CollectionChanged -= FixupPinturaSpool;
    			_pinturaSpool.CollectionChanged += FixupPinturaSpool;
    			}
    			if (_reporteDimensionalDetalle != null)
    		{
    			_reporteDimensionalDetalle.CollectionChanged -= FixupReporteDimensionalDetalle;
    			_reporteDimensionalDetalle.CollectionChanged += FixupReporteDimensionalDetalle;
    			}
    			if (_requisicionPinturaDetalle != null)
    		{
    			_requisicionPinturaDetalle.CollectionChanged -= FixupRequisicionPinturaDetalle;
    			_requisicionPinturaDetalle.CollectionChanged += FixupRequisicionPinturaDetalle;
    			}
    			if (_estimacionSpool != null)
    		{
    			_estimacionSpool.CollectionChanged -= FixupEstimacionSpool;
    			_estimacionSpool.CollectionChanged += FixupEstimacionSpool;
    			}
    			if (_inspeccionDimensionalPatio != null)
    		{
    			_inspeccionDimensionalPatio.CollectionChanged -= FixupInspeccionDimensionalPatio;
    			_inspeccionDimensionalPatio.CollectionChanged += FixupInspeccionDimensionalPatio;
    			}
    			if (_spoolRequisicion != null)
    		{
    			_spoolRequisicion.CollectionChanged -= FixupSpoolRequisicion;
    			_spoolRequisicion.CollectionChanged += FixupSpoolRequisicion;
    			}
    			if (_spoolReportePnd != null)
    		{
    			_spoolReportePnd.CollectionChanged -= FixupSpoolReportePnd;
    			_spoolReportePnd.CollectionChanged += FixupSpoolReportePnd;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            EmbarqueSpool.Clear();
            OrdenTrabajoSpool = null;
            PinturaSpool.Clear();
            ReporteDimensionalDetalle.Clear();
            RequisicionPinturaDetalle.Clear();
            EstimacionSpool.Clear();
            InspeccionDimensionalPatio.Clear();
            UltimoProceso = null;
            SpoolRequisicion.Clear();
            SpoolReportePnd.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupOrdenTrabajoSpool(OrdenTrabajoSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WorkstatusSpool.Contains(this))
            {
                previousValue.WorkstatusSpool.Remove(this);
            }
    
            if (OrdenTrabajoSpool != null)
            {
                if (!OrdenTrabajoSpool.WorkstatusSpool.Contains(this))
                {
                    OrdenTrabajoSpool.WorkstatusSpool.Add(this);
                }
    
                OrdenTrabajoSpoolID = OrdenTrabajoSpool.OrdenTrabajoSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrdenTrabajoSpool")
                    && (ChangeTracker.OriginalValues["OrdenTrabajoSpool"] == OrdenTrabajoSpool))
                {
                    ChangeTracker.OriginalValues.Remove("OrdenTrabajoSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpool", previousValue);
                }
                if (OrdenTrabajoSpool != null && !OrdenTrabajoSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    OrdenTrabajoSpool.StartTracking();
                }
            }
        }
    
        private void FixupUltimoProceso(UltimoProceso previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.WorkstatusSpool.Contains(this))
            {
                previousValue.WorkstatusSpool.Remove(this);
            }
    
            if (UltimoProceso != null)
            {
                if (!UltimoProceso.WorkstatusSpool.Contains(this))
                {
                    UltimoProceso.WorkstatusSpool.Add(this);
                }
    
                UltimoProcesoID = UltimoProceso.UltimoProcesoID;
            }
            else if (!skipKeys)
            {
                UltimoProcesoID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UltimoProceso")
                    && (ChangeTracker.OriginalValues["UltimoProceso"] == UltimoProceso))
                {
                    ChangeTracker.OriginalValues.Remove("UltimoProceso");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UltimoProceso", previousValue);
                }
                if (UltimoProceso != null && !UltimoProceso.ChangeTracker.ChangeTrackingEnabled)
                {
                    UltimoProceso.StartTracking();
                }
            }
        }
    
        private void FixupEmbarqueSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EmbarqueSpool item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EmbarqueSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmbarqueSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EmbarqueSpool", item);
                    }
                }
            }
        }
    
        private void FixupPinturaSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PinturaSpool item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PinturaSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PinturaSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PinturaSpool", item);
                    }
                }
            }
        }
    
        private void FixupReporteDimensionalDetalle(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReporteDimensionalDetalle item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReporteDimensionalDetalle", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReporteDimensionalDetalle item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReporteDimensionalDetalle", item);
                    }
                }
            }
        }
    
        private void FixupRequisicionPinturaDetalle(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RequisicionPinturaDetalle item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RequisicionPinturaDetalle", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RequisicionPinturaDetalle item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RequisicionPinturaDetalle", item);
                    }
                }
            }
        }
    
        private void FixupEstimacionSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EstimacionSpool item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EstimacionSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EstimacionSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EstimacionSpool", item);
                    }
                }
            }
        }
    
        private void FixupInspeccionDimensionalPatio(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InspeccionDimensionalPatio item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InspeccionDimensionalPatio", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InspeccionDimensionalPatio item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InspeccionDimensionalPatio", item);
                    }
                }
            }
        }
    
        private void FixupSpoolRequisicion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpoolRequisicion item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpoolRequisicion", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpoolRequisicion item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpoolRequisicion", item);
                    }
                }
            }
        }
    
        private void FixupSpoolReportePnd(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpoolReportePnd item in e.NewItems)
                {
                    item.WorkstatusSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpoolReportePnd", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpoolReportePnd item in e.OldItems)
                {
                    if (ReferenceEquals(item.WorkstatusSpool, this))
                    {
                        item.WorkstatusSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpoolReportePnd", item);
                    }
                }
            }
        }

        #endregion

    }
}
