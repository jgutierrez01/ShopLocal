//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Pendiente))]
    [KnownType(typeof(ProyectoPendiente))]
    [Serializable]
    public partial class TipoPendiente: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TipoPendienteID
        {
            get { return _tipoPendienteID; }
            set
            {
                if (_tipoPendienteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TipoPendienteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _tipoPendienteID = value;
                    OnPropertyChanged("TipoPendienteID");
                }
            }
        }
        private int _tipoPendienteID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string NombreIngles
        {
            get { return _nombreIngles; }
            set
            {
                if (_nombreIngles != value)
                {
                    _nombreIngles = value;
                    OnPropertyChanged("NombreIngles");
                }
            }
        }
        private string _nombreIngles;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<bool> EsAutomatico
        {
            get { return _esAutomatico; }
            set
            {
                if (_esAutomatico != value)
                {
                    _esAutomatico = value;
                    OnPropertyChanged("EsAutomatico");
                }
            }
        }
        private Nullable<bool> _esAutomatico;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Pendiente> Pendiente
        {
            get
            {
                if (_pendiente == null)
                {
                    _pendiente = new TrackableCollection<Pendiente>();
                    _pendiente.CollectionChanged += FixupPendiente;
                }
                return _pendiente;
            }
            set
            {
                if (!ReferenceEquals(_pendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pendiente != null)
                    {
                        _pendiente.CollectionChanged -= FixupPendiente;
                    }
                    _pendiente = value;
                    if (_pendiente != null)
                    {
                        _pendiente.CollectionChanged += FixupPendiente;
                    }
                    OnNavigationPropertyChanged("Pendiente");
                }
            }
        }
        private TrackableCollection<Pendiente> _pendiente;
    
        [DataMember]
        public TrackableCollection<ProyectoPendiente> ProyectoPendiente
        {
            get
            {
                if (_proyectoPendiente == null)
                {
                    _proyectoPendiente = new TrackableCollection<ProyectoPendiente>();
                    _proyectoPendiente.CollectionChanged += FixupProyectoPendiente;
                }
                return _proyectoPendiente;
            }
            set
            {
                if (!ReferenceEquals(_proyectoPendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_proyectoPendiente != null)
                    {
                        _proyectoPendiente.CollectionChanged -= FixupProyectoPendiente;
                    }
                    _proyectoPendiente = value;
                    if (_proyectoPendiente != null)
                    {
                        _proyectoPendiente.CollectionChanged += FixupProyectoPendiente;
                    }
                    OnNavigationPropertyChanged("ProyectoPendiente");
                }
            }
        }
        private TrackableCollection<ProyectoPendiente> _proyectoPendiente;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_pendiente != null)
    		{
    			_pendiente.CollectionChanged -= FixupPendiente;
    			_pendiente.CollectionChanged += FixupPendiente;
    			}
    			if (_proyectoPendiente != null)
    		{
    			_proyectoPendiente.CollectionChanged -= FixupProyectoPendiente;
    			_proyectoPendiente.CollectionChanged += FixupProyectoPendiente;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Pendiente.Clear();
            ProyectoPendiente.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pendiente item in e.NewItems)
                {
                    item.TipoPendiente = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Pendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.TipoPendiente, this))
                    {
                        item.TipoPendiente = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Pendiente", item);
                    }
                }
            }
        }
    
        private void FixupProyectoPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProyectoPendiente item in e.NewItems)
                {
                    item.TipoPendiente = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProyectoPendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProyectoPendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.TipoPendiente, this))
                    {
                        item.TipoPendiente = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProyectoPendiente", item);
                    }
                }
            }
        }

        #endregion

    }
}
