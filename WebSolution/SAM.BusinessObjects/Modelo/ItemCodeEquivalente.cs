//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ItemCode))]
    [Serializable]
    public partial class ItemCodeEquivalente: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ItemCodeEquivalenteID
        {
            get { return _itemCodeEquivalenteID; }
            set
            {
                if (_itemCodeEquivalenteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItemCodeEquivalenteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itemCodeEquivalenteID = value;
                    OnPropertyChanged("ItemCodeEquivalenteID");
                }
            }
        }
        private int _itemCodeEquivalenteID;
    
        [DataMember]
        public int ItemCodeID
        {
            get { return _itemCodeID; }
            set
            {
                if (_itemCodeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ItemCodeID", _itemCodeID);
                    if (!IsDeserializing)
                    {
                        if (ItemCode != null && ItemCode.ItemCodeID != value)
                        {
                            ItemCode = null;
                        }
                    }
                    _itemCodeID = value;
                    OnPropertyChanged("ItemCodeID");
                }
            }
        }
        private int _itemCodeID;
    
        [DataMember]
        public decimal Diametro1
        {
            get { return _diametro1; }
            set
            {
                if (_diametro1 != value)
                {
                    _diametro1 = value;
                    OnPropertyChanged("Diametro1");
                }
            }
        }
        private decimal _diametro1;
    
        [DataMember]
        public decimal Diametro2
        {
            get { return _diametro2; }
            set
            {
                if (_diametro2 != value)
                {
                    _diametro2 = value;
                    OnPropertyChanged("Diametro2");
                }
            }
        }
        private decimal _diametro2;
    
        [DataMember]
        public int ItemEquivalenteID
        {
            get { return _itemEquivalenteID; }
            set
            {
                if (_itemEquivalenteID != value)
                {
                    ChangeTracker.RecordOriginalValue("ItemEquivalenteID", _itemEquivalenteID);
                    if (!IsDeserializing)
                    {
                        if (ItemCode1 != null && ItemCode1.ItemCodeID != value)
                        {
                            ItemCode1 = null;
                        }
                    }
                    _itemEquivalenteID = value;
                    OnPropertyChanged("ItemEquivalenteID");
                }
            }
        }
        private int _itemEquivalenteID;
    
        [DataMember]
        public decimal DiametroEquivalente1
        {
            get { return _diametroEquivalente1; }
            set
            {
                if (_diametroEquivalente1 != value)
                {
                    _diametroEquivalente1 = value;
                    OnPropertyChanged("DiametroEquivalente1");
                }
            }
        }
        private decimal _diametroEquivalente1;
    
        [DataMember]
        public decimal DiametroEquivalente2
        {
            get { return _diametroEquivalente2; }
            set
            {
                if (_diametroEquivalente2 != value)
                {
                    _diametroEquivalente2 = value;
                    OnPropertyChanged("DiametroEquivalente2");
                }
            }
        }
        private decimal _diametroEquivalente2;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ItemCode ItemCode
        {
            get { return _itemCode; }
            set
            {
                if (!ReferenceEquals(_itemCode, value))
                {
                    var previousValue = _itemCode;
                    _itemCode = value;
                    FixupItemCode(previousValue);
                    OnNavigationPropertyChanged("ItemCode");
                }
            }
        }
        private ItemCode _itemCode;
    
        [DataMember]
        public ItemCode ItemCode1
        {
            get { return _itemCode1; }
            set
            {
                if (!ReferenceEquals(_itemCode1, value))
                {
                    var previousValue = _itemCode1;
                    _itemCode1 = value;
                    FixupItemCode1(previousValue);
                    OnNavigationPropertyChanged("ItemCode1");
                }
            }
        }
        private ItemCode _itemCode1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            ItemCode = null;
            ItemCode1 = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupItemCode(ItemCode previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ItemCodeEquivalente.Contains(this))
            {
                previousValue.ItemCodeEquivalente.Remove(this);
            }
    
            if (ItemCode != null)
            {
                if (!ItemCode.ItemCodeEquivalente.Contains(this))
                {
                    ItemCode.ItemCodeEquivalente.Add(this);
                }
    
                ItemCodeID = ItemCode.ItemCodeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ItemCode")
                    && (ChangeTracker.OriginalValues["ItemCode"] == ItemCode))
                {
                    ChangeTracker.OriginalValues.Remove("ItemCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ItemCode", previousValue);
                }
                if (ItemCode != null && !ItemCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    ItemCode.StartTracking();
                }
            }
        }
    
        private void FixupItemCode1(ItemCode previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ItemCodeEquivalente1.Contains(this))
            {
                previousValue.ItemCodeEquivalente1.Remove(this);
            }
    
            if (ItemCode1 != null)
            {
                if (!ItemCode1.ItemCodeEquivalente1.Contains(this))
                {
                    ItemCode1.ItemCodeEquivalente1.Add(this);
                }
    
                ItemEquivalenteID = ItemCode1.ItemCodeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ItemCode1")
                    && (ChangeTracker.OriginalValues["ItemCode1"] == ItemCode1))
                {
                    ChangeTracker.OriginalValues.Remove("ItemCode1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ItemCode1", previousValue);
                }
                if (ItemCode1 != null && !ItemCode1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ItemCode1.StartTracking();
                }
            }
        }

        #endregion

    }
}
