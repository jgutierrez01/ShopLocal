//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Taller))]
    [KnownType(typeof(Estacion))]
    [KnownType(typeof(Spool))]
    [KnownType(typeof(Usuario))]
    [KnownType(typeof(BastonSpoolJunta))]
    [Serializable]
    public partial class BastonSpool: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int BastonSpoolID
        {
            get { return _bastonSpoolID; }
            set
            {
                if (_bastonSpoolID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BastonSpoolID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _bastonSpoolID = value;
                    OnPropertyChanged("BastonSpoolID");
                }
            }
        }
        private int _bastonSpoolID;
    
        [DataMember]
        public int SpoolID
        {
            get { return _spoolID; }
            set
            {
                if (_spoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("SpoolID", _spoolID);
                    if (!IsDeserializing)
                    {
                        if (Spool != null && Spool.SpoolID != value)
                        {
                            Spool = null;
                        }
                    }
                    _spoolID = value;
                    OnPropertyChanged("SpoolID");
                }
            }
        }
        private int _spoolID;
    
        [DataMember]
        public string LetraBaston
        {
            get { return _letraBaston; }
            set
            {
                if (_letraBaston != value)
                {
                    _letraBaston = value;
                    OnPropertyChanged("LetraBaston");
                }
            }
        }
        private string _letraBaston;
    
        [DataMember]
        public Nullable<int> EstacionID
        {
            get { return _estacionID; }
            set
            {
                if (_estacionID != value)
                {
                    ChangeTracker.RecordOriginalValue("EstacionID", _estacionID);
                    if (!IsDeserializing)
                    {
                        if (Estacion != null && Estacion.EstacionID != value)
                        {
                            Estacion = null;
                        }
                    }
                    _estacionID = value;
                    OnPropertyChanged("EstacionID");
                }
            }
        }
        private Nullable<int> _estacionID;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuarioModifica", _usuarioModifica);
                    if (!IsDeserializing)
                    {
                        if (Usuario != null && Usuario.UserId != value)
                        {
                            Usuario = null;
                        }
                    }
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<int> TallerID
        {
            get { return _tallerID; }
            set
            {
                if (_tallerID != value)
                {
                    ChangeTracker.RecordOriginalValue("TallerID", _tallerID);
                    if (!IsDeserializing)
                    {
                        if (Taller != null && Taller.TallerID != value)
                        {
                            Taller = null;
                        }
                    }
                    _tallerID = value;
                    OnPropertyChanged("TallerID");
                }
            }
        }
        private Nullable<int> _tallerID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Taller Taller
        {
            get { return _taller; }
            set
            {
                if (!ReferenceEquals(_taller, value))
                {
                    var previousValue = _taller;
                    _taller = value;
                    FixupTaller(previousValue);
                    OnNavigationPropertyChanged("Taller");
                }
            }
        }
        private Taller _taller;
    
        [DataMember]
        public Estacion Estacion
        {
            get { return _estacion; }
            set
            {
                if (!ReferenceEquals(_estacion, value))
                {
                    var previousValue = _estacion;
                    _estacion = value;
                    FixupEstacion(previousValue);
                    OnNavigationPropertyChanged("Estacion");
                }
            }
        }
        private Estacion _estacion;
    
        [DataMember]
        public Spool Spool
        {
            get { return _spool; }
            set
            {
                if (!ReferenceEquals(_spool, value))
                {
                    var previousValue = _spool;
                    _spool = value;
                    FixupSpool(previousValue);
                    OnNavigationPropertyChanged("Spool");
                }
            }
        }
        private Spool _spool;
    
        [DataMember]
        public Usuario Usuario
        {
            get { return _usuario; }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    var previousValue = _usuario;
                    _usuario = value;
                    FixupUsuario(previousValue);
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private Usuario _usuario;
    
        [DataMember]
        public TrackableCollection<BastonSpoolJunta> BastonSpoolJunta
        {
            get
            {
                if (_bastonSpoolJunta == null)
                {
                    _bastonSpoolJunta = new TrackableCollection<BastonSpoolJunta>();
                    _bastonSpoolJunta.CollectionChanged += FixupBastonSpoolJunta;
                }
                return _bastonSpoolJunta;
            }
            set
            {
                if (!ReferenceEquals(_bastonSpoolJunta, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bastonSpoolJunta != null)
                    {
                        _bastonSpoolJunta.CollectionChanged -= FixupBastonSpoolJunta;
                    }
                    _bastonSpoolJunta = value;
                    if (_bastonSpoolJunta != null)
                    {
                        _bastonSpoolJunta.CollectionChanged += FixupBastonSpoolJunta;
                    }
                    OnNavigationPropertyChanged("BastonSpoolJunta");
                }
            }
        }
        private TrackableCollection<BastonSpoolJunta> _bastonSpoolJunta;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_bastonSpoolJunta != null)
    		{
    			_bastonSpoolJunta.CollectionChanged -= FixupBastonSpoolJunta;
    			_bastonSpoolJunta.CollectionChanged += FixupBastonSpoolJunta;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Taller = null;
            Estacion = null;
            Spool = null;
            Usuario = null;
            BastonSpoolJunta.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTaller(Taller previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BastonSpool.Contains(this))
            {
                previousValue.BastonSpool.Remove(this);
            }
    
            if (Taller != null)
            {
                if (!Taller.BastonSpool.Contains(this))
                {
                    Taller.BastonSpool.Add(this);
                }
    
                TallerID = Taller.TallerID;
            }
            else if (!skipKeys)
            {
                TallerID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Taller")
                    && (ChangeTracker.OriginalValues["Taller"] == Taller))
                {
                    ChangeTracker.OriginalValues.Remove("Taller");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Taller", previousValue);
                }
                if (Taller != null && !Taller.ChangeTracker.ChangeTrackingEnabled)
                {
                    Taller.StartTracking();
                }
            }
        }
    
        private void FixupEstacion(Estacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BastonSpool.Contains(this))
            {
                previousValue.BastonSpool.Remove(this);
            }
    
            if (Estacion != null)
            {
                if (!Estacion.BastonSpool.Contains(this))
                {
                    Estacion.BastonSpool.Add(this);
                }
    
                EstacionID = Estacion.EstacionID;
            }
            else if (!skipKeys)
            {
                EstacionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Estacion")
                    && (ChangeTracker.OriginalValues["Estacion"] == Estacion))
                {
                    ChangeTracker.OriginalValues.Remove("Estacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Estacion", previousValue);
                }
                if (Estacion != null && !Estacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    Estacion.StartTracking();
                }
            }
        }
    
        private void FixupSpool(Spool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BastonSpool.Contains(this))
            {
                previousValue.BastonSpool.Remove(this);
            }
    
            if (Spool != null)
            {
                if (!Spool.BastonSpool.Contains(this))
                {
                    Spool.BastonSpool.Add(this);
                }
    
                SpoolID = Spool.SpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Spool")
                    && (ChangeTracker.OriginalValues["Spool"] == Spool))
                {
                    ChangeTracker.OriginalValues.Remove("Spool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Spool", previousValue);
                }
                if (Spool != null && !Spool.ChangeTracker.ChangeTrackingEnabled)
                {
                    Spool.StartTracking();
                }
            }
        }
    
        private void FixupUsuario(Usuario previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BastonSpool.Contains(this))
            {
                previousValue.BastonSpool.Remove(this);
            }
    
            if (Usuario != null)
            {
                if (!Usuario.BastonSpool.Contains(this))
                {
                    Usuario.BastonSpool.Add(this);
                }
    
                UsuarioModifica = Usuario.UserId;
            }
            else if (!skipKeys)
            {
                UsuarioModifica = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Usuario")
                    && (ChangeTracker.OriginalValues["Usuario"] == Usuario))
                {
                    ChangeTracker.OriginalValues.Remove("Usuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Usuario", previousValue);
                }
                if (Usuario != null && !Usuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    Usuario.StartTracking();
                }
            }
        }
    
        private void FixupBastonSpoolJunta(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BastonSpoolJunta item in e.NewItems)
                {
                    item.BastonSpool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BastonSpoolJunta", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BastonSpoolJunta item in e.OldItems)
                {
                    if (ReferenceEquals(item.BastonSpool, this))
                    {
                        item.BastonSpool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BastonSpoolJunta", item);
                    }
                }
            }
        }

        #endregion

    }
}
