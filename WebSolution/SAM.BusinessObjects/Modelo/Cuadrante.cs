//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Patio))]
    [KnownType(typeof(CuadranteHistorico))]
    [KnownType(typeof(Destino))]
    [Serializable]
    public partial class Cuadrante: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CuadranteID
        {
            get { return _cuadranteID; }
            set
            {
                if (_cuadranteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CuadranteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cuadranteID = value;
                    OnPropertyChanged("CuadranteID");
                }
            }
        }
        private int _cuadranteID;
    
        [DataMember]
        public int PatioID
        {
            get { return _patioID; }
            set
            {
                if (_patioID != value)
                {
                    ChangeTracker.RecordOriginalValue("PatioID", _patioID);
                    if (!IsDeserializing)
                    {
                        if (Patio != null && Patio.PatioID != value)
                        {
                            Patio = null;
                        }
                    }
                    _patioID = value;
                    OnPropertyChanged("PatioID");
                }
            }
        }
        private int _patioID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Patio Patio
        {
            get { return _patio; }
            set
            {
                if (!ReferenceEquals(_patio, value))
                {
                    var previousValue = _patio;
                    _patio = value;
                    FixupPatio(previousValue);
                    OnNavigationPropertyChanged("Patio");
                }
            }
        }
        private Patio _patio;
    
        [DataMember]
        public TrackableCollection<CuadranteHistorico> CuadranteHistorico
        {
            get
            {
                if (_cuadranteHistorico == null)
                {
                    _cuadranteHistorico = new TrackableCollection<CuadranteHistorico>();
                    _cuadranteHistorico.CollectionChanged += FixupCuadranteHistorico;
                }
                return _cuadranteHistorico;
            }
            set
            {
                if (!ReferenceEquals(_cuadranteHistorico, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cuadranteHistorico != null)
                    {
                        _cuadranteHistorico.CollectionChanged -= FixupCuadranteHistorico;
                    }
                    _cuadranteHistorico = value;
                    if (_cuadranteHistorico != null)
                    {
                        _cuadranteHistorico.CollectionChanged += FixupCuadranteHistorico;
                    }
                    OnNavigationPropertyChanged("CuadranteHistorico");
                }
            }
        }
        private TrackableCollection<CuadranteHistorico> _cuadranteHistorico;
    
        [DataMember]
        public TrackableCollection<Destino> Destino
        {
            get
            {
                if (_destino == null)
                {
                    _destino = new TrackableCollection<Destino>();
                    _destino.CollectionChanged += FixupDestino;
                }
                return _destino;
            }
            set
            {
                if (!ReferenceEquals(_destino, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_destino != null)
                    {
                        _destino.CollectionChanged -= FixupDestino;
                    }
                    _destino = value;
                    if (_destino != null)
                    {
                        _destino.CollectionChanged += FixupDestino;
                    }
                    OnNavigationPropertyChanged("Destino");
                }
            }
        }
        private TrackableCollection<Destino> _destino;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_cuadranteHistorico != null)
    		{
    			_cuadranteHistorico.CollectionChanged -= FixupCuadranteHistorico;
    			_cuadranteHistorico.CollectionChanged += FixupCuadranteHistorico;
    			}
    			if (_destino != null)
    		{
    			_destino.CollectionChanged -= FixupDestino;
    			_destino.CollectionChanged += FixupDestino;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Patio = null;
            CuadranteHistorico.Clear();
            Destino.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupPatio(Patio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cuadrante.Contains(this))
            {
                previousValue.Cuadrante.Remove(this);
            }
    
            if (Patio != null)
            {
                if (!Patio.Cuadrante.Contains(this))
                {
                    Patio.Cuadrante.Add(this);
                }
    
                PatioID = Patio.PatioID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Patio")
                    && (ChangeTracker.OriginalValues["Patio"] == Patio))
                {
                    ChangeTracker.OriginalValues.Remove("Patio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Patio", previousValue);
                }
                if (Patio != null && !Patio.ChangeTracker.ChangeTrackingEnabled)
                {
                    Patio.StartTracking();
                }
            }
        }
    
        private void FixupCuadranteHistorico(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CuadranteHistorico item in e.NewItems)
                {
                    item.Cuadrante = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CuadranteHistorico", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CuadranteHistorico item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cuadrante, this))
                    {
                        item.Cuadrante = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CuadranteHistorico", item);
                    }
                }
            }
        }
    
        private void FixupDestino(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Destino item in e.NewItems)
                {
                    item.Cuadrante = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Destino", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Destino item in e.OldItems)
                {
                    if (ReferenceEquals(item.Cuadrante, this))
                    {
                        item.Cuadrante = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Destino", item);
                    }
                }
            }
        }

        #endregion

    }
}
