//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Patio))]
    [KnownType(typeof(Taller))]
    [Serializable]
    public partial class Cortador: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CortadorID
        {
            get { return _cortadorID; }
            set
            {
                if (_cortadorID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CortadorID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cortadorID = value;
                    OnPropertyChanged("CortadorID");
                }
            }
        }
        private int _cortadorID;
    
        [DataMember]
        public int TallerID
        {
            get { return _tallerID; }
            set
            {
                if (_tallerID != value)
                {
                    ChangeTracker.RecordOriginalValue("TallerID", _tallerID);
                    if (!IsDeserializing)
                    {
                        if (Taller != null && Taller.TallerID != value)
                        {
                            Taller = null;
                        }
                    }
                    _tallerID = value;
                    OnPropertyChanged("TallerID");
                }
            }
        }
        private int _tallerID;
    
        [DataMember]
        public int PatioID
        {
            get { return _patioID; }
            set
            {
                if (_patioID != value)
                {
                    ChangeTracker.RecordOriginalValue("PatioID", _patioID);
                    if (!IsDeserializing)
                    {
                        if (Patio != null && Patio.PatioID != value)
                        {
                            Patio = null;
                        }
                    }
                    _patioID = value;
                    OnPropertyChanged("PatioID");
                }
            }
        }
        private int _patioID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string ApPaterno
        {
            get { return _apPaterno; }
            set
            {
                if (_apPaterno != value)
                {
                    _apPaterno = value;
                    OnPropertyChanged("ApPaterno");
                }
            }
        }
        private string _apPaterno;
    
        [DataMember]
        public string ApMaterno
        {
            get { return _apMaterno; }
            set
            {
                if (_apMaterno != value)
                {
                    _apMaterno = value;
                    OnPropertyChanged("ApMaterno");
                }
            }
        }
        private string _apMaterno;
    
        [DataMember]
        public string NumeroEmpleado
        {
            get { return _numeroEmpleado; }
            set
            {
                if (_numeroEmpleado != value)
                {
                    _numeroEmpleado = value;
                    OnPropertyChanged("NumeroEmpleado");
                }
            }
        }
        private string _numeroEmpleado;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Patio Patio
        {
            get { return _patio; }
            set
            {
                if (!ReferenceEquals(_patio, value))
                {
                    var previousValue = _patio;
                    _patio = value;
                    FixupPatio(previousValue);
                    OnNavigationPropertyChanged("Patio");
                }
            }
        }
        private Patio _patio;
    
        [DataMember]
        public Taller Taller
        {
            get { return _taller; }
            set
            {
                if (!ReferenceEquals(_taller, value))
                {
                    var previousValue = _taller;
                    _taller = value;
                    FixupTaller(previousValue);
                    OnNavigationPropertyChanged("Taller");
                }
            }
        }
        private Taller _taller;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Patio = null;
            Taller = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPatio(Patio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cortador.Contains(this))
            {
                previousValue.Cortador.Remove(this);
            }
    
            if (Patio != null)
            {
                if (!Patio.Cortador.Contains(this))
                {
                    Patio.Cortador.Add(this);
                }
    
                PatioID = Patio.PatioID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Patio")
                    && (ChangeTracker.OriginalValues["Patio"] == Patio))
                {
                    ChangeTracker.OriginalValues.Remove("Patio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Patio", previousValue);
                }
                if (Patio != null && !Patio.ChangeTracker.ChangeTrackingEnabled)
                {
                    Patio.StartTracking();
                }
            }
        }
    
        private void FixupTaller(Taller previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Cortador.Contains(this))
            {
                previousValue.Cortador.Remove(this);
            }
    
            if (Taller != null)
            {
                if (!Taller.Cortador.Contains(this))
                {
                    Taller.Cortador.Add(this);
                }
    
                TallerID = Taller.TallerID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Taller")
                    && (ChangeTracker.OriginalValues["Taller"] == Taller))
                {
                    ChangeTracker.OriginalValues.Remove("Taller");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Taller", previousValue);
                }
                if (Taller != null && !Taller.ChangeTracker.ChangeTrackingEnabled)
                {
                    Taller.StartTracking();
                }
            }
        }

        #endregion

    }
}
