//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Defecto))]
    [KnownType(typeof(JuntaReportePnd))]
    [Serializable]
    public partial class JuntaReportePndSector: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int JuntaReportePndSector1
        {
            get { return _juntaReportePndSector1; }
            set
            {
                if (_juntaReportePndSector1 != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'JuntaReportePndSector1' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _juntaReportePndSector1 = value;
                    OnPropertyChanged("JuntaReportePndSector1");
                }
            }
        }
        private int _juntaReportePndSector1;
    
        [DataMember]
        public int JuntaReportePndID
        {
            get { return _juntaReportePndID; }
            set
            {
                if (_juntaReportePndID != value)
                {
                    ChangeTracker.RecordOriginalValue("JuntaReportePndID", _juntaReportePndID);
                    if (!IsDeserializing)
                    {
                        if (JuntaReportePnd != null && JuntaReportePnd.JuntaReportePndID != value)
                        {
                            JuntaReportePnd = null;
                        }
                    }
                    _juntaReportePndID = value;
                    OnPropertyChanged("JuntaReportePndID");
                }
            }
        }
        private int _juntaReportePndID;
    
        [DataMember]
        public string Sector
        {
            get { return _sector; }
            set
            {
                if (_sector != value)
                {
                    _sector = value;
                    OnPropertyChanged("Sector");
                }
            }
        }
        private string _sector;
    
        [DataMember]
        public string SectorInicio
        {
            get { return _sectorInicio; }
            set
            {
                if (_sectorInicio != value)
                {
                    _sectorInicio = value;
                    OnPropertyChanged("SectorInicio");
                }
            }
        }
        private string _sectorInicio;
    
        [DataMember]
        public string SectorFin
        {
            get { return _sectorFin; }
            set
            {
                if (_sectorFin != value)
                {
                    _sectorFin = value;
                    OnPropertyChanged("SectorFin");
                }
            }
        }
        private string _sectorFin;
    
        [DataMember]
        public int DefectoID
        {
            get { return _defectoID; }
            set
            {
                if (_defectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("DefectoID", _defectoID);
                    if (!IsDeserializing)
                    {
                        if (Defecto != null && Defecto.DefectoID != value)
                        {
                            Defecto = null;
                        }
                    }
                    _defectoID = value;
                    OnPropertyChanged("DefectoID");
                }
            }
        }
        private int _defectoID;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Defecto Defecto
        {
            get { return _defecto; }
            set
            {
                if (!ReferenceEquals(_defecto, value))
                {
                    var previousValue = _defecto;
                    _defecto = value;
                    FixupDefecto(previousValue);
                    OnNavigationPropertyChanged("Defecto");
                }
            }
        }
        private Defecto _defecto;
    
        [DataMember]
        public JuntaReportePnd JuntaReportePnd
        {
            get { return _juntaReportePnd; }
            set
            {
                if (!ReferenceEquals(_juntaReportePnd, value))
                {
                    var previousValue = _juntaReportePnd;
                    _juntaReportePnd = value;
                    FixupJuntaReportePnd(previousValue);
                    OnNavigationPropertyChanged("JuntaReportePnd");
                }
            }
        }
        private JuntaReportePnd _juntaReportePnd;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Defecto = null;
            JuntaReportePnd = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDefecto(Defecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.JuntaReportePndSector.Contains(this))
            {
                previousValue.JuntaReportePndSector.Remove(this);
            }
    
            if (Defecto != null)
            {
                if (!Defecto.JuntaReportePndSector.Contains(this))
                {
                    Defecto.JuntaReportePndSector.Add(this);
                }
    
                DefectoID = Defecto.DefectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Defecto")
                    && (ChangeTracker.OriginalValues["Defecto"] == Defecto))
                {
                    ChangeTracker.OriginalValues.Remove("Defecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Defecto", previousValue);
                }
                if (Defecto != null && !Defecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Defecto.StartTracking();
                }
            }
        }
    
        private void FixupJuntaReportePnd(JuntaReportePnd previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.JuntaReportePndSector.Contains(this))
            {
                previousValue.JuntaReportePndSector.Remove(this);
            }
    
            if (JuntaReportePnd != null)
            {
                if (!JuntaReportePnd.JuntaReportePndSector.Contains(this))
                {
                    JuntaReportePnd.JuntaReportePndSector.Add(this);
                }
    
                JuntaReportePndID = JuntaReportePnd.JuntaReportePndID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("JuntaReportePnd")
                    && (ChangeTracker.OriginalValues["JuntaReportePnd"] == JuntaReportePnd))
                {
                    ChangeTracker.OriginalValues.Remove("JuntaReportePnd");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("JuntaReportePnd", previousValue);
                }
                if (JuntaReportePnd != null && !JuntaReportePnd.ChangeTracker.ChangeTrackingEnabled)
                {
                    JuntaReportePnd.StartTracking();
                }
            }
        }

        #endregion

    }
}
