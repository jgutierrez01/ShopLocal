//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Defecto))]
    [KnownType(typeof(JuntaCampoInspeccionVisual))]
    [Serializable]
    public partial class JuntaCampoInspeccionVisualDefecto: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int JuntaCampoInspeccionVisualDefectoID
        {
            get { return _juntaCampoInspeccionVisualDefectoID; }
            set
            {
                if (_juntaCampoInspeccionVisualDefectoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'JuntaCampoInspeccionVisualDefectoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _juntaCampoInspeccionVisualDefectoID = value;
                    OnPropertyChanged("JuntaCampoInspeccionVisualDefectoID");
                }
            }
        }
        private int _juntaCampoInspeccionVisualDefectoID;
    
        [DataMember]
        public int JuntaCampoInspeccionVisualID
        {
            get { return _juntaCampoInspeccionVisualID; }
            set
            {
                if (_juntaCampoInspeccionVisualID != value)
                {
                    ChangeTracker.RecordOriginalValue("JuntaCampoInspeccionVisualID", _juntaCampoInspeccionVisualID);
                    if (!IsDeserializing)
                    {
                        if (JuntaCampoInspeccionVisual != null && JuntaCampoInspeccionVisual.JuntaCampoInspeccionVisualID != value)
                        {
                            JuntaCampoInspeccionVisual = null;
                        }
                    }
                    _juntaCampoInspeccionVisualID = value;
                    OnPropertyChanged("JuntaCampoInspeccionVisualID");
                }
            }
        }
        private int _juntaCampoInspeccionVisualID;
    
        [DataMember]
        public int DefectoID
        {
            get { return _defectoID; }
            set
            {
                if (_defectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("DefectoID", _defectoID);
                    if (!IsDeserializing)
                    {
                        if (Defecto != null && Defecto.DefectoID != value)
                        {
                            Defecto = null;
                        }
                    }
                    _defectoID = value;
                    OnPropertyChanged("DefectoID");
                }
            }
        }
        private int _defectoID;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Defecto Defecto
        {
            get { return _defecto; }
            set
            {
                if (!ReferenceEquals(_defecto, value))
                {
                    var previousValue = _defecto;
                    _defecto = value;
                    FixupDefecto(previousValue);
                    OnNavigationPropertyChanged("Defecto");
                }
            }
        }
        private Defecto _defecto;
    
        [DataMember]
        public JuntaCampoInspeccionVisual JuntaCampoInspeccionVisual
        {
            get { return _juntaCampoInspeccionVisual; }
            set
            {
                if (!ReferenceEquals(_juntaCampoInspeccionVisual, value))
                {
                    var previousValue = _juntaCampoInspeccionVisual;
                    _juntaCampoInspeccionVisual = value;
                    FixupJuntaCampoInspeccionVisual(previousValue);
                    OnNavigationPropertyChanged("JuntaCampoInspeccionVisual");
                }
            }
        }
        private JuntaCampoInspeccionVisual _juntaCampoInspeccionVisual;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Defecto = null;
            JuntaCampoInspeccionVisual = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDefecto(Defecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.JuntaCampoInspeccionVisualDefecto.Contains(this))
            {
                previousValue.JuntaCampoInspeccionVisualDefecto.Remove(this);
            }
    
            if (Defecto != null)
            {
                if (!Defecto.JuntaCampoInspeccionVisualDefecto.Contains(this))
                {
                    Defecto.JuntaCampoInspeccionVisualDefecto.Add(this);
                }
    
                DefectoID = Defecto.DefectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Defecto")
                    && (ChangeTracker.OriginalValues["Defecto"] == Defecto))
                {
                    ChangeTracker.OriginalValues.Remove("Defecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Defecto", previousValue);
                }
                if (Defecto != null && !Defecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Defecto.StartTracking();
                }
            }
        }
    
        private void FixupJuntaCampoInspeccionVisual(JuntaCampoInspeccionVisual previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.JuntaCampoInspeccionVisualDefecto.Contains(this))
            {
                previousValue.JuntaCampoInspeccionVisualDefecto.Remove(this);
            }
    
            if (JuntaCampoInspeccionVisual != null)
            {
                if (!JuntaCampoInspeccionVisual.JuntaCampoInspeccionVisualDefecto.Contains(this))
                {
                    JuntaCampoInspeccionVisual.JuntaCampoInspeccionVisualDefecto.Add(this);
                }
    
                JuntaCampoInspeccionVisualID = JuntaCampoInspeccionVisual.JuntaCampoInspeccionVisualID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("JuntaCampoInspeccionVisual")
                    && (ChangeTracker.OriginalValues["JuntaCampoInspeccionVisual"] == JuntaCampoInspeccionVisual))
                {
                    ChangeTracker.OriginalValues.Remove("JuntaCampoInspeccionVisual");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("JuntaCampoInspeccionVisual", previousValue);
                }
                if (JuntaCampoInspeccionVisual != null && !JuntaCampoInspeccionVisual.ChangeTracker.ChangeTrackingEnabled)
                {
                    JuntaCampoInspeccionVisual.StartTracking();
                }
            }
        }

        #endregion

    }
}
