//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProyectoPrograma))]
    [Serializable]
    public partial class PeriodoPrograma: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PeriodoProgramaID
        {
            get { return _periodoProgramaID; }
            set
            {
                if (_periodoProgramaID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PeriodoProgramaID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _periodoProgramaID = value;
                    OnPropertyChanged("PeriodoProgramaID");
                }
            }
        }
        private int _periodoProgramaID;
    
        [DataMember]
        public int ProyectoProgramaID
        {
            get { return _proyectoProgramaID; }
            set
            {
                if (_proyectoProgramaID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoProgramaID", _proyectoProgramaID);
                    if (!IsDeserializing)
                    {
                        if (ProyectoPrograma != null && ProyectoPrograma.ProyectoProgramaID != value)
                        {
                            ProyectoPrograma = null;
                        }
                    }
                    _proyectoProgramaID = value;
                    OnPropertyChanged("ProyectoProgramaID");
                }
            }
        }
        private int _proyectoProgramaID;
    
        [DataMember]
        public int Numero
        {
            get { return _numero; }
            set
            {
                if (_numero != value)
                {
                    _numero = value;
                    OnPropertyChanged("Numero");
                }
            }
        }
        private int _numero;
    
        [DataMember]
        public System.DateTime FechaInicio
        {
            get { return _fechaInicio; }
            set
            {
                if (_fechaInicio != value)
                {
                    _fechaInicio = value;
                    OnPropertyChanged("FechaInicio");
                }
            }
        }
        private System.DateTime _fechaInicio;
    
        [DataMember]
        public System.DateTime FechaFin
        {
            get { return _fechaFin; }
            set
            {
                if (_fechaFin != value)
                {
                    _fechaFin = value;
                    OnPropertyChanged("FechaFin");
                }
            }
        }
        private System.DateTime _fechaFin;
    
        [DataMember]
        public decimal PorContrato
        {
            get { return _porContrato; }
            set
            {
                if (_porContrato != value)
                {
                    _porContrato = value;
                    OnPropertyChanged("PorContrato");
                }
            }
        }
        private decimal _porContrato;
    
        [DataMember]
        public decimal Reprogramaciones
        {
            get { return _reprogramaciones; }
            set
            {
                if (_reprogramaciones != value)
                {
                    _reprogramaciones = value;
                    OnPropertyChanged("Reprogramaciones");
                }
            }
        }
        private decimal _reprogramaciones;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ProyectoPrograma ProyectoPrograma
        {
            get { return _proyectoPrograma; }
            set
            {
                if (!ReferenceEquals(_proyectoPrograma, value))
                {
                    var previousValue = _proyectoPrograma;
                    _proyectoPrograma = value;
                    FixupProyectoPrograma(previousValue);
                    OnNavigationPropertyChanged("ProyectoPrograma");
                }
            }
        }
        private ProyectoPrograma _proyectoPrograma;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            ProyectoPrograma = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyectoPrograma(ProyectoPrograma previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PeriodoPrograma.Contains(this))
            {
                previousValue.PeriodoPrograma.Remove(this);
            }
    
            if (ProyectoPrograma != null)
            {
                if (!ProyectoPrograma.PeriodoPrograma.Contains(this))
                {
                    ProyectoPrograma.PeriodoPrograma.Add(this);
                }
    
                ProyectoProgramaID = ProyectoPrograma.ProyectoProgramaID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProyectoPrograma")
                    && (ChangeTracker.OriginalValues["ProyectoPrograma"] == ProyectoPrograma))
                {
                    ChangeTracker.OriginalValues.Remove("ProyectoPrograma");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProyectoPrograma", previousValue);
                }
                if (ProyectoPrograma != null && !ProyectoPrograma.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProyectoPrograma.StartTracking();
                }
            }
        }

        #endregion

    }
}
