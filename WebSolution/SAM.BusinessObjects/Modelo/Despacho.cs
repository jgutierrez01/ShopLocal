//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MaterialSpool))]
    [KnownType(typeof(NumeroUnico))]
    [KnownType(typeof(OrdenTrabajoSpool))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(OrdenTrabajoMaterial))]
    [KnownType(typeof(NumeroUnicoMovimiento))]
    [Serializable]
    public partial class Despacho: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DespachoID
        {
            get { return _despachoID; }
            set
            {
                if (_despachoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DespachoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _despachoID = value;
                    OnPropertyChanged("DespachoID");
                }
            }
        }
        private int _despachoID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int OrdenTrabajoSpoolID
        {
            get { return _ordenTrabajoSpoolID; }
            set
            {
                if (_ordenTrabajoSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpoolID", _ordenTrabajoSpoolID);
                    if (!IsDeserializing)
                    {
                        if (OrdenTrabajoSpool != null && OrdenTrabajoSpool.OrdenTrabajoSpoolID != value)
                        {
                            OrdenTrabajoSpool = null;
                        }
                    }
                    _ordenTrabajoSpoolID = value;
                    OnPropertyChanged("OrdenTrabajoSpoolID");
                }
            }
        }
        private int _ordenTrabajoSpoolID;
    
        [DataMember]
        public int MaterialSpoolID
        {
            get { return _materialSpoolID; }
            set
            {
                if (_materialSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("MaterialSpoolID", _materialSpoolID);
                    if (!IsDeserializing)
                    {
                        if (MaterialSpool != null && MaterialSpool.MaterialSpoolID != value)
                        {
                            MaterialSpool = null;
                        }
                    }
                    _materialSpoolID = value;
                    OnPropertyChanged("MaterialSpoolID");
                }
            }
        }
        private int _materialSpoolID;
    
        [DataMember]
        public int NumeroUnicoID
        {
            get { return _numeroUnicoID; }
            set
            {
                if (_numeroUnicoID != value)
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnicoID", _numeroUnicoID);
                    if (!IsDeserializing)
                    {
                        if (NumeroUnico != null && NumeroUnico.NumeroUnicoID != value)
                        {
                            NumeroUnico = null;
                        }
                    }
                    _numeroUnicoID = value;
                    OnPropertyChanged("NumeroUnicoID");
                }
            }
        }
        private int _numeroUnicoID;
    
        [DataMember]
        public string Segmento
        {
            get { return _segmento; }
            set
            {
                if (_segmento != value)
                {
                    _segmento = value;
                    OnPropertyChanged("Segmento");
                }
            }
        }
        private string _segmento;
    
        [DataMember]
        public bool EsEquivalente
        {
            get { return _esEquivalente; }
            set
            {
                if (_esEquivalente != value)
                {
                    _esEquivalente = value;
                    OnPropertyChanged("EsEquivalente");
                }
            }
        }
        private bool _esEquivalente;
    
        [DataMember]
        public int Cantidad
        {
            get { return _cantidad; }
            set
            {
                if (_cantidad != value)
                {
                    _cantidad = value;
                    OnPropertyChanged("Cantidad");
                }
            }
        }
        private int _cantidad;
    
        [DataMember]
        public bool Cancelado
        {
            get { return _cancelado; }
            set
            {
                if (_cancelado != value)
                {
                    _cancelado = value;
                    OnPropertyChanged("Cancelado");
                }
            }
        }
        private bool _cancelado;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public System.DateTime FechaDespacho
        {
            get { return _fechaDespacho; }
            set
            {
                if (_fechaDespacho != value)
                {
                    _fechaDespacho = value;
                    OnPropertyChanged("FechaDespacho");
                }
            }
        }
        private System.DateTime _fechaDespacho;
    
        [DataMember]
        public Nullable<int> SalidaInventarioID
        {
            get { return _salidaInventarioID; }
            set
            {
                if (_salidaInventarioID != value)
                {
                    ChangeTracker.RecordOriginalValue("SalidaInventarioID", _salidaInventarioID);
                    if (!IsDeserializing)
                    {
                        if (MovimientoSalida != null && MovimientoSalida.NumeroUnicoMovimientoID != value)
                        {
                            MovimientoSalida = null;
                        }
                    }
                    _salidaInventarioID = value;
                    OnPropertyChanged("SalidaInventarioID");
                }
            }
        }
        private Nullable<int> _salidaInventarioID;
    
        [DataMember]
        public Nullable<int> DespachadorID
        {
            get { return _despachadorID; }
            set
            {
                if (_despachadorID != value)
                {
                    _despachadorID = value;
                    OnPropertyChanged("DespachadorID");
                }
            }
        }
        private Nullable<int> _despachadorID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public MaterialSpool MaterialSpool
        {
            get { return _materialSpool; }
            set
            {
                if (!ReferenceEquals(_materialSpool, value))
                {
                    var previousValue = _materialSpool;
                    _materialSpool = value;
                    FixupMaterialSpool(previousValue);
                    OnNavigationPropertyChanged("MaterialSpool");
                }
            }
        }
        private MaterialSpool _materialSpool;
    
        [DataMember]
        public NumeroUnico NumeroUnico
        {
            get { return _numeroUnico; }
            set
            {
                if (!ReferenceEquals(_numeroUnico, value))
                {
                    var previousValue = _numeroUnico;
                    _numeroUnico = value;
                    FixupNumeroUnico(previousValue);
                    OnNavigationPropertyChanged("NumeroUnico");
                }
            }
        }
        private NumeroUnico _numeroUnico;
    
        [DataMember]
        public OrdenTrabajoSpool OrdenTrabajoSpool
        {
            get { return _ordenTrabajoSpool; }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoSpool, value))
                {
                    var previousValue = _ordenTrabajoSpool;
                    _ordenTrabajoSpool = value;
                    FixupOrdenTrabajoSpool(previousValue);
                    OnNavigationPropertyChanged("OrdenTrabajoSpool");
                }
            }
        }
        private OrdenTrabajoSpool _ordenTrabajoSpool;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TrackableCollection<OrdenTrabajoMaterial> OrdenTrabajoMaterial
        {
            get
            {
                if (_ordenTrabajoMaterial == null)
                {
                    _ordenTrabajoMaterial = new TrackableCollection<OrdenTrabajoMaterial>();
                    _ordenTrabajoMaterial.CollectionChanged += FixupOrdenTrabajoMaterial;
                }
                return _ordenTrabajoMaterial;
            }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoMaterial, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ordenTrabajoMaterial != null)
                    {
                        _ordenTrabajoMaterial.CollectionChanged -= FixupOrdenTrabajoMaterial;
                    }
                    _ordenTrabajoMaterial = value;
                    if (_ordenTrabajoMaterial != null)
                    {
                        _ordenTrabajoMaterial.CollectionChanged += FixupOrdenTrabajoMaterial;
                    }
                    OnNavigationPropertyChanged("OrdenTrabajoMaterial");
                }
            }
        }
        private TrackableCollection<OrdenTrabajoMaterial> _ordenTrabajoMaterial;
    
        [DataMember]
        public NumeroUnicoMovimiento MovimientoSalida
        {
            get { return _movimientoSalida; }
            set
            {
                if (!ReferenceEquals(_movimientoSalida, value))
                {
                    var previousValue = _movimientoSalida;
                    _movimientoSalida = value;
                    FixupMovimientoSalida(previousValue);
                    OnNavigationPropertyChanged("MovimientoSalida");
                }
            }
        }
        private NumeroUnicoMovimiento _movimientoSalida;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_ordenTrabajoMaterial != null)
    		{
    			_ordenTrabajoMaterial.CollectionChanged -= FixupOrdenTrabajoMaterial;
    			_ordenTrabajoMaterial.CollectionChanged += FixupOrdenTrabajoMaterial;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            MaterialSpool = null;
            NumeroUnico = null;
            OrdenTrabajoSpool = null;
            Proyecto = null;
            OrdenTrabajoMaterial.Clear();
            MovimientoSalida = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupMaterialSpool(MaterialSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Despacho.Contains(this))
            {
                previousValue.Despacho.Remove(this);
            }
    
            if (MaterialSpool != null)
            {
                if (!MaterialSpool.Despacho.Contains(this))
                {
                    MaterialSpool.Despacho.Add(this);
                }
    
                MaterialSpoolID = MaterialSpool.MaterialSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MaterialSpool")
                    && (ChangeTracker.OriginalValues["MaterialSpool"] == MaterialSpool))
                {
                    ChangeTracker.OriginalValues.Remove("MaterialSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MaterialSpool", previousValue);
                }
                if (MaterialSpool != null && !MaterialSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    MaterialSpool.StartTracking();
                }
            }
        }
    
        private void FixupNumeroUnico(NumeroUnico previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Despacho.Contains(this))
            {
                previousValue.Despacho.Remove(this);
            }
    
            if (NumeroUnico != null)
            {
                if (!NumeroUnico.Despacho.Contains(this))
                {
                    NumeroUnico.Despacho.Add(this);
                }
    
                NumeroUnicoID = NumeroUnico.NumeroUnicoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NumeroUnico")
                    && (ChangeTracker.OriginalValues["NumeroUnico"] == NumeroUnico))
                {
                    ChangeTracker.OriginalValues.Remove("NumeroUnico");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnico", previousValue);
                }
                if (NumeroUnico != null && !NumeroUnico.ChangeTracker.ChangeTrackingEnabled)
                {
                    NumeroUnico.StartTracking();
                }
            }
        }
    
        private void FixupOrdenTrabajoSpool(OrdenTrabajoSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Despacho.Contains(this))
            {
                previousValue.Despacho.Remove(this);
            }
    
            if (OrdenTrabajoSpool != null)
            {
                if (!OrdenTrabajoSpool.Despacho.Contains(this))
                {
                    OrdenTrabajoSpool.Despacho.Add(this);
                }
    
                OrdenTrabajoSpoolID = OrdenTrabajoSpool.OrdenTrabajoSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrdenTrabajoSpool")
                    && (ChangeTracker.OriginalValues["OrdenTrabajoSpool"] == OrdenTrabajoSpool))
                {
                    ChangeTracker.OriginalValues.Remove("OrdenTrabajoSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpool", previousValue);
                }
                if (OrdenTrabajoSpool != null && !OrdenTrabajoSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    OrdenTrabajoSpool.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Despacho.Contains(this))
            {
                previousValue.Despacho.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.Despacho.Contains(this))
                {
                    Proyecto.Despacho.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupMovimientoSalida(NumeroUnicoMovimiento previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Despachos.Contains(this))
            {
                previousValue.Despachos.Remove(this);
            }
    
            if (MovimientoSalida != null)
            {
                if (!MovimientoSalida.Despachos.Contains(this))
                {
                    MovimientoSalida.Despachos.Add(this);
                }
    
                SalidaInventarioID = MovimientoSalida.NumeroUnicoMovimientoID;
            }
            else if (!skipKeys)
            {
                SalidaInventarioID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MovimientoSalida")
                    && (ChangeTracker.OriginalValues["MovimientoSalida"] == MovimientoSalida))
                {
                    ChangeTracker.OriginalValues.Remove("MovimientoSalida");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MovimientoSalida", previousValue);
                }
                if (MovimientoSalida != null && !MovimientoSalida.ChangeTracker.ChangeTrackingEnabled)
                {
                    MovimientoSalida.StartTracking();
                }
            }
        }
    
        private void FixupOrdenTrabajoMaterial(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrdenTrabajoMaterial item in e.NewItems)
                {
                    item.Despacho = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrdenTrabajoMaterial", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrdenTrabajoMaterial item in e.OldItems)
                {
                    if (ReferenceEquals(item.Despacho, this))
                    {
                        item.Despacho = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrdenTrabajoMaterial", item);
                    }
                }
            }
        }

        #endregion

    }
}
