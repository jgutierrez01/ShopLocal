//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(WorkstatusSpool))]
    [Serializable]
    public partial class InspeccionDimensionalPatio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int InspeccionDimensionalPatioID
        {
            get { return _inspeccionDimensionalPatioID; }
            set
            {
                if (_inspeccionDimensionalPatioID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'InspeccionDimensionalPatioID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _inspeccionDimensionalPatioID = value;
                    OnPropertyChanged("InspeccionDimensionalPatioID");
                }
            }
        }
        private int _inspeccionDimensionalPatioID;
    
        [DataMember]
        public int WorkstatusSpoolID
        {
            get { return _workstatusSpoolID; }
            set
            {
                if (_workstatusSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkstatusSpoolID", _workstatusSpoolID);
                    if (!IsDeserializing)
                    {
                        if (WorkstatusSpool != null && WorkstatusSpool.WorkstatusSpoolID != value)
                        {
                            WorkstatusSpool = null;
                        }
                    }
                    _workstatusSpoolID = value;
                    OnPropertyChanged("WorkstatusSpoolID");
                }
            }
        }
        private int _workstatusSpoolID;
    
        [DataMember]
        public System.DateTime FechaInspeccion
        {
            get { return _fechaInspeccion; }
            set
            {
                if (_fechaInspeccion != value)
                {
                    _fechaInspeccion = value;
                    OnPropertyChanged("FechaInspeccion");
                }
            }
        }
        private System.DateTime _fechaInspeccion;
    
        [DataMember]
        public bool Aprobado
        {
            get { return _aprobado; }
            set
            {
                if (_aprobado != value)
                {
                    _aprobado = value;
                    OnPropertyChanged("Aprobado");
                }
            }
        }
        private bool _aprobado;
    
        [DataMember]
        public string Observaciones
        {
            get { return _observaciones; }
            set
            {
                if (_observaciones != value)
                {
                    _observaciones = value;
                    OnPropertyChanged("Observaciones");
                }
            }
        }
        private string _observaciones;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public WorkstatusSpool WorkstatusSpool
        {
            get { return _workstatusSpool; }
            set
            {
                if (!ReferenceEquals(_workstatusSpool, value))
                {
                    var previousValue = _workstatusSpool;
                    _workstatusSpool = value;
                    FixupWorkstatusSpool(previousValue);
                    OnNavigationPropertyChanged("WorkstatusSpool");
                }
            }
        }
        private WorkstatusSpool _workstatusSpool;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            WorkstatusSpool = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupWorkstatusSpool(WorkstatusSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.InspeccionDimensionalPatio.Contains(this))
            {
                previousValue.InspeccionDimensionalPatio.Remove(this);
            }
    
            if (WorkstatusSpool != null)
            {
                if (!WorkstatusSpool.InspeccionDimensionalPatio.Contains(this))
                {
                    WorkstatusSpool.InspeccionDimensionalPatio.Add(this);
                }
    
                WorkstatusSpoolID = WorkstatusSpool.WorkstatusSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WorkstatusSpool")
                    && (ChangeTracker.OriginalValues["WorkstatusSpool"] == WorkstatusSpool))
                {
                    ChangeTracker.OriginalValues.Remove("WorkstatusSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WorkstatusSpool", previousValue);
                }
                if (WorkstatusSpool != null && !WorkstatusSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    WorkstatusSpool.StartTracking();
                }
            }
        }

        #endregion

    }
}
