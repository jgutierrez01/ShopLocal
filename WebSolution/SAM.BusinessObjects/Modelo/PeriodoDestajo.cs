//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DestajoSoldador))]
    [KnownType(typeof(DestajoTubero))]
    [Serializable]
    public partial class PeriodoDestajo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PeriodoDestajoID
        {
            get { return _periodoDestajoID; }
            set
            {
                if (_periodoDestajoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PeriodoDestajoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _periodoDestajoID = value;
                    OnPropertyChanged("PeriodoDestajoID");
                }
            }
        }
        private int _periodoDestajoID;
    
        [DataMember]
        public string Semana
        {
            get { return _semana; }
            set
            {
                if (_semana != value)
                {
                    _semana = value;
                    OnPropertyChanged("Semana");
                }
            }
        }
        private string _semana;
    
        [DataMember]
        public int Anio
        {
            get { return _anio; }
            set
            {
                if (_anio != value)
                {
                    _anio = value;
                    OnPropertyChanged("Anio");
                }
            }
        }
        private int _anio;
    
        [DataMember]
        public System.DateTime FechaInicio
        {
            get { return _fechaInicio; }
            set
            {
                if (_fechaInicio != value)
                {
                    _fechaInicio = value;
                    OnPropertyChanged("FechaInicio");
                }
            }
        }
        private System.DateTime _fechaInicio;
    
        [DataMember]
        public System.DateTime FechaFin
        {
            get { return _fechaFin; }
            set
            {
                if (_fechaFin != value)
                {
                    _fechaFin = value;
                    OnPropertyChanged("FechaFin");
                }
            }
        }
        private System.DateTime _fechaFin;
    
        [DataMember]
        public int CantidadDiasFestivos
        {
            get { return _cantidadDiasFestivos; }
            set
            {
                if (_cantidadDiasFestivos != value)
                {
                    _cantidadDiasFestivos = value;
                    OnPropertyChanged("CantidadDiasFestivos");
                }
            }
        }
        private int _cantidadDiasFestivos;
    
        [DataMember]
        public bool Aprobado
        {
            get { return _aprobado; }
            set
            {
                if (_aprobado != value)
                {
                    _aprobado = value;
                    OnPropertyChanged("Aprobado");
                }
            }
        }
        private bool _aprobado;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DestajoSoldador> DestajoSoldador
        {
            get
            {
                if (_destajoSoldador == null)
                {
                    _destajoSoldador = new TrackableCollection<DestajoSoldador>();
                    _destajoSoldador.CollectionChanged += FixupDestajoSoldador;
                }
                return _destajoSoldador;
            }
            set
            {
                if (!ReferenceEquals(_destajoSoldador, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_destajoSoldador != null)
                    {
                        _destajoSoldador.CollectionChanged -= FixupDestajoSoldador;
                    }
                    _destajoSoldador = value;
                    if (_destajoSoldador != null)
                    {
                        _destajoSoldador.CollectionChanged += FixupDestajoSoldador;
                    }
                    OnNavigationPropertyChanged("DestajoSoldador");
                }
            }
        }
        private TrackableCollection<DestajoSoldador> _destajoSoldador;
    
        [DataMember]
        public TrackableCollection<DestajoTubero> DestajoTubero
        {
            get
            {
                if (_destajoTubero == null)
                {
                    _destajoTubero = new TrackableCollection<DestajoTubero>();
                    _destajoTubero.CollectionChanged += FixupDestajoTubero;
                }
                return _destajoTubero;
            }
            set
            {
                if (!ReferenceEquals(_destajoTubero, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_destajoTubero != null)
                    {
                        _destajoTubero.CollectionChanged -= FixupDestajoTubero;
                    }
                    _destajoTubero = value;
                    if (_destajoTubero != null)
                    {
                        _destajoTubero.CollectionChanged += FixupDestajoTubero;
                    }
                    OnNavigationPropertyChanged("DestajoTubero");
                }
            }
        }
        private TrackableCollection<DestajoTubero> _destajoTubero;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_destajoSoldador != null)
    		{
    			_destajoSoldador.CollectionChanged -= FixupDestajoSoldador;
    			_destajoSoldador.CollectionChanged += FixupDestajoSoldador;
    			}
    			if (_destajoTubero != null)
    		{
    			_destajoTubero.CollectionChanged -= FixupDestajoTubero;
    			_destajoTubero.CollectionChanged += FixupDestajoTubero;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            DestajoSoldador.Clear();
            DestajoTubero.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDestajoSoldador(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DestajoSoldador item in e.NewItems)
                {
                    item.PeriodoDestajo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DestajoSoldador", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DestajoSoldador item in e.OldItems)
                {
                    if (ReferenceEquals(item.PeriodoDestajo, this))
                    {
                        item.PeriodoDestajo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DestajoSoldador", item);
                    }
                }
            }
        }
    
        private void FixupDestajoTubero(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DestajoTubero item in e.NewItems)
                {
                    item.PeriodoDestajo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DestajoTubero", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DestajoTubero item in e.OldItems)
                {
                    if (ReferenceEquals(item.PeriodoDestajo, this))
                    {
                        item.PeriodoDestajo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DestajoTubero", item);
                    }
                }
            }
        }

        #endregion

    }
}
