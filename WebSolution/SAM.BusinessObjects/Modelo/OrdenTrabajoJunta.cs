//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OrdenTrabajoSpool))]
    [KnownType(typeof(JuntaSpool))]
    [Serializable]
    public partial class OrdenTrabajoJunta: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrdenTrabajoJuntaID
        {
            get { return _ordenTrabajoJuntaID; }
            set
            {
                if (_ordenTrabajoJuntaID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrdenTrabajoJuntaID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ordenTrabajoJuntaID = value;
                    OnPropertyChanged("OrdenTrabajoJuntaID");
                }
            }
        }
        private int _ordenTrabajoJuntaID;
    
        [DataMember]
        public int OrdenTrabajoSpoolID
        {
            get { return _ordenTrabajoSpoolID; }
            set
            {
                if (_ordenTrabajoSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpoolID", _ordenTrabajoSpoolID);
                    if (!IsDeserializing)
                    {
                        if (OrdenTrabajoSpool != null && OrdenTrabajoSpool.OrdenTrabajoSpoolID != value)
                        {
                            OrdenTrabajoSpool = null;
                        }
                    }
                    _ordenTrabajoSpoolID = value;
                    OnPropertyChanged("OrdenTrabajoSpoolID");
                }
            }
        }
        private int _ordenTrabajoSpoolID;
    
        [DataMember]
        public int JuntaSpoolID
        {
            get { return _juntaSpoolID; }
            set
            {
                if (_juntaSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("JuntaSpoolID", _juntaSpoolID);
                    if (!IsDeserializing)
                    {
                        if (JuntaSpool != null && JuntaSpool.JuntaSpoolID != value)
                        {
                            JuntaSpool = null;
                        }
                    }
                    _juntaSpoolID = value;
                    OnPropertyChanged("JuntaSpoolID");
                }
            }
        }
        private int _juntaSpoolID;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public bool FueReingenieria
        {
            get { return _fueReingenieria; }
            set
            {
                if (_fueReingenieria != value)
                {
                    _fueReingenieria = value;
                    OnPropertyChanged("FueReingenieria");
                }
            }
        }
        private bool _fueReingenieria;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public OrdenTrabajoSpool OrdenTrabajoSpool
        {
            get { return _ordenTrabajoSpool; }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoSpool, value))
                {
                    var previousValue = _ordenTrabajoSpool;
                    _ordenTrabajoSpool = value;
                    FixupOrdenTrabajoSpool(previousValue);
                    OnNavigationPropertyChanged("OrdenTrabajoSpool");
                }
            }
        }
        private OrdenTrabajoSpool _ordenTrabajoSpool;
    
        [DataMember]
        public JuntaSpool JuntaSpool
        {
            get { return _juntaSpool; }
            set
            {
                if (!ReferenceEquals(_juntaSpool, value))
                {
                    var previousValue = _juntaSpool;
                    _juntaSpool = value;
                    FixupJuntaSpool(previousValue);
                    OnNavigationPropertyChanged("JuntaSpool");
                }
            }
        }
        private JuntaSpool _juntaSpool;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            OrdenTrabajoSpool = null;
            JuntaSpool = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupOrdenTrabajoSpool(OrdenTrabajoSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrdenTrabajoJunta.Contains(this))
            {
                previousValue.OrdenTrabajoJunta.Remove(this);
            }
    
            if (OrdenTrabajoSpool != null)
            {
                if (!OrdenTrabajoSpool.OrdenTrabajoJunta.Contains(this))
                {
                    OrdenTrabajoSpool.OrdenTrabajoJunta.Add(this);
                }
    
                OrdenTrabajoSpoolID = OrdenTrabajoSpool.OrdenTrabajoSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OrdenTrabajoSpool")
                    && (ChangeTracker.OriginalValues["OrdenTrabajoSpool"] == OrdenTrabajoSpool))
                {
                    ChangeTracker.OriginalValues.Remove("OrdenTrabajoSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OrdenTrabajoSpool", previousValue);
                }
                if (OrdenTrabajoSpool != null && !OrdenTrabajoSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    OrdenTrabajoSpool.StartTracking();
                }
            }
        }
    
        private void FixupJuntaSpool(JuntaSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrdenTrabajoJunta.Contains(this))
            {
                previousValue.OrdenTrabajoJunta.Remove(this);
            }
    
            if (JuntaSpool != null)
            {
                if (!JuntaSpool.OrdenTrabajoJunta.Contains(this))
                {
                    JuntaSpool.OrdenTrabajoJunta.Add(this);
                }
    
                JuntaSpoolID = JuntaSpool.JuntaSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("JuntaSpool")
                    && (ChangeTracker.OriginalValues["JuntaSpool"] == JuntaSpool))
                {
                    ChangeTracker.OriginalValues.Remove("JuntaSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("JuntaSpool", previousValue);
                }
                if (JuntaSpool != null && !JuntaSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    JuntaSpool.StartTracking();
                }
            }
        }

        #endregion

    }
}
