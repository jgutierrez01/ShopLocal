//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Spool))]
    [KnownType(typeof(TipoJunta))]
    [Serializable]
    public partial class AgrupadoresSpoolPND: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int AgrupadorSpoolPNDID
        {
            get { return _agrupadorSpoolPNDID; }
            set
            {
                if (_agrupadorSpoolPNDID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AgrupadorSpoolPNDID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _agrupadorSpoolPNDID = value;
                    OnPropertyChanged("AgrupadorSpoolPNDID");
                }
            }
        }
        private int _agrupadorSpoolPNDID;
    
        [DataMember]
        public int SpoolID
        {
            get { return _spoolID; }
            set
            {
                if (_spoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("SpoolID", _spoolID);
                    if (!IsDeserializing)
                    {
                        if (Spool != null && Spool.SpoolID != value)
                        {
                            Spool = null;
                        }
                    }
                    _spoolID = value;
                    OnPropertyChanged("SpoolID");
                }
            }
        }
        private int _spoolID;
    
        [DataMember]
        public int TipoJuntaID
        {
            get { return _tipoJuntaID; }
            set
            {
                if (_tipoJuntaID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoJuntaID", _tipoJuntaID);
                    if (!IsDeserializing)
                    {
                        if (TipoJunta != null && TipoJunta.TipoJuntaID != value)
                        {
                            TipoJunta = null;
                        }
                    }
                    _tipoJuntaID = value;
                    OnPropertyChanged("TipoJuntaID");
                }
            }
        }
        private int _tipoJuntaID;
    
        [DataMember]
        public string Clasificacion
        {
            get { return _clasificacion; }
            set
            {
                if (_clasificacion != value)
                {
                    _clasificacion = value;
                    OnPropertyChanged("Clasificacion");
                }
            }
        }
        private string _clasificacion;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Spool Spool
        {
            get { return _spool; }
            set
            {
                if (!ReferenceEquals(_spool, value))
                {
                    var previousValue = _spool;
                    _spool = value;
                    FixupSpool(previousValue);
                    OnNavigationPropertyChanged("Spool");
                }
            }
        }
        private Spool _spool;
    
        [DataMember]
        public TipoJunta TipoJunta
        {
            get { return _tipoJunta; }
            set
            {
                if (!ReferenceEquals(_tipoJunta, value))
                {
                    var previousValue = _tipoJunta;
                    _tipoJunta = value;
                    FixupTipoJunta(previousValue);
                    OnNavigationPropertyChanged("TipoJunta");
                }
            }
        }
        private TipoJunta _tipoJunta;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Spool = null;
            TipoJunta = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSpool(Spool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AgrupadoresSpoolPND.Contains(this))
            {
                previousValue.AgrupadoresSpoolPND.Remove(this);
            }
    
            if (Spool != null)
            {
                if (!Spool.AgrupadoresSpoolPND.Contains(this))
                {
                    Spool.AgrupadoresSpoolPND.Add(this);
                }
    
                SpoolID = Spool.SpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Spool")
                    && (ChangeTracker.OriginalValues["Spool"] == Spool))
                {
                    ChangeTracker.OriginalValues.Remove("Spool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Spool", previousValue);
                }
                if (Spool != null && !Spool.ChangeTracker.ChangeTrackingEnabled)
                {
                    Spool.StartTracking();
                }
            }
        }
    
        private void FixupTipoJunta(TipoJunta previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AgrupadoresSpoolPND.Contains(this))
            {
                previousValue.AgrupadoresSpoolPND.Remove(this);
            }
    
            if (TipoJunta != null)
            {
                if (!TipoJunta.AgrupadoresSpoolPND.Contains(this))
                {
                    TipoJunta.AgrupadoresSpoolPND.Add(this);
                }
    
                TipoJuntaID = TipoJunta.TipoJuntaID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoJunta")
                    && (ChangeTracker.OriginalValues["TipoJunta"] == TipoJunta))
                {
                    ChangeTracker.OriginalValues.Remove("TipoJunta");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoJunta", previousValue);
                }
                if (TipoJunta != null && !TipoJunta.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoJunta.StartTracking();
                }
            }
        }

        #endregion

    }
}
