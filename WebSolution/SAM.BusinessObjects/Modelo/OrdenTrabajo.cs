//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(Taller))]
    [KnownType(typeof(OrdenTrabajoSpool))]
    [KnownType(typeof(EstatusOrden))]
    [KnownType(typeof(NumeroUnicoCorte))]
    [Serializable]
    public partial class OrdenTrabajo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrdenTrabajoID
        {
            get { return _ordenTrabajoID; }
            set
            {
                if (_ordenTrabajoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrdenTrabajoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ordenTrabajoID = value;
                    OnPropertyChanged("OrdenTrabajoID");
                }
            }
        }
        private int _ordenTrabajoID;
    
        [DataMember]
        public int EstatusOrdenID
        {
            get { return _estatusOrdenID; }
            set
            {
                if (_estatusOrdenID != value)
                {
                    ChangeTracker.RecordOriginalValue("EstatusOrdenID", _estatusOrdenID);
                    if (!IsDeserializing)
                    {
                        if (EstatusOrden != null && EstatusOrden.EstatusOrdenID != value)
                        {
                            EstatusOrden = null;
                        }
                    }
                    _estatusOrdenID = value;
                    OnPropertyChanged("EstatusOrdenID");
                }
            }
        }
        private int _estatusOrdenID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int TallerID
        {
            get { return _tallerID; }
            set
            {
                if (_tallerID != value)
                {
                    ChangeTracker.RecordOriginalValue("TallerID", _tallerID);
                    if (!IsDeserializing)
                    {
                        if (Taller != null && Taller.TallerID != value)
                        {
                            Taller = null;
                        }
                    }
                    _tallerID = value;
                    OnPropertyChanged("TallerID");
                }
            }
        }
        private int _tallerID;
    
        [DataMember]
        public string NumeroOrden
        {
            get { return _numeroOrden; }
            set
            {
                if (_numeroOrden != value)
                {
                    _numeroOrden = value;
                    OnPropertyChanged("NumeroOrden");
                }
            }
        }
        private string _numeroOrden;
    
        [DataMember]
        public System.DateTime FechaOrden
        {
            get { return _fechaOrden; }
            set
            {
                if (_fechaOrden != value)
                {
                    _fechaOrden = value;
                    OnPropertyChanged("FechaOrden");
                }
            }
        }
        private System.DateTime _fechaOrden;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public bool EsAsignado
        {
            get { return _esAsignado; }
            set
            {
                if (_esAsignado != value)
                {
                    _esAsignado = value;
                    OnPropertyChanged("EsAsignado");
                }
            }
        }
        private bool _esAsignado;
    
        [DataMember]
        public Nullable<int> VersionOrden
        {
            get { return _versionOrden; }
            set
            {
                if (_versionOrden != value)
                {
                    _versionOrden = value;
                    OnPropertyChanged("VersionOrden");
                }
            }
        }
        private Nullable<int> _versionOrden;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public Taller Taller
        {
            get { return _taller; }
            set
            {
                if (!ReferenceEquals(_taller, value))
                {
                    var previousValue = _taller;
                    _taller = value;
                    FixupTaller(previousValue);
                    OnNavigationPropertyChanged("Taller");
                }
            }
        }
        private Taller _taller;
    
        [DataMember]
        public TrackableCollection<OrdenTrabajoSpool> OrdenTrabajoSpool
        {
            get
            {
                if (_ordenTrabajoSpool == null)
                {
                    _ordenTrabajoSpool = new TrackableCollection<OrdenTrabajoSpool>();
                    _ordenTrabajoSpool.CollectionChanged += FixupOrdenTrabajoSpool;
                }
                return _ordenTrabajoSpool;
            }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ordenTrabajoSpool != null)
                    {
                        _ordenTrabajoSpool.CollectionChanged -= FixupOrdenTrabajoSpool;
                    }
                    _ordenTrabajoSpool = value;
                    if (_ordenTrabajoSpool != null)
                    {
                        _ordenTrabajoSpool.CollectionChanged += FixupOrdenTrabajoSpool;
                    }
                    OnNavigationPropertyChanged("OrdenTrabajoSpool");
                }
            }
        }
        private TrackableCollection<OrdenTrabajoSpool> _ordenTrabajoSpool;
    
        [DataMember]
        public EstatusOrden EstatusOrden
        {
            get { return _estatusOrden; }
            set
            {
                if (!ReferenceEquals(_estatusOrden, value))
                {
                    var previousValue = _estatusOrden;
                    _estatusOrden = value;
                    FixupEstatusOrden(previousValue);
                    OnNavigationPropertyChanged("EstatusOrden");
                }
            }
        }
        private EstatusOrden _estatusOrden;
    
        [DataMember]
        public TrackableCollection<NumeroUnicoCorte> NumeroUnicoCorte
        {
            get
            {
                if (_numeroUnicoCorte == null)
                {
                    _numeroUnicoCorte = new TrackableCollection<NumeroUnicoCorte>();
                    _numeroUnicoCorte.CollectionChanged += FixupNumeroUnicoCorte;
                }
                return _numeroUnicoCorte;
            }
            set
            {
                if (!ReferenceEquals(_numeroUnicoCorte, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_numeroUnicoCorte != null)
                    {
                        _numeroUnicoCorte.CollectionChanged -= FixupNumeroUnicoCorte;
                    }
                    _numeroUnicoCorte = value;
                    if (_numeroUnicoCorte != null)
                    {
                        _numeroUnicoCorte.CollectionChanged += FixupNumeroUnicoCorte;
                    }
                    OnNavigationPropertyChanged("NumeroUnicoCorte");
                }
            }
        }
        private TrackableCollection<NumeroUnicoCorte> _numeroUnicoCorte;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_ordenTrabajoSpool != null)
    		{
    			_ordenTrabajoSpool.CollectionChanged -= FixupOrdenTrabajoSpool;
    			_ordenTrabajoSpool.CollectionChanged += FixupOrdenTrabajoSpool;
    			}
    			if (_numeroUnicoCorte != null)
    		{
    			_numeroUnicoCorte.CollectionChanged -= FixupNumeroUnicoCorte;
    			_numeroUnicoCorte.CollectionChanged += FixupNumeroUnicoCorte;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
            Taller = null;
            OrdenTrabajoSpool.Clear();
            EstatusOrden = null;
            NumeroUnicoCorte.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrdenTrabajo.Contains(this))
            {
                previousValue.OrdenTrabajo.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.OrdenTrabajo.Contains(this))
                {
                    Proyecto.OrdenTrabajo.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupTaller(Taller previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrdenTrabajo.Contains(this))
            {
                previousValue.OrdenTrabajo.Remove(this);
            }
    
            if (Taller != null)
            {
                if (!Taller.OrdenTrabajo.Contains(this))
                {
                    Taller.OrdenTrabajo.Add(this);
                }
    
                TallerID = Taller.TallerID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Taller")
                    && (ChangeTracker.OriginalValues["Taller"] == Taller))
                {
                    ChangeTracker.OriginalValues.Remove("Taller");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Taller", previousValue);
                }
                if (Taller != null && !Taller.ChangeTracker.ChangeTrackingEnabled)
                {
                    Taller.StartTracking();
                }
            }
        }
    
        private void FixupEstatusOrden(EstatusOrden previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.OrdenTrabajo.Contains(this))
            {
                previousValue.OrdenTrabajo.Remove(this);
            }
    
            if (EstatusOrden != null)
            {
                if (!EstatusOrden.OrdenTrabajo.Contains(this))
                {
                    EstatusOrden.OrdenTrabajo.Add(this);
                }
    
                EstatusOrdenID = EstatusOrden.EstatusOrdenID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EstatusOrden")
                    && (ChangeTracker.OriginalValues["EstatusOrden"] == EstatusOrden))
                {
                    ChangeTracker.OriginalValues.Remove("EstatusOrden");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EstatusOrden", previousValue);
                }
                if (EstatusOrden != null && !EstatusOrden.ChangeTracker.ChangeTrackingEnabled)
                {
                    EstatusOrden.StartTracking();
                }
            }
        }
    
        private void FixupOrdenTrabajoSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrdenTrabajoSpool item in e.NewItems)
                {
                    item.OrdenTrabajo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrdenTrabajoSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrdenTrabajoSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.OrdenTrabajo, this))
                    {
                        item.OrdenTrabajo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrdenTrabajoSpool", item);
                    }
                }
            }
        }
    
        private void FixupNumeroUnicoCorte(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NumeroUnicoCorte item in e.NewItems)
                {
                    item.OrdenTrabajo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NumeroUnicoCorte", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NumeroUnicoCorte item in e.OldItems)
                {
                    if (ReferenceEquals(item.OrdenTrabajo, this))
                    {
                        item.OrdenTrabajo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NumeroUnicoCorte", item);
                    }
                }
            }
        }

        #endregion

    }
}
