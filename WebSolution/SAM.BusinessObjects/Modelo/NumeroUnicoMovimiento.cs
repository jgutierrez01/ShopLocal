//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(NumeroUnico))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(TipoMovimiento))]
    [KnownType(typeof(RecepcionNumeroUnico))]
    [KnownType(typeof(Corte))]
    [KnownType(typeof(NumeroUnicoCorte))]
    [KnownType(typeof(CorteDetalle))]
    [KnownType(typeof(Despacho))]
    [Serializable]
    public partial class NumeroUnicoMovimiento: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int NumeroUnicoID
        {
            get { return _numeroUnicoID; }
            set
            {
                if (_numeroUnicoID != value)
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnicoID", _numeroUnicoID);
                    if (!IsDeserializing)
                    {
                        if (NumeroUnico != null && NumeroUnico.NumeroUnicoID != value)
                        {
                            NumeroUnico = null;
                        }
                    }
                    _numeroUnicoID = value;
                    OnPropertyChanged("NumeroUnicoID");
                }
            }
        }
        private int _numeroUnicoID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int TipoMovimientoID
        {
            get { return _tipoMovimientoID; }
            set
            {
                if (_tipoMovimientoID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoMovimientoID", _tipoMovimientoID);
                    if (!IsDeserializing)
                    {
                        if (TipoMovimiento != null && TipoMovimiento.TipoMovimientoID != value)
                        {
                            TipoMovimiento = null;
                        }
                    }
                    _tipoMovimientoID = value;
                    OnPropertyChanged("TipoMovimientoID");
                }
            }
        }
        private int _tipoMovimientoID;
    
        [DataMember]
        public int Cantidad
        {
            get { return _cantidad; }
            set
            {
                if (_cantidad != value)
                {
                    _cantidad = value;
                    OnPropertyChanged("Cantidad");
                }
            }
        }
        private int _cantidad;
    
        [DataMember]
        public string Segmento
        {
            get { return _segmento; }
            set
            {
                if (_segmento != value)
                {
                    _segmento = value;
                    OnPropertyChanged("Segmento");
                }
            }
        }
        private string _segmento;
    
        [DataMember]
        public System.DateTime FechaMovimiento
        {
            get { return _fechaMovimiento; }
            set
            {
                if (_fechaMovimiento != value)
                {
                    _fechaMovimiento = value;
                    OnPropertyChanged("FechaMovimiento");
                }
            }
        }
        private System.DateTime _fechaMovimiento;
    
        [DataMember]
        public string Referencia
        {
            get { return _referencia; }
            set
            {
                if (_referencia != value)
                {
                    _referencia = value;
                    OnPropertyChanged("Referencia");
                }
            }
        }
        private string _referencia;
    
        [DataMember]
        public string Estatus
        {
            get { return _estatus; }
            set
            {
                if (_estatus != value)
                {
                    _estatus = value;
                    OnPropertyChanged("Estatus");
                }
            }
        }
        private string _estatus;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public int NumeroUnicoMovimientoID
        {
            get { return _numeroUnicoMovimientoID; }
            set
            {
                if (_numeroUnicoMovimientoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NumeroUnicoMovimientoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _numeroUnicoMovimientoID = value;
                    OnPropertyChanged("NumeroUnicoMovimientoID");
                }
            }
        }
        private int _numeroUnicoMovimientoID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public NumeroUnico NumeroUnico
        {
            get { return _numeroUnico; }
            set
            {
                if (!ReferenceEquals(_numeroUnico, value))
                {
                    var previousValue = _numeroUnico;
                    _numeroUnico = value;
                    FixupNumeroUnico(previousValue);
                    OnNavigationPropertyChanged("NumeroUnico");
                }
            }
        }
        private NumeroUnico _numeroUnico;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TipoMovimiento TipoMovimiento
        {
            get { return _tipoMovimiento; }
            set
            {
                if (!ReferenceEquals(_tipoMovimiento, value))
                {
                    var previousValue = _tipoMovimiento;
                    _tipoMovimiento = value;
                    FixupTipoMovimiento(previousValue);
                    OnNavigationPropertyChanged("TipoMovimiento");
                }
            }
        }
        private TipoMovimiento _tipoMovimiento;
    
        [DataMember]
        public TrackableCollection<RecepcionNumeroUnico> RecepcionNumeroUnico
        {
            get
            {
                if (_recepcionNumeroUnico == null)
                {
                    _recepcionNumeroUnico = new TrackableCollection<RecepcionNumeroUnico>();
                    _recepcionNumeroUnico.CollectionChanged += FixupRecepcionNumeroUnico;
                }
                return _recepcionNumeroUnico;
            }
            set
            {
                if (!ReferenceEquals(_recepcionNumeroUnico, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recepcionNumeroUnico != null)
                    {
                        _recepcionNumeroUnico.CollectionChanged -= FixupRecepcionNumeroUnico;
                    }
                    _recepcionNumeroUnico = value;
                    if (_recepcionNumeroUnico != null)
                    {
                        _recepcionNumeroUnico.CollectionChanged += FixupRecepcionNumeroUnico;
                    }
                    OnNavigationPropertyChanged("RecepcionNumeroUnico");
                }
            }
        }
        private TrackableCollection<RecepcionNumeroUnico> _recepcionNumeroUnico;
    
        [DataMember]
        public TrackableCollection<Corte> MermasCorte
        {
            get
            {
                if (_mermasCorte == null)
                {
                    _mermasCorte = new TrackableCollection<Corte>();
                    _mermasCorte.CollectionChanged += FixupMermasCorte;
                }
                return _mermasCorte;
            }
            set
            {
                if (!ReferenceEquals(_mermasCorte, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mermasCorte != null)
                    {
                        _mermasCorte.CollectionChanged -= FixupMermasCorte;
                    }
                    _mermasCorte = value;
                    if (_mermasCorte != null)
                    {
                        _mermasCorte.CollectionChanged += FixupMermasCorte;
                    }
                    OnNavigationPropertyChanged("MermasCorte");
                }
            }
        }
        private TrackableCollection<Corte> _mermasCorte;
    
        [DataMember]
        public TrackableCollection<NumeroUnicoCorte> NumeroUnicoCorte
        {
            get
            {
                if (_numeroUnicoCorte == null)
                {
                    _numeroUnicoCorte = new TrackableCollection<NumeroUnicoCorte>();
                    _numeroUnicoCorte.CollectionChanged += FixupNumeroUnicoCorte;
                }
                return _numeroUnicoCorte;
            }
            set
            {
                if (!ReferenceEquals(_numeroUnicoCorte, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_numeroUnicoCorte != null)
                    {
                        _numeroUnicoCorte.CollectionChanged -= FixupNumeroUnicoCorte;
                    }
                    _numeroUnicoCorte = value;
                    if (_numeroUnicoCorte != null)
                    {
                        _numeroUnicoCorte.CollectionChanged += FixupNumeroUnicoCorte;
                    }
                    OnNavigationPropertyChanged("NumeroUnicoCorte");
                }
            }
        }
        private TrackableCollection<NumeroUnicoCorte> _numeroUnicoCorte;
    
        [DataMember]
        public TrackableCollection<CorteDetalle> Cortes
        {
            get
            {
                if (_cortes == null)
                {
                    _cortes = new TrackableCollection<CorteDetalle>();
                    _cortes.CollectionChanged += FixupCortes;
                }
                return _cortes;
            }
            set
            {
                if (!ReferenceEquals(_cortes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cortes != null)
                    {
                        _cortes.CollectionChanged -= FixupCortes;
                    }
                    _cortes = value;
                    if (_cortes != null)
                    {
                        _cortes.CollectionChanged += FixupCortes;
                    }
                    OnNavigationPropertyChanged("Cortes");
                }
            }
        }
        private TrackableCollection<CorteDetalle> _cortes;
    
        [DataMember]
        public TrackableCollection<Despacho> Despachos
        {
            get
            {
                if (_despachos == null)
                {
                    _despachos = new TrackableCollection<Despacho>();
                    _despachos.CollectionChanged += FixupDespachos;
                }
                return _despachos;
            }
            set
            {
                if (!ReferenceEquals(_despachos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_despachos != null)
                    {
                        _despachos.CollectionChanged -= FixupDespachos;
                    }
                    _despachos = value;
                    if (_despachos != null)
                    {
                        _despachos.CollectionChanged += FixupDespachos;
                    }
                    OnNavigationPropertyChanged("Despachos");
                }
            }
        }
        private TrackableCollection<Despacho> _despachos;
    
        [DataMember]
        public TrackableCollection<Corte> Corte1
        {
            get
            {
                if (_corte1 == null)
                {
                    _corte1 = new TrackableCollection<Corte>();
                    _corte1.CollectionChanged += FixupCorte1;
                }
                return _corte1;
            }
            set
            {
                if (!ReferenceEquals(_corte1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_corte1 != null)
                    {
                        _corte1.CollectionChanged -= FixupCorte1;
                    }
                    _corte1 = value;
                    if (_corte1 != null)
                    {
                        _corte1.CollectionChanged += FixupCorte1;
                    }
                    OnNavigationPropertyChanged("Corte1");
                }
            }
        }
        private TrackableCollection<Corte> _corte1;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_recepcionNumeroUnico != null)
    		{
    			_recepcionNumeroUnico.CollectionChanged -= FixupRecepcionNumeroUnico;
    			_recepcionNumeroUnico.CollectionChanged += FixupRecepcionNumeroUnico;
    			}
    			if (_mermasCorte != null)
    		{
    			_mermasCorte.CollectionChanged -= FixupMermasCorte;
    			_mermasCorte.CollectionChanged += FixupMermasCorte;
    			}
    			if (_numeroUnicoCorte != null)
    		{
    			_numeroUnicoCorte.CollectionChanged -= FixupNumeroUnicoCorte;
    			_numeroUnicoCorte.CollectionChanged += FixupNumeroUnicoCorte;
    			}
    			if (_cortes != null)
    		{
    			_cortes.CollectionChanged -= FixupCortes;
    			_cortes.CollectionChanged += FixupCortes;
    			}
    			if (_despachos != null)
    		{
    			_despachos.CollectionChanged -= FixupDespachos;
    			_despachos.CollectionChanged += FixupDespachos;
    			}
    			if (_corte1 != null)
    		{
    			_corte1.CollectionChanged -= FixupCorte1;
    			_corte1.CollectionChanged += FixupCorte1;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            NumeroUnico = null;
            Proyecto = null;
            TipoMovimiento = null;
            RecepcionNumeroUnico.Clear();
            MermasCorte.Clear();
            NumeroUnicoCorte.Clear();
            Cortes.Clear();
            Despachos.Clear();
            Corte1.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupNumeroUnico(NumeroUnico previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NumeroUnicoMovimiento.Contains(this))
            {
                previousValue.NumeroUnicoMovimiento.Remove(this);
            }
    
            if (NumeroUnico != null)
            {
                if (!NumeroUnico.NumeroUnicoMovimiento.Contains(this))
                {
                    NumeroUnico.NumeroUnicoMovimiento.Add(this);
                }
    
                NumeroUnicoID = NumeroUnico.NumeroUnicoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NumeroUnico")
                    && (ChangeTracker.OriginalValues["NumeroUnico"] == NumeroUnico))
                {
                    ChangeTracker.OriginalValues.Remove("NumeroUnico");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnico", previousValue);
                }
                if (NumeroUnico != null && !NumeroUnico.ChangeTracker.ChangeTrackingEnabled)
                {
                    NumeroUnico.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NumeroUnicoMovimiento.Contains(this))
            {
                previousValue.NumeroUnicoMovimiento.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.NumeroUnicoMovimiento.Contains(this))
                {
                    Proyecto.NumeroUnicoMovimiento.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupTipoMovimiento(TipoMovimiento previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NumeroUnicoMovimiento.Contains(this))
            {
                previousValue.NumeroUnicoMovimiento.Remove(this);
            }
    
            if (TipoMovimiento != null)
            {
                if (!TipoMovimiento.NumeroUnicoMovimiento.Contains(this))
                {
                    TipoMovimiento.NumeroUnicoMovimiento.Add(this);
                }
    
                TipoMovimientoID = TipoMovimiento.TipoMovimientoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoMovimiento")
                    && (ChangeTracker.OriginalValues["TipoMovimiento"] == TipoMovimiento))
                {
                    ChangeTracker.OriginalValues.Remove("TipoMovimiento");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoMovimiento", previousValue);
                }
                if (TipoMovimiento != null && !TipoMovimiento.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoMovimiento.StartTracking();
                }
            }
        }
    
        private void FixupRecepcionNumeroUnico(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RecepcionNumeroUnico item in e.NewItems)
                {
                    item.NumeroUnicoMovimiento = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecepcionNumeroUnico", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RecepcionNumeroUnico item in e.OldItems)
                {
                    if (ReferenceEquals(item.NumeroUnicoMovimiento, this))
                    {
                        item.NumeroUnicoMovimiento = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecepcionNumeroUnico", item);
                    }
                }
            }
        }
    
        private void FixupMermasCorte(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Corte item in e.NewItems)
                {
                    item.MovimientoMerma = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MermasCorte", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Corte item in e.OldItems)
                {
                    if (ReferenceEquals(item.MovimientoMerma, this))
                    {
                        item.MovimientoMerma = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MermasCorte", item);
                    }
                }
            }
        }
    
        private void FixupNumeroUnicoCorte(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NumeroUnicoCorte item in e.NewItems)
                {
                    item.NumeroUnicoMovimiento = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NumeroUnicoCorte", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NumeroUnicoCorte item in e.OldItems)
                {
                    if (ReferenceEquals(item.NumeroUnicoMovimiento, this))
                    {
                        item.NumeroUnicoMovimiento = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NumeroUnicoCorte", item);
                    }
                }
            }
        }
    
        private void FixupCortes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CorteDetalle item in e.NewItems)
                {
                    item.NumeroUnicoMovimiento = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Cortes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CorteDetalle item in e.OldItems)
                {
                    if (ReferenceEquals(item.NumeroUnicoMovimiento, this))
                    {
                        item.NumeroUnicoMovimiento = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Cortes", item);
                    }
                }
            }
        }
    
        private void FixupDespachos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Despacho item in e.NewItems)
                {
                    item.MovimientoSalida = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Despachos", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Despacho item in e.OldItems)
                {
                    if (ReferenceEquals(item.MovimientoSalida, this))
                    {
                        item.MovimientoSalida = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Despachos", item);
                    }
                }
            }
        }
    
        private void FixupCorte1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Corte item in e.NewItems)
                {
                    item.PreparacionCorte = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Corte1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Corte item in e.OldItems)
                {
                    if (ReferenceEquals(item.PreparacionCorte, this))
                    {
                        item.PreparacionCorte = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Corte1", item);
                    }
                }
            }
        }

        #endregion

    }
}
