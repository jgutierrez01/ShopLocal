//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CorteSpool))]
    [KnownType(typeof(CorteSpoolPendiente))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(TipoMaterial))]
    [KnownType(typeof(MaterialSpool))]
    [KnownType(typeof(MaterialSpoolPendiente))]
    [KnownType(typeof(NumeroUnico))]
    [KnownType(typeof(ItemCodeEquivalente))]
    [KnownType(typeof(FamiliaAcero))]
    [Serializable]
    public partial class ItemCode: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ItemCodeID
        {
            get { return _itemCodeID; }
            set
            {
                if (_itemCodeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ItemCodeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _itemCodeID = value;
                    OnPropertyChanged("ItemCodeID");
                }
            }
        }
        private int _itemCodeID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int TipoMaterialID
        {
            get { return _tipoMaterialID; }
            set
            {
                if (_tipoMaterialID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoMaterialID", _tipoMaterialID);
                    if (!IsDeserializing)
                    {
                        if (TipoMaterial != null && TipoMaterial.TipoMaterialID != value)
                        {
                            TipoMaterial = null;
                        }
                    }
                    _tipoMaterialID = value;
                    OnPropertyChanged("TipoMaterialID");
                }
            }
        }
        private int _tipoMaterialID;
    
        [DataMember]
        public string Codigo
        {
            get { return _codigo; }
            set
            {
                if (_codigo != value)
                {
                    _codigo = value;
                    OnPropertyChanged("Codigo");
                }
            }
        }
        private string _codigo;
    
        [DataMember]
        public string ItemCodeCliente
        {
            get { return _itemCodeCliente; }
            set
            {
                if (_itemCodeCliente != value)
                {
                    _itemCodeCliente = value;
                    OnPropertyChanged("ItemCodeCliente");
                }
            }
        }
        private string _itemCodeCliente;
    
        [DataMember]
        public string DescripcionEspanol
        {
            get { return _descripcionEspanol; }
            set
            {
                if (_descripcionEspanol != value)
                {
                    _descripcionEspanol = value;
                    OnPropertyChanged("DescripcionEspanol");
                }
            }
        }
        private string _descripcionEspanol;
    
        [DataMember]
        public string DescripcionIngles
        {
            get { return _descripcionIngles; }
            set
            {
                if (_descripcionIngles != value)
                {
                    _descripcionIngles = value;
                    OnPropertyChanged("DescripcionIngles");
                }
            }
        }
        private string _descripcionIngles;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<decimal> Peso
        {
            get { return _peso; }
            set
            {
                if (_peso != value)
                {
                    _peso = value;
                    OnPropertyChanged("Peso");
                }
            }
        }
        private Nullable<decimal> _peso;
    
        [DataMember]
        public string DescripcionInterna
        {
            get { return _descripcionInterna; }
            set
            {
                if (_descripcionInterna != value)
                {
                    _descripcionInterna = value;
                    OnPropertyChanged("DescripcionInterna");
                }
            }
        }
        private string _descripcionInterna;
    
        [DataMember]
        public Nullable<decimal> Diametro1
        {
            get { return _diametro1; }
            set
            {
                if (_diametro1 != value)
                {
                    _diametro1 = value;
                    OnPropertyChanged("Diametro1");
                }
            }
        }
        private Nullable<decimal> _diametro1;
    
        [DataMember]
        public Nullable<decimal> Diametro2
        {
            get { return _diametro2; }
            set
            {
                if (_diametro2 != value)
                {
                    _diametro2 = value;
                    OnPropertyChanged("Diametro2");
                }
            }
        }
        private Nullable<decimal> _diametro2;
    
        [DataMember]
        public Nullable<int> FamiliaAceroID
        {
            get { return _familiaAceroID; }
            set
            {
                if (_familiaAceroID != value)
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAceroID", _familiaAceroID);
                    if (!IsDeserializing)
                    {
                        if (FamiliaAcero != null && FamiliaAcero.FamiliaAceroID != value)
                        {
                            FamiliaAcero = null;
                        }
                    }
                    _familiaAceroID = value;
                    OnPropertyChanged("FamiliaAceroID");
                }
            }
        }
        private Nullable<int> _familiaAceroID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CorteSpool> CorteSpool
        {
            get
            {
                if (_corteSpool == null)
                {
                    _corteSpool = new TrackableCollection<CorteSpool>();
                    _corteSpool.CollectionChanged += FixupCorteSpool;
                }
                return _corteSpool;
            }
            set
            {
                if (!ReferenceEquals(_corteSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_corteSpool != null)
                    {
                        _corteSpool.CollectionChanged -= FixupCorteSpool;
                    }
                    _corteSpool = value;
                    if (_corteSpool != null)
                    {
                        _corteSpool.CollectionChanged += FixupCorteSpool;
                    }
                    OnNavigationPropertyChanged("CorteSpool");
                }
            }
        }
        private TrackableCollection<CorteSpool> _corteSpool;
    
        [DataMember]
        public TrackableCollection<CorteSpoolPendiente> CorteSpoolPendiente
        {
            get
            {
                if (_corteSpoolPendiente == null)
                {
                    _corteSpoolPendiente = new TrackableCollection<CorteSpoolPendiente>();
                    _corteSpoolPendiente.CollectionChanged += FixupCorteSpoolPendiente;
                }
                return _corteSpoolPendiente;
            }
            set
            {
                if (!ReferenceEquals(_corteSpoolPendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_corteSpoolPendiente != null)
                    {
                        _corteSpoolPendiente.CollectionChanged -= FixupCorteSpoolPendiente;
                    }
                    _corteSpoolPendiente = value;
                    if (_corteSpoolPendiente != null)
                    {
                        _corteSpoolPendiente.CollectionChanged += FixupCorteSpoolPendiente;
                    }
                    OnNavigationPropertyChanged("CorteSpoolPendiente");
                }
            }
        }
        private TrackableCollection<CorteSpoolPendiente> _corteSpoolPendiente;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TipoMaterial TipoMaterial
        {
            get { return _tipoMaterial; }
            set
            {
                if (!ReferenceEquals(_tipoMaterial, value))
                {
                    var previousValue = _tipoMaterial;
                    _tipoMaterial = value;
                    FixupTipoMaterial(previousValue);
                    OnNavigationPropertyChanged("TipoMaterial");
                }
            }
        }
        private TipoMaterial _tipoMaterial;
    
        [DataMember]
        public TrackableCollection<MaterialSpool> MaterialSpool
        {
            get
            {
                if (_materialSpool == null)
                {
                    _materialSpool = new TrackableCollection<MaterialSpool>();
                    _materialSpool.CollectionChanged += FixupMaterialSpool;
                }
                return _materialSpool;
            }
            set
            {
                if (!ReferenceEquals(_materialSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_materialSpool != null)
                    {
                        _materialSpool.CollectionChanged -= FixupMaterialSpool;
                    }
                    _materialSpool = value;
                    if (_materialSpool != null)
                    {
                        _materialSpool.CollectionChanged += FixupMaterialSpool;
                    }
                    OnNavigationPropertyChanged("MaterialSpool");
                }
            }
        }
        private TrackableCollection<MaterialSpool> _materialSpool;
    
        [DataMember]
        public TrackableCollection<MaterialSpoolPendiente> MaterialSpoolPendiente
        {
            get
            {
                if (_materialSpoolPendiente == null)
                {
                    _materialSpoolPendiente = new TrackableCollection<MaterialSpoolPendiente>();
                    _materialSpoolPendiente.CollectionChanged += FixupMaterialSpoolPendiente;
                }
                return _materialSpoolPendiente;
            }
            set
            {
                if (!ReferenceEquals(_materialSpoolPendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_materialSpoolPendiente != null)
                    {
                        _materialSpoolPendiente.CollectionChanged -= FixupMaterialSpoolPendiente;
                    }
                    _materialSpoolPendiente = value;
                    if (_materialSpoolPendiente != null)
                    {
                        _materialSpoolPendiente.CollectionChanged += FixupMaterialSpoolPendiente;
                    }
                    OnNavigationPropertyChanged("MaterialSpoolPendiente");
                }
            }
        }
        private TrackableCollection<MaterialSpoolPendiente> _materialSpoolPendiente;
    
        [DataMember]
        public TrackableCollection<NumeroUnico> NumeroUnico
        {
            get
            {
                if (_numeroUnico == null)
                {
                    _numeroUnico = new TrackableCollection<NumeroUnico>();
                    _numeroUnico.CollectionChanged += FixupNumeroUnico;
                }
                return _numeroUnico;
            }
            set
            {
                if (!ReferenceEquals(_numeroUnico, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_numeroUnico != null)
                    {
                        _numeroUnico.CollectionChanged -= FixupNumeroUnico;
                    }
                    _numeroUnico = value;
                    if (_numeroUnico != null)
                    {
                        _numeroUnico.CollectionChanged += FixupNumeroUnico;
                    }
                    OnNavigationPropertyChanged("NumeroUnico");
                }
            }
        }
        private TrackableCollection<NumeroUnico> _numeroUnico;
    
        [DataMember]
        public TrackableCollection<ItemCodeEquivalente> ItemCodeEquivalente
        {
            get
            {
                if (_itemCodeEquivalente == null)
                {
                    _itemCodeEquivalente = new TrackableCollection<ItemCodeEquivalente>();
                    _itemCodeEquivalente.CollectionChanged += FixupItemCodeEquivalente;
                }
                return _itemCodeEquivalente;
            }
            set
            {
                if (!ReferenceEquals(_itemCodeEquivalente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_itemCodeEquivalente != null)
                    {
                        _itemCodeEquivalente.CollectionChanged -= FixupItemCodeEquivalente;
                    }
                    _itemCodeEquivalente = value;
                    if (_itemCodeEquivalente != null)
                    {
                        _itemCodeEquivalente.CollectionChanged += FixupItemCodeEquivalente;
                    }
                    OnNavigationPropertyChanged("ItemCodeEquivalente");
                }
            }
        }
        private TrackableCollection<ItemCodeEquivalente> _itemCodeEquivalente;
    
        [DataMember]
        public TrackableCollection<ItemCodeEquivalente> ItemCodeEquivalente1
        {
            get
            {
                if (_itemCodeEquivalente1 == null)
                {
                    _itemCodeEquivalente1 = new TrackableCollection<ItemCodeEquivalente>();
                    _itemCodeEquivalente1.CollectionChanged += FixupItemCodeEquivalente1;
                }
                return _itemCodeEquivalente1;
            }
            set
            {
                if (!ReferenceEquals(_itemCodeEquivalente1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_itemCodeEquivalente1 != null)
                    {
                        _itemCodeEquivalente1.CollectionChanged -= FixupItemCodeEquivalente1;
                    }
                    _itemCodeEquivalente1 = value;
                    if (_itemCodeEquivalente1 != null)
                    {
                        _itemCodeEquivalente1.CollectionChanged += FixupItemCodeEquivalente1;
                    }
                    OnNavigationPropertyChanged("ItemCodeEquivalente1");
                }
            }
        }
        private TrackableCollection<ItemCodeEquivalente> _itemCodeEquivalente1;
    
        [DataMember]
        public FamiliaAcero FamiliaAcero
        {
            get { return _familiaAcero; }
            set
            {
                if (!ReferenceEquals(_familiaAcero, value))
                {
                    var previousValue = _familiaAcero;
                    _familiaAcero = value;
                    FixupFamiliaAcero(previousValue);
                    OnNavigationPropertyChanged("FamiliaAcero");
                }
            }
        }
        private FamiliaAcero _familiaAcero;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_corteSpool != null)
    		{
    			_corteSpool.CollectionChanged -= FixupCorteSpool;
    			_corteSpool.CollectionChanged += FixupCorteSpool;
    			}
    			if (_corteSpoolPendiente != null)
    		{
    			_corteSpoolPendiente.CollectionChanged -= FixupCorteSpoolPendiente;
    			_corteSpoolPendiente.CollectionChanged += FixupCorteSpoolPendiente;
    			}
    			if (_materialSpool != null)
    		{
    			_materialSpool.CollectionChanged -= FixupMaterialSpool;
    			_materialSpool.CollectionChanged += FixupMaterialSpool;
    			}
    			if (_materialSpoolPendiente != null)
    		{
    			_materialSpoolPendiente.CollectionChanged -= FixupMaterialSpoolPendiente;
    			_materialSpoolPendiente.CollectionChanged += FixupMaterialSpoolPendiente;
    			}
    			if (_numeroUnico != null)
    		{
    			_numeroUnico.CollectionChanged -= FixupNumeroUnico;
    			_numeroUnico.CollectionChanged += FixupNumeroUnico;
    			}
    			if (_itemCodeEquivalente != null)
    		{
    			_itemCodeEquivalente.CollectionChanged -= FixupItemCodeEquivalente;
    			_itemCodeEquivalente.CollectionChanged += FixupItemCodeEquivalente;
    			}
    			if (_itemCodeEquivalente1 != null)
    		{
    			_itemCodeEquivalente1.CollectionChanged -= FixupItemCodeEquivalente1;
    			_itemCodeEquivalente1.CollectionChanged += FixupItemCodeEquivalente1;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            CorteSpool.Clear();
            CorteSpoolPendiente.Clear();
            Proyecto = null;
            TipoMaterial = null;
            MaterialSpool.Clear();
            MaterialSpoolPendiente.Clear();
            NumeroUnico.Clear();
            ItemCodeEquivalente.Clear();
            ItemCodeEquivalente1.Clear();
            FamiliaAcero = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ItemCode.Contains(this))
            {
                previousValue.ItemCode.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.ItemCode.Contains(this))
                {
                    Proyecto.ItemCode.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupTipoMaterial(TipoMaterial previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ItemCode.Contains(this))
            {
                previousValue.ItemCode.Remove(this);
            }
    
            if (TipoMaterial != null)
            {
                if (!TipoMaterial.ItemCode.Contains(this))
                {
                    TipoMaterial.ItemCode.Add(this);
                }
    
                TipoMaterialID = TipoMaterial.TipoMaterialID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoMaterial")
                    && (ChangeTracker.OriginalValues["TipoMaterial"] == TipoMaterial))
                {
                    ChangeTracker.OriginalValues.Remove("TipoMaterial");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoMaterial", previousValue);
                }
                if (TipoMaterial != null && !TipoMaterial.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoMaterial.StartTracking();
                }
            }
        }
    
        private void FixupFamiliaAcero(FamiliaAcero previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ItemCode.Contains(this))
            {
                previousValue.ItemCode.Remove(this);
            }
    
            if (FamiliaAcero != null)
            {
                if (!FamiliaAcero.ItemCode.Contains(this))
                {
                    FamiliaAcero.ItemCode.Add(this);
                }
    
                FamiliaAceroID = FamiliaAcero.FamiliaAceroID;
            }
            else if (!skipKeys)
            {
                FamiliaAceroID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FamiliaAcero")
                    && (ChangeTracker.OriginalValues["FamiliaAcero"] == FamiliaAcero))
                {
                    ChangeTracker.OriginalValues.Remove("FamiliaAcero");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero", previousValue);
                }
                if (FamiliaAcero != null && !FamiliaAcero.ChangeTracker.ChangeTrackingEnabled)
                {
                    FamiliaAcero.StartTracking();
                }
            }
        }
    
        private void FixupCorteSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CorteSpool item in e.NewItems)
                {
                    item.ItemCode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CorteSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CorteSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode, this))
                    {
                        item.ItemCode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CorteSpool", item);
                    }
                }
            }
        }
    
        private void FixupCorteSpoolPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CorteSpoolPendiente item in e.NewItems)
                {
                    item.ItemCode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CorteSpoolPendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CorteSpoolPendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode, this))
                    {
                        item.ItemCode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CorteSpoolPendiente", item);
                    }
                }
            }
        }
    
        private void FixupMaterialSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MaterialSpool item in e.NewItems)
                {
                    item.ItemCode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MaterialSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MaterialSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode, this))
                    {
                        item.ItemCode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MaterialSpool", item);
                    }
                }
            }
        }
    
        private void FixupMaterialSpoolPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MaterialSpoolPendiente item in e.NewItems)
                {
                    item.ItemCode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MaterialSpoolPendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MaterialSpoolPendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode, this))
                    {
                        item.ItemCode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MaterialSpoolPendiente", item);
                    }
                }
            }
        }
    
        private void FixupNumeroUnico(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (NumeroUnico item in e.NewItems)
                {
                    item.ItemCode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("NumeroUnico", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NumeroUnico item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode, this))
                    {
                        item.ItemCode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("NumeroUnico", item);
                    }
                }
            }
        }
    
        private void FixupItemCodeEquivalente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ItemCodeEquivalente item in e.NewItems)
                {
                    item.ItemCode = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ItemCodeEquivalente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ItemCodeEquivalente item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode, this))
                    {
                        item.ItemCode = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ItemCodeEquivalente", item);
                    }
                }
            }
        }
    
        private void FixupItemCodeEquivalente1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ItemCodeEquivalente item in e.NewItems)
                {
                    item.ItemCode1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ItemCodeEquivalente1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ItemCodeEquivalente item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemCode1, this))
                    {
                        item.ItemCode1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ItemCodeEquivalente1", item);
                    }
                }
            }
        }

        #endregion

    }
}
