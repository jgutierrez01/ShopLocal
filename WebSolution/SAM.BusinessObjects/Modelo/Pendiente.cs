//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CategoriaPendiente))]
    [KnownType(typeof(TipoPendiente))]
    [KnownType(typeof(Usuario))]
    [KnownType(typeof(PendienteDetalle))]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class Pendiente: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PendienteID
        {
            get { return _pendienteID; }
            set
            {
                if (_pendienteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PendienteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pendienteID = value;
                    OnPropertyChanged("PendienteID");
                }
            }
        }
        private int _pendienteID;
    
        [DataMember]
        public int CategoriaPendienteID
        {
            get { return _categoriaPendienteID; }
            set
            {
                if (_categoriaPendienteID != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoriaPendienteID", _categoriaPendienteID);
                    if (!IsDeserializing)
                    {
                        if (CategoriaPendiente != null && CategoriaPendiente.CategoriaPendienteID != value)
                        {
                            CategoriaPendiente = null;
                        }
                    }
                    _categoriaPendienteID = value;
                    OnPropertyChanged("CategoriaPendienteID");
                }
            }
        }
        private int _categoriaPendienteID;
    
        [DataMember]
        public int TipoPendienteID
        {
            get { return _tipoPendienteID; }
            set
            {
                if (_tipoPendienteID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoPendienteID", _tipoPendienteID);
                    if (!IsDeserializing)
                    {
                        if (TipoPendiente != null && TipoPendiente.TipoPendienteID != value)
                        {
                            TipoPendiente = null;
                        }
                    }
                    _tipoPendienteID = value;
                    OnPropertyChanged("TipoPendienteID");
                }
            }
        }
        private int _tipoPendienteID;
    
        [DataMember]
        public string Estatus
        {
            get { return _estatus; }
            set
            {
                if (_estatus != value)
                {
                    _estatus = value;
                    OnPropertyChanged("Estatus");
                }
            }
        }
        private string _estatus;
    
        [DataMember]
        public string Descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("Descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public System.DateTime FechaApertura
        {
            get { return _fechaApertura; }
            set
            {
                if (_fechaApertura != value)
                {
                    _fechaApertura = value;
                    OnPropertyChanged("FechaApertura");
                }
            }
        }
        private System.DateTime _fechaApertura;
    
        [DataMember]
        public System.Guid GeneradoPor
        {
            get { return _generadoPor; }
            set
            {
                if (_generadoPor != value)
                {
                    ChangeTracker.RecordOriginalValue("GeneradoPor", _generadoPor);
                    if (!IsDeserializing)
                    {
                        if (UsuarioGenera != null && UsuarioGenera.UserId != value)
                        {
                            UsuarioGenera = null;
                        }
                    }
                    _generadoPor = value;
                    OnPropertyChanged("GeneradoPor");
                }
            }
        }
        private System.Guid _generadoPor;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public string Titulo
        {
            get { return _titulo; }
            set
            {
                if (_titulo != value)
                {
                    _titulo = value;
                    OnPropertyChanged("Titulo");
                }
            }
        }
        private string _titulo;
    
        [DataMember]
        public System.Guid AsignadoA
        {
            get { return _asignadoA; }
            set
            {
                if (_asignadoA != value)
                {
                    ChangeTracker.RecordOriginalValue("AsignadoA", _asignadoA);
                    if (!IsDeserializing)
                    {
                        if (UsuarioResponsable != null && UsuarioResponsable.UserId != value)
                        {
                            UsuarioResponsable = null;
                        }
                    }
                    _asignadoA = value;
                    OnPropertyChanged("AsignadoA");
                }
            }
        }
        private System.Guid _asignadoA;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public CategoriaPendiente CategoriaPendiente
        {
            get { return _categoriaPendiente; }
            set
            {
                if (!ReferenceEquals(_categoriaPendiente, value))
                {
                    var previousValue = _categoriaPendiente;
                    _categoriaPendiente = value;
                    FixupCategoriaPendiente(previousValue);
                    OnNavigationPropertyChanged("CategoriaPendiente");
                }
            }
        }
        private CategoriaPendiente _categoriaPendiente;
    
        [DataMember]
        public TipoPendiente TipoPendiente
        {
            get { return _tipoPendiente; }
            set
            {
                if (!ReferenceEquals(_tipoPendiente, value))
                {
                    var previousValue = _tipoPendiente;
                    _tipoPendiente = value;
                    FixupTipoPendiente(previousValue);
                    OnNavigationPropertyChanged("TipoPendiente");
                }
            }
        }
        private TipoPendiente _tipoPendiente;
    
        [DataMember]
        public Usuario UsuarioGenera
        {
            get { return _usuarioGenera; }
            set
            {
                if (!ReferenceEquals(_usuarioGenera, value))
                {
                    var previousValue = _usuarioGenera;
                    _usuarioGenera = value;
                    FixupUsuarioGenera(previousValue);
                    OnNavigationPropertyChanged("UsuarioGenera");
                }
            }
        }
        private Usuario _usuarioGenera;
    
        [DataMember]
        public TrackableCollection<PendienteDetalle> PendienteDetalle
        {
            get
            {
                if (_pendienteDetalle == null)
                {
                    _pendienteDetalle = new TrackableCollection<PendienteDetalle>();
                    _pendienteDetalle.CollectionChanged += FixupPendienteDetalle;
                }
                return _pendienteDetalle;
            }
            set
            {
                if (!ReferenceEquals(_pendienteDetalle, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pendienteDetalle != null)
                    {
                        _pendienteDetalle.CollectionChanged -= FixupPendienteDetalle;
                    }
                    _pendienteDetalle = value;
                    if (_pendienteDetalle != null)
                    {
                        _pendienteDetalle.CollectionChanged += FixupPendienteDetalle;
                    }
                    OnNavigationPropertyChanged("PendienteDetalle");
                }
            }
        }
        private TrackableCollection<PendienteDetalle> _pendienteDetalle;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public Usuario UsuarioResponsable
        {
            get { return _usuarioResponsable; }
            set
            {
                if (!ReferenceEquals(_usuarioResponsable, value))
                {
                    var previousValue = _usuarioResponsable;
                    _usuarioResponsable = value;
                    FixupUsuarioResponsable(previousValue);
                    OnNavigationPropertyChanged("UsuarioResponsable");
                }
            }
        }
        private Usuario _usuarioResponsable;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_pendienteDetalle != null)
    		{
    			_pendienteDetalle.CollectionChanged -= FixupPendienteDetalle;
    			_pendienteDetalle.CollectionChanged += FixupPendienteDetalle;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            CategoriaPendiente = null;
            TipoPendiente = null;
            UsuarioGenera = null;
            PendienteDetalle.Clear();
            Proyecto = null;
            UsuarioResponsable = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCategoriaPendiente(CategoriaPendiente previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pendiente.Contains(this))
            {
                previousValue.Pendiente.Remove(this);
            }
    
            if (CategoriaPendiente != null)
            {
                if (!CategoriaPendiente.Pendiente.Contains(this))
                {
                    CategoriaPendiente.Pendiente.Add(this);
                }
    
                CategoriaPendienteID = CategoriaPendiente.CategoriaPendienteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CategoriaPendiente")
                    && (ChangeTracker.OriginalValues["CategoriaPendiente"] == CategoriaPendiente))
                {
                    ChangeTracker.OriginalValues.Remove("CategoriaPendiente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CategoriaPendiente", previousValue);
                }
                if (CategoriaPendiente != null && !CategoriaPendiente.ChangeTracker.ChangeTrackingEnabled)
                {
                    CategoriaPendiente.StartTracking();
                }
            }
        }
    
        private void FixupTipoPendiente(TipoPendiente previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pendiente.Contains(this))
            {
                previousValue.Pendiente.Remove(this);
            }
    
            if (TipoPendiente != null)
            {
                if (!TipoPendiente.Pendiente.Contains(this))
                {
                    TipoPendiente.Pendiente.Add(this);
                }
    
                TipoPendienteID = TipoPendiente.TipoPendienteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoPendiente")
                    && (ChangeTracker.OriginalValues["TipoPendiente"] == TipoPendiente))
                {
                    ChangeTracker.OriginalValues.Remove("TipoPendiente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoPendiente", previousValue);
                }
                if (TipoPendiente != null && !TipoPendiente.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoPendiente.StartTracking();
                }
            }
        }
    
        private void FixupUsuarioGenera(Usuario previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PendientesGenerados.Contains(this))
            {
                previousValue.PendientesGenerados.Remove(this);
            }
    
            if (UsuarioGenera != null)
            {
                if (!UsuarioGenera.PendientesGenerados.Contains(this))
                {
                    UsuarioGenera.PendientesGenerados.Add(this);
                }
    
                GeneradoPor = UsuarioGenera.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UsuarioGenera")
                    && (ChangeTracker.OriginalValues["UsuarioGenera"] == UsuarioGenera))
                {
                    ChangeTracker.OriginalValues.Remove("UsuarioGenera");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UsuarioGenera", previousValue);
                }
                if (UsuarioGenera != null && !UsuarioGenera.ChangeTracker.ChangeTrackingEnabled)
                {
                    UsuarioGenera.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pendiente.Contains(this))
            {
                previousValue.Pendiente.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.Pendiente.Contains(this))
                {
                    Proyecto.Pendiente.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupUsuarioResponsable(Usuario previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PendientesAsignados.Contains(this))
            {
                previousValue.PendientesAsignados.Remove(this);
            }
    
            if (UsuarioResponsable != null)
            {
                if (!UsuarioResponsable.PendientesAsignados.Contains(this))
                {
                    UsuarioResponsable.PendientesAsignados.Add(this);
                }
    
                AsignadoA = UsuarioResponsable.UserId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UsuarioResponsable")
                    && (ChangeTracker.OriginalValues["UsuarioResponsable"] == UsuarioResponsable))
                {
                    ChangeTracker.OriginalValues.Remove("UsuarioResponsable");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UsuarioResponsable", previousValue);
                }
                if (UsuarioResponsable != null && !UsuarioResponsable.ChangeTracker.ChangeTrackingEnabled)
                {
                    UsuarioResponsable.StartTracking();
                }
            }
        }
    
        private void FixupPendienteDetalle(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PendienteDetalle item in e.NewItems)
                {
                    item.Pendiente = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PendienteDetalle", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PendienteDetalle item in e.OldItems)
                {
                    if (ReferenceEquals(item.Pendiente, this))
                    {
                        item.Pendiente = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PendienteDetalle", item);
                    }
                }
            }
        }

        #endregion

    }
}
