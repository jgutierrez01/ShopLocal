//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CorteSpoolPendiente))]
    [KnownType(typeof(FamiliaAcero))]
    [KnownType(typeof(JuntaSpoolPendiente))]
    [KnownType(typeof(MaterialSpoolPendiente))]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class SpoolPendiente: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SpoolPendienteID
        {
            get { return _spoolPendienteID; }
            set
            {
                if (_spoolPendienteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SpoolPendienteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _spoolPendienteID = value;
                    OnPropertyChanged("SpoolPendienteID");
                }
            }
        }
        private int _spoolPendienteID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int FamiliaAcero1ID
        {
            get { return _familiaAcero1ID; }
            set
            {
                if (_familiaAcero1ID != value)
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero1ID", _familiaAcero1ID);
                    if (!IsDeserializing)
                    {
                        if (FamiliaAcero != null && FamiliaAcero.FamiliaAceroID != value)
                        {
                            FamiliaAcero = null;
                        }
                    }
                    _familiaAcero1ID = value;
                    OnPropertyChanged("FamiliaAcero1ID");
                }
            }
        }
        private int _familiaAcero1ID;
    
        [DataMember]
        public Nullable<int> FamiliaAcero2ID
        {
            get { return _familiaAcero2ID; }
            set
            {
                if (_familiaAcero2ID != value)
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero2ID", _familiaAcero2ID);
                    if (!IsDeserializing)
                    {
                        if (FamiliaAcero1 != null && FamiliaAcero1.FamiliaAceroID != value)
                        {
                            FamiliaAcero1 = null;
                        }
                    }
                    _familiaAcero2ID = value;
                    OnPropertyChanged("FamiliaAcero2ID");
                }
            }
        }
        private Nullable<int> _familiaAcero2ID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string Dibujo
        {
            get { return _dibujo; }
            set
            {
                if (_dibujo != value)
                {
                    _dibujo = value;
                    OnPropertyChanged("Dibujo");
                }
            }
        }
        private string _dibujo;
    
        [DataMember]
        public string Especificacion
        {
            get { return _especificacion; }
            set
            {
                if (_especificacion != value)
                {
                    _especificacion = value;
                    OnPropertyChanged("Especificacion");
                }
            }
        }
        private string _especificacion;
    
        [DataMember]
        public string Cedula
        {
            get { return _cedula; }
            set
            {
                if (_cedula != value)
                {
                    _cedula = value;
                    OnPropertyChanged("Cedula");
                }
            }
        }
        private string _cedula;
    
        [DataMember]
        public Nullable<decimal> Pdis
        {
            get { return _pdis; }
            set
            {
                if (_pdis != value)
                {
                    _pdis = value;
                    OnPropertyChanged("Pdis");
                }
            }
        }
        private Nullable<decimal> _pdis;
    
        [DataMember]
        public Nullable<decimal> DiametroPlano
        {
            get { return _diametroPlano; }
            set
            {
                if (_diametroPlano != value)
                {
                    _diametroPlano = value;
                    OnPropertyChanged("DiametroPlano");
                }
            }
        }
        private Nullable<decimal> _diametroPlano;
    
        [DataMember]
        public Nullable<decimal> Peso
        {
            get { return _peso; }
            set
            {
                if (_peso != value)
                {
                    _peso = value;
                    OnPropertyChanged("Peso");
                }
            }
        }
        private Nullable<decimal> _peso;
    
        [DataMember]
        public Nullable<decimal> Area
        {
            get { return _area; }
            set
            {
                if (_area != value)
                {
                    _area = value;
                    OnPropertyChanged("Area");
                }
            }
        }
        private Nullable<decimal> _area;
    
        [DataMember]
        public Nullable<int> PorcentajePnd
        {
            get { return _porcentajePnd; }
            set
            {
                if (_porcentajePnd != value)
                {
                    _porcentajePnd = value;
                    OnPropertyChanged("PorcentajePnd");
                }
            }
        }
        private Nullable<int> _porcentajePnd;
    
        [DataMember]
        public bool RequierePwht
        {
            get { return _requierePwht; }
            set
            {
                if (_requierePwht != value)
                {
                    _requierePwht = value;
                    OnPropertyChanged("RequierePwht");
                }
            }
        }
        private bool _requierePwht;
    
        [DataMember]
        public bool PendienteDocumental
        {
            get { return _pendienteDocumental; }
            set
            {
                if (_pendienteDocumental != value)
                {
                    _pendienteDocumental = value;
                    OnPropertyChanged("PendienteDocumental");
                }
            }
        }
        private bool _pendienteDocumental;
    
        [DataMember]
        public bool AprobadoParaCruce
        {
            get { return _aprobadoParaCruce; }
            set
            {
                if (_aprobadoParaCruce != value)
                {
                    _aprobadoParaCruce = value;
                    OnPropertyChanged("AprobadoParaCruce");
                }
            }
        }
        private bool _aprobadoParaCruce;
    
        [DataMember]
        public Nullable<int> Prioridad
        {
            get { return _prioridad; }
            set
            {
                if (_prioridad != value)
                {
                    _prioridad = value;
                    OnPropertyChanged("Prioridad");
                }
            }
        }
        private Nullable<int> _prioridad;
    
        [DataMember]
        public string Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    _revision = value;
                    OnPropertyChanged("Revision");
                }
            }
        }
        private string _revision;
    
        [DataMember]
        public string RevisionCliente
        {
            get { return _revisionCliente; }
            set
            {
                if (_revisionCliente != value)
                {
                    _revisionCliente = value;
                    OnPropertyChanged("RevisionCliente");
                }
            }
        }
        private string _revisionCliente;
    
        [DataMember]
        public string Segmento1
        {
            get { return _segmento1; }
            set
            {
                if (_segmento1 != value)
                {
                    _segmento1 = value;
                    OnPropertyChanged("Segmento1");
                }
            }
        }
        private string _segmento1;
    
        [DataMember]
        public string Segmento2
        {
            get { return _segmento2; }
            set
            {
                if (_segmento2 != value)
                {
                    _segmento2 = value;
                    OnPropertyChanged("Segmento2");
                }
            }
        }
        private string _segmento2;
    
        [DataMember]
        public string Segmento3
        {
            get { return _segmento3; }
            set
            {
                if (_segmento3 != value)
                {
                    _segmento3 = value;
                    OnPropertyChanged("Segmento3");
                }
            }
        }
        private string _segmento3;
    
        [DataMember]
        public string Segmento4
        {
            get { return _segmento4; }
            set
            {
                if (_segmento4 != value)
                {
                    _segmento4 = value;
                    OnPropertyChanged("Segmento4");
                }
            }
        }
        private string _segmento4;
    
        [DataMember]
        public string Segmento5
        {
            get { return _segmento5; }
            set
            {
                if (_segmento5 != value)
                {
                    _segmento5 = value;
                    OnPropertyChanged("Segmento5");
                }
            }
        }
        private string _segmento5;
    
        [DataMember]
        public string Segmento6
        {
            get { return _segmento6; }
            set
            {
                if (_segmento6 != value)
                {
                    _segmento6 = value;
                    OnPropertyChanged("Segmento6");
                }
            }
        }
        private string _segmento6;
    
        [DataMember]
        public string Segmento7
        {
            get { return _segmento7; }
            set
            {
                if (_segmento7 != value)
                {
                    _segmento7 = value;
                    OnPropertyChanged("Segmento7");
                }
            }
        }
        private string _segmento7;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string SistemaPintura
        {
            get { return _sistemaPintura; }
            set
            {
                if (_sistemaPintura != value)
                {
                    _sistemaPintura = value;
                    OnPropertyChanged("SistemaPintura");
                }
            }
        }
        private string _sistemaPintura;
    
        [DataMember]
        public string ColorPintura
        {
            get { return _colorPintura; }
            set
            {
                if (_colorPintura != value)
                {
                    _colorPintura = value;
                    OnPropertyChanged("ColorPintura");
                }
            }
        }
        private string _colorPintura;
    
        [DataMember]
        public string CodigoPintura
        {
            get { return _codigoPintura; }
            set
            {
                if (_codigoPintura != value)
                {
                    _codigoPintura = value;
                    OnPropertyChanged("CodigoPintura");
                }
            }
        }
        private string _codigoPintura;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CorteSpoolPendiente> CorteSpoolPendiente
        {
            get
            {
                if (_corteSpoolPendiente == null)
                {
                    _corteSpoolPendiente = new TrackableCollection<CorteSpoolPendiente>();
                    _corteSpoolPendiente.CollectionChanged += FixupCorteSpoolPendiente;
                }
                return _corteSpoolPendiente;
            }
            set
            {
                if (!ReferenceEquals(_corteSpoolPendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_corteSpoolPendiente != null)
                    {
                        _corteSpoolPendiente.CollectionChanged -= FixupCorteSpoolPendiente;
                    }
                    _corteSpoolPendiente = value;
                    if (_corteSpoolPendiente != null)
                    {
                        _corteSpoolPendiente.CollectionChanged += FixupCorteSpoolPendiente;
                    }
                    OnNavigationPropertyChanged("CorteSpoolPendiente");
                }
            }
        }
        private TrackableCollection<CorteSpoolPendiente> _corteSpoolPendiente;
    
        [DataMember]
        public FamiliaAcero FamiliaAcero
        {
            get { return _familiaAcero; }
            set
            {
                if (!ReferenceEquals(_familiaAcero, value))
                {
                    var previousValue = _familiaAcero;
                    _familiaAcero = value;
                    FixupFamiliaAcero(previousValue);
                    OnNavigationPropertyChanged("FamiliaAcero");
                }
            }
        }
        private FamiliaAcero _familiaAcero;
    
        [DataMember]
        public FamiliaAcero FamiliaAcero1
        {
            get { return _familiaAcero1; }
            set
            {
                if (!ReferenceEquals(_familiaAcero1, value))
                {
                    var previousValue = _familiaAcero1;
                    _familiaAcero1 = value;
                    FixupFamiliaAcero1(previousValue);
                    OnNavigationPropertyChanged("FamiliaAcero1");
                }
            }
        }
        private FamiliaAcero _familiaAcero1;
    
        [DataMember]
        public TrackableCollection<JuntaSpoolPendiente> JuntaSpoolPendiente
        {
            get
            {
                if (_juntaSpoolPendiente == null)
                {
                    _juntaSpoolPendiente = new TrackableCollection<JuntaSpoolPendiente>();
                    _juntaSpoolPendiente.CollectionChanged += FixupJuntaSpoolPendiente;
                }
                return _juntaSpoolPendiente;
            }
            set
            {
                if (!ReferenceEquals(_juntaSpoolPendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_juntaSpoolPendiente != null)
                    {
                        _juntaSpoolPendiente.CollectionChanged -= FixupJuntaSpoolPendiente;
                    }
                    _juntaSpoolPendiente = value;
                    if (_juntaSpoolPendiente != null)
                    {
                        _juntaSpoolPendiente.CollectionChanged += FixupJuntaSpoolPendiente;
                    }
                    OnNavigationPropertyChanged("JuntaSpoolPendiente");
                }
            }
        }
        private TrackableCollection<JuntaSpoolPendiente> _juntaSpoolPendiente;
    
        [DataMember]
        public TrackableCollection<MaterialSpoolPendiente> MaterialSpoolPendiente
        {
            get
            {
                if (_materialSpoolPendiente == null)
                {
                    _materialSpoolPendiente = new TrackableCollection<MaterialSpoolPendiente>();
                    _materialSpoolPendiente.CollectionChanged += FixupMaterialSpoolPendiente;
                }
                return _materialSpoolPendiente;
            }
            set
            {
                if (!ReferenceEquals(_materialSpoolPendiente, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_materialSpoolPendiente != null)
                    {
                        _materialSpoolPendiente.CollectionChanged -= FixupMaterialSpoolPendiente;
                    }
                    _materialSpoolPendiente = value;
                    if (_materialSpoolPendiente != null)
                    {
                        _materialSpoolPendiente.CollectionChanged += FixupMaterialSpoolPendiente;
                    }
                    OnNavigationPropertyChanged("MaterialSpoolPendiente");
                }
            }
        }
        private TrackableCollection<MaterialSpoolPendiente> _materialSpoolPendiente;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_corteSpoolPendiente != null)
    		{
    			_corteSpoolPendiente.CollectionChanged -= FixupCorteSpoolPendiente;
    			_corteSpoolPendiente.CollectionChanged += FixupCorteSpoolPendiente;
    			}
    			if (_juntaSpoolPendiente != null)
    		{
    			_juntaSpoolPendiente.CollectionChanged -= FixupJuntaSpoolPendiente;
    			_juntaSpoolPendiente.CollectionChanged += FixupJuntaSpoolPendiente;
    			}
    			if (_materialSpoolPendiente != null)
    		{
    			_materialSpoolPendiente.CollectionChanged -= FixupMaterialSpoolPendiente;
    			_materialSpoolPendiente.CollectionChanged += FixupMaterialSpoolPendiente;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            CorteSpoolPendiente.Clear();
            FamiliaAcero = null;
            FamiliaAcero1 = null;
            JuntaSpoolPendiente.Clear();
            MaterialSpoolPendiente.Clear();
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupFamiliaAcero(FamiliaAcero previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpoolPendiente.Contains(this))
            {
                previousValue.SpoolPendiente.Remove(this);
            }
    
            if (FamiliaAcero != null)
            {
                if (!FamiliaAcero.SpoolPendiente.Contains(this))
                {
                    FamiliaAcero.SpoolPendiente.Add(this);
                }
    
                FamiliaAcero1ID = FamiliaAcero.FamiliaAceroID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FamiliaAcero")
                    && (ChangeTracker.OriginalValues["FamiliaAcero"] == FamiliaAcero))
                {
                    ChangeTracker.OriginalValues.Remove("FamiliaAcero");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero", previousValue);
                }
                if (FamiliaAcero != null && !FamiliaAcero.ChangeTracker.ChangeTrackingEnabled)
                {
                    FamiliaAcero.StartTracking();
                }
            }
        }
    
        private void FixupFamiliaAcero1(FamiliaAcero previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (FamiliaAcero1 != null)
            {
                FamiliaAcero2ID = FamiliaAcero1.FamiliaAceroID;
            }
    
            else if (!skipKeys)
            {
                FamiliaAcero2ID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FamiliaAcero1")
                    && (ChangeTracker.OriginalValues["FamiliaAcero1"] == FamiliaAcero1))
                {
                    ChangeTracker.OriginalValues.Remove("FamiliaAcero1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero1", previousValue);
                }
                if (FamiliaAcero1 != null && !FamiliaAcero1.ChangeTracker.ChangeTrackingEnabled)
                {
                    FamiliaAcero1.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SpoolPendiente.Contains(this))
            {
                previousValue.SpoolPendiente.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.SpoolPendiente.Contains(this))
                {
                    Proyecto.SpoolPendiente.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupCorteSpoolPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CorteSpoolPendiente item in e.NewItems)
                {
                    item.SpoolPendiente = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CorteSpoolPendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CorteSpoolPendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.SpoolPendiente, this))
                    {
                        item.SpoolPendiente = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CorteSpoolPendiente", item);
                    }
                }
            }
        }
    
        private void FixupJuntaSpoolPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (JuntaSpoolPendiente item in e.NewItems)
                {
                    item.SpoolPendiente = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("JuntaSpoolPendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JuntaSpoolPendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.SpoolPendiente, this))
                    {
                        item.SpoolPendiente = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("JuntaSpoolPendiente", item);
                    }
                }
            }
        }
    
        private void FixupMaterialSpoolPendiente(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MaterialSpoolPendiente item in e.NewItems)
                {
                    item.SpoolPendiente = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MaterialSpoolPendiente", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MaterialSpoolPendiente item in e.OldItems)
                {
                    if (ReferenceEquals(item.SpoolPendiente, this))
                    {
                        item.SpoolPendiente = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MaterialSpoolPendiente", item);
                    }
                }
            }
        }

        #endregion

    }
}
