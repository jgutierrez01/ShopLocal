//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Maquina))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(Soldador))]
    [KnownType(typeof(Taller))]
    [KnownType(typeof(Tubero))]
    [KnownType(typeof(UbicacionFisica))]
    [KnownType(typeof(Consumible))]
    [KnownType(typeof(Cuadrante))]
    [KnownType(typeof(Cortador))]
    [KnownType(typeof(Despachador))]
    [KnownType(typeof(Destino))]
    [KnownType(typeof(Inspector))]
    [Serializable]
    public partial class Patio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PatioID
        {
            get { return _patioID; }
            set
            {
                if (_patioID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PatioID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _patioID = value;
                    OnPropertyChanged("PatioID");
                }
            }
        }
        private int _patioID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string Propietario
        {
            get { return _propietario; }
            set
            {
                if (_propietario != value)
                {
                    _propietario = value;
                    OnPropertyChanged("Propietario");
                }
            }
        }
        private string _propietario;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string Descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("Descripcion");
                }
            }
        }
        private string _descripcion;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Maquina> Maquina
        {
            get
            {
                if (_maquina == null)
                {
                    _maquina = new TrackableCollection<Maquina>();
                    _maquina.CollectionChanged += FixupMaquina;
                }
                return _maquina;
            }
            set
            {
                if (!ReferenceEquals(_maquina, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_maquina != null)
                    {
                        _maquina.CollectionChanged -= FixupMaquina;
                    }
                    _maquina = value;
                    if (_maquina != null)
                    {
                        _maquina.CollectionChanged += FixupMaquina;
                    }
                    OnNavigationPropertyChanged("Maquina");
                }
            }
        }
        private TrackableCollection<Maquina> _maquina;
    
        [DataMember]
        public TrackableCollection<Proyecto> Proyecto
        {
            get
            {
                if (_proyecto == null)
                {
                    _proyecto = new TrackableCollection<Proyecto>();
                    _proyecto.CollectionChanged += FixupProyecto;
                }
                return _proyecto;
            }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_proyecto != null)
                    {
                        _proyecto.CollectionChanged -= FixupProyecto;
                    }
                    _proyecto = value;
                    if (_proyecto != null)
                    {
                        _proyecto.CollectionChanged += FixupProyecto;
                    }
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private TrackableCollection<Proyecto> _proyecto;
    
        [DataMember]
        public TrackableCollection<Soldador> Soldador
        {
            get
            {
                if (_soldador == null)
                {
                    _soldador = new TrackableCollection<Soldador>();
                    _soldador.CollectionChanged += FixupSoldador;
                }
                return _soldador;
            }
            set
            {
                if (!ReferenceEquals(_soldador, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_soldador != null)
                    {
                        _soldador.CollectionChanged -= FixupSoldador;
                    }
                    _soldador = value;
                    if (_soldador != null)
                    {
                        _soldador.CollectionChanged += FixupSoldador;
                    }
                    OnNavigationPropertyChanged("Soldador");
                }
            }
        }
        private TrackableCollection<Soldador> _soldador;
    
        [DataMember]
        public TrackableCollection<Taller> Taller
        {
            get
            {
                if (_taller == null)
                {
                    _taller = new TrackableCollection<Taller>();
                    _taller.CollectionChanged += FixupTaller;
                }
                return _taller;
            }
            set
            {
                if (!ReferenceEquals(_taller, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taller != null)
                    {
                        _taller.CollectionChanged -= FixupTaller;
                    }
                    _taller = value;
                    if (_taller != null)
                    {
                        _taller.CollectionChanged += FixupTaller;
                    }
                    OnNavigationPropertyChanged("Taller");
                }
            }
        }
        private TrackableCollection<Taller> _taller;
    
        [DataMember]
        public TrackableCollection<Tubero> Tubero
        {
            get
            {
                if (_tubero == null)
                {
                    _tubero = new TrackableCollection<Tubero>();
                    _tubero.CollectionChanged += FixupTubero;
                }
                return _tubero;
            }
            set
            {
                if (!ReferenceEquals(_tubero, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tubero != null)
                    {
                        _tubero.CollectionChanged -= FixupTubero;
                    }
                    _tubero = value;
                    if (_tubero != null)
                    {
                        _tubero.CollectionChanged += FixupTubero;
                    }
                    OnNavigationPropertyChanged("Tubero");
                }
            }
        }
        private TrackableCollection<Tubero> _tubero;
    
        [DataMember]
        public TrackableCollection<UbicacionFisica> UbicacionFisica
        {
            get
            {
                if (_ubicacionFisica == null)
                {
                    _ubicacionFisica = new TrackableCollection<UbicacionFisica>();
                    _ubicacionFisica.CollectionChanged += FixupUbicacionFisica;
                }
                return _ubicacionFisica;
            }
            set
            {
                if (!ReferenceEquals(_ubicacionFisica, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ubicacionFisica != null)
                    {
                        _ubicacionFisica.CollectionChanged -= FixupUbicacionFisica;
                    }
                    _ubicacionFisica = value;
                    if (_ubicacionFisica != null)
                    {
                        _ubicacionFisica.CollectionChanged += FixupUbicacionFisica;
                    }
                    OnNavigationPropertyChanged("UbicacionFisica");
                }
            }
        }
        private TrackableCollection<UbicacionFisica> _ubicacionFisica;
    
        [DataMember]
        public TrackableCollection<Consumible> Consumible
        {
            get
            {
                if (_consumible == null)
                {
                    _consumible = new TrackableCollection<Consumible>();
                    _consumible.CollectionChanged += FixupConsumible;
                }
                return _consumible;
            }
            set
            {
                if (!ReferenceEquals(_consumible, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_consumible != null)
                    {
                        _consumible.CollectionChanged -= FixupConsumible;
                    }
                    _consumible = value;
                    if (_consumible != null)
                    {
                        _consumible.CollectionChanged += FixupConsumible;
                    }
                    OnNavigationPropertyChanged("Consumible");
                }
            }
        }
        private TrackableCollection<Consumible> _consumible;
    
        [DataMember]
        public TrackableCollection<Cuadrante> Cuadrante
        {
            get
            {
                if (_cuadrante == null)
                {
                    _cuadrante = new TrackableCollection<Cuadrante>();
                    _cuadrante.CollectionChanged += FixupCuadrante;
                }
                return _cuadrante;
            }
            set
            {
                if (!ReferenceEquals(_cuadrante, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cuadrante != null)
                    {
                        _cuadrante.CollectionChanged -= FixupCuadrante;
                    }
                    _cuadrante = value;
                    if (_cuadrante != null)
                    {
                        _cuadrante.CollectionChanged += FixupCuadrante;
                    }
                    OnNavigationPropertyChanged("Cuadrante");
                }
            }
        }
        private TrackableCollection<Cuadrante> _cuadrante;
    
        [DataMember]
        public TrackableCollection<Cortador> Cortador
        {
            get
            {
                if (_cortador == null)
                {
                    _cortador = new TrackableCollection<Cortador>();
                    _cortador.CollectionChanged += FixupCortador;
                }
                return _cortador;
            }
            set
            {
                if (!ReferenceEquals(_cortador, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cortador != null)
                    {
                        _cortador.CollectionChanged -= FixupCortador;
                    }
                    _cortador = value;
                    if (_cortador != null)
                    {
                        _cortador.CollectionChanged += FixupCortador;
                    }
                    OnNavigationPropertyChanged("Cortador");
                }
            }
        }
        private TrackableCollection<Cortador> _cortador;
    
        [DataMember]
        public TrackableCollection<Despachador> Despachador
        {
            get
            {
                if (_despachador == null)
                {
                    _despachador = new TrackableCollection<Despachador>();
                    _despachador.CollectionChanged += FixupDespachador;
                }
                return _despachador;
            }
            set
            {
                if (!ReferenceEquals(_despachador, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_despachador != null)
                    {
                        _despachador.CollectionChanged -= FixupDespachador;
                    }
                    _despachador = value;
                    if (_despachador != null)
                    {
                        _despachador.CollectionChanged += FixupDespachador;
                    }
                    OnNavigationPropertyChanged("Despachador");
                }
            }
        }
        private TrackableCollection<Despachador> _despachador;
    
        [DataMember]
        public TrackableCollection<Destino> Destino
        {
            get
            {
                if (_destino == null)
                {
                    _destino = new TrackableCollection<Destino>();
                    _destino.CollectionChanged += FixupDestino;
                }
                return _destino;
            }
            set
            {
                if (!ReferenceEquals(_destino, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_destino != null)
                    {
                        _destino.CollectionChanged -= FixupDestino;
                    }
                    _destino = value;
                    if (_destino != null)
                    {
                        _destino.CollectionChanged += FixupDestino;
                    }
                    OnNavigationPropertyChanged("Destino");
                }
            }
        }
        private TrackableCollection<Destino> _destino;
    
        [DataMember]
        public TrackableCollection<Inspector> Inspector
        {
            get
            {
                if (_inspector == null)
                {
                    _inspector = new TrackableCollection<Inspector>();
                    _inspector.CollectionChanged += FixupInspector;
                }
                return _inspector;
            }
            set
            {
                if (!ReferenceEquals(_inspector, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_inspector != null)
                    {
                        _inspector.CollectionChanged -= FixupInspector;
                    }
                    _inspector = value;
                    if (_inspector != null)
                    {
                        _inspector.CollectionChanged += FixupInspector;
                    }
                    OnNavigationPropertyChanged("Inspector");
                }
            }
        }
        private TrackableCollection<Inspector> _inspector;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_maquina != null)
    		{
    			_maquina.CollectionChanged -= FixupMaquina;
    			_maquina.CollectionChanged += FixupMaquina;
    			}
    			if (_proyecto != null)
    		{
    			_proyecto.CollectionChanged -= FixupProyecto;
    			_proyecto.CollectionChanged += FixupProyecto;
    			}
    			if (_soldador != null)
    		{
    			_soldador.CollectionChanged -= FixupSoldador;
    			_soldador.CollectionChanged += FixupSoldador;
    			}
    			if (_taller != null)
    		{
    			_taller.CollectionChanged -= FixupTaller;
    			_taller.CollectionChanged += FixupTaller;
    			}
    			if (_tubero != null)
    		{
    			_tubero.CollectionChanged -= FixupTubero;
    			_tubero.CollectionChanged += FixupTubero;
    			}
    			if (_ubicacionFisica != null)
    		{
    			_ubicacionFisica.CollectionChanged -= FixupUbicacionFisica;
    			_ubicacionFisica.CollectionChanged += FixupUbicacionFisica;
    			}
    			if (_consumible != null)
    		{
    			_consumible.CollectionChanged -= FixupConsumible;
    			_consumible.CollectionChanged += FixupConsumible;
    			}
    			if (_cuadrante != null)
    		{
    			_cuadrante.CollectionChanged -= FixupCuadrante;
    			_cuadrante.CollectionChanged += FixupCuadrante;
    			}
    			if (_cortador != null)
    		{
    			_cortador.CollectionChanged -= FixupCortador;
    			_cortador.CollectionChanged += FixupCortador;
    			}
    			if (_despachador != null)
    		{
    			_despachador.CollectionChanged -= FixupDespachador;
    			_despachador.CollectionChanged += FixupDespachador;
    			}
    			if (_destino != null)
    		{
    			_destino.CollectionChanged -= FixupDestino;
    			_destino.CollectionChanged += FixupDestino;
    			}
    			if (_inspector != null)
    		{
    			_inspector.CollectionChanged -= FixupInspector;
    			_inspector.CollectionChanged += FixupInspector;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Maquina.Clear();
            Proyecto.Clear();
            Soldador.Clear();
            Taller.Clear();
            Tubero.Clear();
            UbicacionFisica.Clear();
            Consumible.Clear();
            Cuadrante.Clear();
            Cortador.Clear();
            Despachador.Clear();
            Destino.Clear();
            Inspector.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupMaquina(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Maquina item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Maquina", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Maquina item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Maquina", item);
                    }
                }
            }
        }
    
        private void FixupProyecto(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Proyecto item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Proyecto", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Proyecto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Proyecto", item);
                    }
                }
            }
        }
    
        private void FixupSoldador(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Soldador item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Soldador", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Soldador item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Soldador", item);
                    }
                }
            }
        }
    
        private void FixupTaller(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Taller item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Taller", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Taller item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Taller", item);
                    }
                }
            }
        }
    
        private void FixupTubero(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tubero item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Tubero", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tubero item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Tubero", item);
                    }
                }
            }
        }
    
        private void FixupUbicacionFisica(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UbicacionFisica item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("UbicacionFisica", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UbicacionFisica item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("UbicacionFisica", item);
                    }
                }
            }
        }
    
        private void FixupConsumible(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Consumible item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Consumible", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Consumible item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Consumible", item);
                    }
                }
            }
        }
    
        private void FixupCuadrante(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Cuadrante item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Cuadrante", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cuadrante item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Cuadrante", item);
                    }
                }
            }
        }
    
        private void FixupCortador(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Cortador item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Cortador", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cortador item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Cortador", item);
                    }
                }
            }
        }
    
        private void FixupDespachador(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Despachador item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Despachador", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Despachador item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Despachador", item);
                    }
                }
            }
        }
    
        private void FixupDestino(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Destino item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Destino", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Destino item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Destino", item);
                    }
                }
            }
        }
    
        private void FixupInspector(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Inspector item in e.NewItems)
                {
                    item.Patio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Inspector", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Inspector item in e.OldItems)
                {
                    if (ReferenceEquals(item.Patio, this))
                    {
                        item.Patio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Inspector", item);
                    }
                }
            }
        }

        #endregion

    }
}
