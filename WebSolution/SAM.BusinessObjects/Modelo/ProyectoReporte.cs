//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(TipoReporteProyecto))]
    [Serializable]
    public partial class ProyectoReporte: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProyectoReporteID
        {
            get { return _proyectoReporteID; }
            set
            {
                if (_proyectoReporteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProyectoReporteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _proyectoReporteID = value;
                    OnPropertyChanged("ProyectoReporteID");
                }
            }
        }
        private int _proyectoReporteID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int TipoReporteProyectoID
        {
            get { return _tipoReporteProyectoID; }
            set
            {
                if (_tipoReporteProyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoReporteProyectoID", _tipoReporteProyectoID);
                    if (!IsDeserializing)
                    {
                        if (TipoReporteProyecto != null && TipoReporteProyecto.TipoReporteProyectoID != value)
                        {
                            TipoReporteProyecto = null;
                        }
                    }
                    _tipoReporteProyectoID = value;
                    OnPropertyChanged("TipoReporteProyectoID");
                }
            }
        }
        private int _tipoReporteProyectoID;
    
        [DataMember]
        public string RutaEspaniol
        {
            get { return _rutaEspaniol; }
            set
            {
                if (_rutaEspaniol != value)
                {
                    _rutaEspaniol = value;
                    OnPropertyChanged("RutaEspaniol");
                }
            }
        }
        private string _rutaEspaniol;
    
        [DataMember]
        public string RutaIngles
        {
            get { return _rutaIngles; }
            set
            {
                if (_rutaIngles != value)
                {
                    _rutaIngles = value;
                    OnPropertyChanged("RutaIngles");
                }
            }
        }
        private string _rutaIngles;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TipoReporteProyecto TipoReporteProyecto
        {
            get { return _tipoReporteProyecto; }
            set
            {
                if (!ReferenceEquals(_tipoReporteProyecto, value))
                {
                    var previousValue = _tipoReporteProyecto;
                    _tipoReporteProyecto = value;
                    FixupTipoReporteProyecto(previousValue);
                    OnNavigationPropertyChanged("TipoReporteProyecto");
                }
            }
        }
        private TipoReporteProyecto _tipoReporteProyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
            TipoReporteProyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProyectoReporte.Contains(this))
            {
                previousValue.ProyectoReporte.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.ProyectoReporte.Contains(this))
                {
                    Proyecto.ProyectoReporte.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupTipoReporteProyecto(TipoReporteProyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProyectoReporte.Contains(this))
            {
                previousValue.ProyectoReporte.Remove(this);
            }
    
            if (TipoReporteProyecto != null)
            {
                if (!TipoReporteProyecto.ProyectoReporte.Contains(this))
                {
                    TipoReporteProyecto.ProyectoReporte.Add(this);
                }
    
                TipoReporteProyectoID = TipoReporteProyecto.TipoReporteProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoReporteProyecto")
                    && (ChangeTracker.OriginalValues["TipoReporteProyecto"] == TipoReporteProyecto))
                {
                    ChangeTracker.OriginalValues.Remove("TipoReporteProyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoReporteProyecto", previousValue);
                }
                if (TipoReporteProyecto != null && !TipoReporteProyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoReporteProyecto.StartTracking();
                }
            }
        }

        #endregion

    }
}
