//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SpoolPendiente))]
    [KnownType(typeof(ItemCode))]
    [Serializable]
    public partial class MaterialSpoolPendiente: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MaterialSpoolPendienteID
        {
            get { return _materialSpoolPendienteID; }
            set
            {
                if (_materialSpoolPendienteID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MaterialSpoolPendienteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _materialSpoolPendienteID = value;
                    OnPropertyChanged("MaterialSpoolPendienteID");
                }
            }
        }
        private int _materialSpoolPendienteID;
    
        [DataMember]
        public int SpoolPendienteID
        {
            get { return _spoolPendienteID; }
            set
            {
                if (_spoolPendienteID != value)
                {
                    ChangeTracker.RecordOriginalValue("SpoolPendienteID", _spoolPendienteID);
                    if (!IsDeserializing)
                    {
                        if (SpoolPendiente != null && SpoolPendiente.SpoolPendienteID != value)
                        {
                            SpoolPendiente = null;
                        }
                    }
                    _spoolPendienteID = value;
                    OnPropertyChanged("SpoolPendienteID");
                }
            }
        }
        private int _spoolPendienteID;
    
        [DataMember]
        public int ItemCodeID
        {
            get { return _itemCodeID; }
            set
            {
                if (_itemCodeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ItemCodeID", _itemCodeID);
                    if (!IsDeserializing)
                    {
                        if (ItemCode != null && ItemCode.ItemCodeID != value)
                        {
                            ItemCode = null;
                        }
                    }
                    _itemCodeID = value;
                    OnPropertyChanged("ItemCodeID");
                }
            }
        }
        private int _itemCodeID;
    
        [DataMember]
        public decimal Diametro1
        {
            get { return _diametro1; }
            set
            {
                if (_diametro1 != value)
                {
                    _diametro1 = value;
                    OnPropertyChanged("Diametro1");
                }
            }
        }
        private decimal _diametro1;
    
        [DataMember]
        public decimal Diametro2
        {
            get { return _diametro2; }
            set
            {
                if (_diametro2 != value)
                {
                    _diametro2 = value;
                    OnPropertyChanged("Diametro2");
                }
            }
        }
        private decimal _diametro2;
    
        [DataMember]
        public string Etiqueta
        {
            get { return _etiqueta; }
            set
            {
                if (_etiqueta != value)
                {
                    _etiqueta = value;
                    OnPropertyChanged("Etiqueta");
                }
            }
        }
        private string _etiqueta;
    
        [DataMember]
        public int Cantidad
        {
            get { return _cantidad; }
            set
            {
                if (_cantidad != value)
                {
                    _cantidad = value;
                    OnPropertyChanged("Cantidad");
                }
            }
        }
        private int _cantidad;
    
        [DataMember]
        public Nullable<decimal> Peso
        {
            get { return _peso; }
            set
            {
                if (_peso != value)
                {
                    _peso = value;
                    OnPropertyChanged("Peso");
                }
            }
        }
        private Nullable<decimal> _peso;
    
        [DataMember]
        public Nullable<decimal> Area
        {
            get { return _area; }
            set
            {
                if (_area != value)
                {
                    _area = value;
                    OnPropertyChanged("Area");
                }
            }
        }
        private Nullable<decimal> _area;
    
        [DataMember]
        public string Especificacion
        {
            get { return _especificacion; }
            set
            {
                if (_especificacion != value)
                {
                    _especificacion = value;
                    OnPropertyChanged("Especificacion");
                }
            }
        }
        private string _especificacion;
    
        [DataMember]
        public string Grupo
        {
            get { return _grupo; }
            set
            {
                if (_grupo != value)
                {
                    _grupo = value;
                    OnPropertyChanged("Grupo");
                }
            }
        }
        private string _grupo;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string DescripcionMaterial
        {
            get { return _descripcionMaterial; }
            set
            {
                if (_descripcionMaterial != value)
                {
                    _descripcionMaterial = value;
                    OnPropertyChanged("DescripcionMaterial");
                }
            }
        }
        private string _descripcionMaterial;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public SpoolPendiente SpoolPendiente
        {
            get { return _spoolPendiente; }
            set
            {
                if (!ReferenceEquals(_spoolPendiente, value))
                {
                    var previousValue = _spoolPendiente;
                    _spoolPendiente = value;
                    FixupSpoolPendiente(previousValue);
                    OnNavigationPropertyChanged("SpoolPendiente");
                }
            }
        }
        private SpoolPendiente _spoolPendiente;
    
        [DataMember]
        public ItemCode ItemCode
        {
            get { return _itemCode; }
            set
            {
                if (!ReferenceEquals(_itemCode, value))
                {
                    var previousValue = _itemCode;
                    _itemCode = value;
                    FixupItemCode(previousValue);
                    OnNavigationPropertyChanged("ItemCode");
                }
            }
        }
        private ItemCode _itemCode;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            SpoolPendiente = null;
            ItemCode = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSpoolPendiente(SpoolPendiente previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MaterialSpoolPendiente.Contains(this))
            {
                previousValue.MaterialSpoolPendiente.Remove(this);
            }
    
            if (SpoolPendiente != null)
            {
                if (!SpoolPendiente.MaterialSpoolPendiente.Contains(this))
                {
                    SpoolPendiente.MaterialSpoolPendiente.Add(this);
                }
    
                SpoolPendienteID = SpoolPendiente.SpoolPendienteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SpoolPendiente")
                    && (ChangeTracker.OriginalValues["SpoolPendiente"] == SpoolPendiente))
                {
                    ChangeTracker.OriginalValues.Remove("SpoolPendiente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SpoolPendiente", previousValue);
                }
                if (SpoolPendiente != null && !SpoolPendiente.ChangeTracker.ChangeTrackingEnabled)
                {
                    SpoolPendiente.StartTracking();
                }
            }
        }
    
        private void FixupItemCode(ItemCode previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MaterialSpoolPendiente.Contains(this))
            {
                previousValue.MaterialSpoolPendiente.Remove(this);
            }
    
            if (ItemCode != null)
            {
                if (!ItemCode.MaterialSpoolPendiente.Contains(this))
                {
                    ItemCode.MaterialSpoolPendiente.Add(this);
                }
    
                ItemCodeID = ItemCode.ItemCodeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ItemCode")
                    && (ChangeTracker.OriginalValues["ItemCode"] == ItemCode))
                {
                    ChangeTracker.OriginalValues.Remove("ItemCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ItemCode", previousValue);
                }
                if (ItemCode != null && !ItemCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    ItemCode.StartTracking();
                }
            }
        }

        #endregion

    }
}
