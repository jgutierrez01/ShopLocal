//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class ProyectoDossier: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProyectoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public bool ReporteInspeccionVisual
        {
            get { return _reporteInspeccionVisual; }
            set
            {
                if (_reporteInspeccionVisual != value)
                {
                    _reporteInspeccionVisual = value;
                    OnPropertyChanged("ReporteInspeccionVisual");
                }
            }
        }
        private bool _reporteInspeccionVisual;
    
        [DataMember]
        public bool ReporteLiberacionDimensional
        {
            get { return _reporteLiberacionDimensional; }
            set
            {
                if (_reporteLiberacionDimensional != value)
                {
                    _reporteLiberacionDimensional = value;
                    OnPropertyChanged("ReporteLiberacionDimensional");
                }
            }
        }
        private bool _reporteLiberacionDimensional;
    
        [DataMember]
        public bool ReporteEspesores
        {
            get { return _reporteEspesores; }
            set
            {
                if (_reporteEspesores != value)
                {
                    _reporteEspesores = value;
                    OnPropertyChanged("ReporteEspesores");
                }
            }
        }
        private bool _reporteEspesores;
    
        [DataMember]
        public bool ReporteRT
        {
            get { return _reporteRT; }
            set
            {
                if (_reporteRT != value)
                {
                    _reporteRT = value;
                    OnPropertyChanged("ReporteRT");
                }
            }
        }
        private bool _reporteRT;
    
        [DataMember]
        public bool ReportePT
        {
            get { return _reportePT; }
            set
            {
                if (_reportePT != value)
                {
                    _reportePT = value;
                    OnPropertyChanged("ReportePT");
                }
            }
        }
        private bool _reportePT;
    
        [DataMember]
        public bool ReportePwht
        {
            get { return _reportePwht; }
            set
            {
                if (_reportePwht != value)
                {
                    _reportePwht = value;
                    OnPropertyChanged("ReportePwht");
                }
            }
        }
        private bool _reportePwht;
    
        [DataMember]
        public bool ReporteDurezas
        {
            get { return _reporteDurezas; }
            set
            {
                if (_reporteDurezas != value)
                {
                    _reporteDurezas = value;
                    OnPropertyChanged("ReporteDurezas");
                }
            }
        }
        private bool _reporteDurezas;
    
        [DataMember]
        public bool ReporteRTPostTT
        {
            get { return _reporteRTPostTT; }
            set
            {
                if (_reporteRTPostTT != value)
                {
                    _reporteRTPostTT = value;
                    OnPropertyChanged("ReporteRTPostTT");
                }
            }
        }
        private bool _reporteRTPostTT;
    
        [DataMember]
        public bool ReportePTPostTT
        {
            get { return _reportePTPostTT; }
            set
            {
                if (_reportePTPostTT != value)
                {
                    _reportePTPostTT = value;
                    OnPropertyChanged("ReportePTPostTT");
                }
            }
        }
        private bool _reportePTPostTT;
    
        [DataMember]
        public bool ReportePreheat
        {
            get { return _reportePreheat; }
            set
            {
                if (_reportePreheat != value)
                {
                    _reportePreheat = value;
                    OnPropertyChanged("ReportePreheat");
                }
            }
        }
        private bool _reportePreheat;
    
        [DataMember]
        public bool ReporteUT
        {
            get { return _reporteUT; }
            set
            {
                if (_reporteUT != value)
                {
                    _reporteUT = value;
                    OnPropertyChanged("ReporteUT");
                }
            }
        }
        private bool _reporteUT;
    
        [DataMember]
        public bool ReportesPintura
        {
            get { return _reportesPintura; }
            set
            {
                if (_reportesPintura != value)
                {
                    _reportesPintura = value;
                    OnPropertyChanged("ReportesPintura");
                }
            }
        }
        private bool _reportesPintura;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public bool Trazabilidad
        {
            get { return _trazabilidad; }
            set
            {
                if (_trazabilidad != value)
                {
                    _trazabilidad = value;
                    OnPropertyChanged("Trazabilidad");
                }
            }
        }
        private bool _trazabilidad;
    
        [DataMember]
        public bool WPS
        {
            get { return _wPS; }
            set
            {
                if (_wPS != value)
                {
                    _wPS = value;
                    OnPropertyChanged("WPS");
                }
            }
        }
        private bool _wPS;
    
        [DataMember]
        public bool Embarque
        {
            get { return _embarque; }
            set
            {
                if (_embarque != value)
                {
                    _embarque = value;
                    OnPropertyChanged("Embarque");
                }
            }
        }
        private bool _embarque;
    
        [DataMember]
        public bool MTR
        {
            get { return _mTR; }
            set
            {
                if (_mTR != value)
                {
                    _mTR = value;
                    OnPropertyChanged("MTR");
                }
            }
        }
        private bool _mTR;
    
        [DataMember]
        public bool MTRCertificado
        {
            get { return _mTRCertificado; }
            set
            {
                if (_mTRCertificado != value)
                {
                    _mTRCertificado = value;
                    OnPropertyChanged("MTRCertificado");
                }
            }
        }
        private bool _mTRCertificado;
    
        [DataMember]
        public bool LDCertificado
        {
            get { return _lDCertificado; }
            set
            {
                if (_lDCertificado != value)
                {
                    _lDCertificado = value;
                    OnPropertyChanged("LDCertificado");
                }
            }
        }
        private bool _lDCertificado;
    
        [DataMember]
        public bool MTRSoldadura
        {
            get { return _mTRSoldadura; }
            set
            {
                if (_mTRSoldadura != value)
                {
                    _mTRSoldadura = value;
                    OnPropertyChanged("MTRSoldadura");
                }
            }
        }
        private bool _mTRSoldadura;
    
        [DataMember]
        public bool Drawing
        {
            get { return _drawing; }
            set
            {
                if (_drawing != value)
                {
                    _drawing = value;
                    OnPropertyChanged("Drawing");
                }
            }
        }
        private bool _drawing;
    
        [DataMember]
        public bool ReportePMI
        {
            get { return _reportePMI; }
            set
            {
                if (_reportePMI != value)
                {
                    _reportePMI = value;
                    OnPropertyChanged("ReportePMI");
                }
            }
        }
        private bool _reportePMI;
    
        [DataMember]
        public Nullable<bool> ReportePruebaHidrostatica
        {
            get { return _reportePruebaHidrostatica; }
            set
            {
                if (_reportePruebaHidrostatica != value)
                {
                    _reportePruebaHidrostatica = value;
                    OnPropertyChanged("ReportePruebaHidrostatica");
                }
            }
        }
        private Nullable<bool> _reportePruebaHidrostatica;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProyectoID != value.ProyectoID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProyectoDossier, this))
            {
                previousValue.ProyectoDossier = null;
            }
    
            if (Proyecto != null)
            {
                Proyecto.ProyectoDossier = this;
                ProyectoID = Proyecto.ProyectoID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }

        #endregion

    }
}
