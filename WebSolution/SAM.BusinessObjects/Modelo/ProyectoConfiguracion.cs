//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class ProyectoConfiguracion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProyectoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public string PrefijoNumeroUnico
        {
            get { return _prefijoNumeroUnico; }
            set
            {
                if (_prefijoNumeroUnico != value)
                {
                    _prefijoNumeroUnico = value;
                    OnPropertyChanged("PrefijoNumeroUnico");
                }
            }
        }
        private string _prefijoNumeroUnico;
    
        [DataMember]
        public string PrefijoOrdenTrabajo
        {
            get { return _prefijoOrdenTrabajo; }
            set
            {
                if (_prefijoOrdenTrabajo != value)
                {
                    _prefijoOrdenTrabajo = value;
                    OnPropertyChanged("PrefijoOrdenTrabajo");
                }
            }
        }
        private string _prefijoOrdenTrabajo;
    
        [DataMember]
        public byte DigitosNumeroUnico
        {
            get { return _digitosNumeroUnico; }
            set
            {
                if (_digitosNumeroUnico != value)
                {
                    _digitosNumeroUnico = value;
                    OnPropertyChanged("DigitosNumeroUnico");
                }
            }
        }
        private byte _digitosNumeroUnico;
    
        [DataMember]
        public byte DigitosOrdenTrabajo
        {
            get { return _digitosOrdenTrabajo; }
            set
            {
                if (_digitosOrdenTrabajo != value)
                {
                    _digitosOrdenTrabajo = value;
                    OnPropertyChanged("DigitosOrdenTrabajo");
                }
            }
        }
        private byte _digitosOrdenTrabajo;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public Nullable<int> ToleranciaCortes
        {
            get { return _toleranciaCortes; }
            set
            {
                if (_toleranciaCortes != value)
                {
                    _toleranciaCortes = value;
                    OnPropertyChanged("ToleranciaCortes");
                }
            }
        }
        private Nullable<int> _toleranciaCortes;
    
        [DataMember]
        public string AnguloBisel
        {
            get { return _anguloBisel; }
            set
            {
                if (_anguloBisel != value)
                {
                    _anguloBisel = value;
                    OnPropertyChanged("AnguloBisel");
                }
            }
        }
        private string _anguloBisel;
    
        [DataMember]
        public decimal CuadroTubero
        {
            get { return _cuadroTubero; }
            set
            {
                if (_cuadroTubero != value)
                {
                    _cuadroTubero = value;
                    OnPropertyChanged("CuadroTubero");
                }
            }
        }
        private decimal _cuadroTubero;
    
        [DataMember]
        public decimal CuadroRaiz
        {
            get { return _cuadroRaiz; }
            set
            {
                if (_cuadroRaiz != value)
                {
                    _cuadroRaiz = value;
                    OnPropertyChanged("CuadroRaiz");
                }
            }
        }
        private decimal _cuadroRaiz;
    
        [DataMember]
        public decimal CuadroRelleno
        {
            get { return _cuadroRelleno; }
            set
            {
                if (_cuadroRelleno != value)
                {
                    _cuadroRelleno = value;
                    OnPropertyChanged("CuadroRelleno");
                }
            }
        }
        private decimal _cuadroRelleno;
    
        [DataMember]
        public bool ActualizaLocalizacion
        {
            get { return _actualizaLocalizacion; }
            set
            {
                if (_actualizaLocalizacion != value)
                {
                    _actualizaLocalizacion = value;
                    OnPropertyChanged("ActualizaLocalizacion");
                }
            }
        }
        private bool _actualizaLocalizacion;
    
        [DataMember]
        public string CorreoPeqKgEsp
        {
            get { return _correoPeqKgEsp; }
            set
            {
                if (_correoPeqKgEsp != value)
                {
                    _correoPeqKgEsp = value;
                    OnPropertyChanged("CorreoPeqKgEsp");
                }
            }
        }
        private string _correoPeqKgEsp;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProyectoID != value.ProyectoID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProyectoConfiguracion, this))
            {
                previousValue.ProyectoConfiguracion = null;
            }
    
            if (Proyecto != null)
            {
                Proyecto.ProyectoConfiguracion = this;
                ProyectoID = Proyecto.ProyectoID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }

        #endregion

    }
}
