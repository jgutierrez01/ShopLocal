//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(NumeroUnico))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(RequisicionNumeroUnicoDetalle))]
    [Serializable]
    public partial class PinturaNumeroUnico: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PinturaNumeroUnicoID
        {
            get { return _pinturaNumeroUnicoID; }
            set
            {
                if (_pinturaNumeroUnicoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PinturaNumeroUnicoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pinturaNumeroUnicoID = value;
                    OnPropertyChanged("PinturaNumeroUnicoID");
                }
            }
        }
        private int _pinturaNumeroUnicoID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public int NumeroUnicoID
        {
            get { return _numeroUnicoID; }
            set
            {
                if (_numeroUnicoID != value)
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnicoID", _numeroUnicoID);
                    if (!IsDeserializing)
                    {
                        if (NumeroUnico != null && NumeroUnico.NumeroUnicoID != value)
                        {
                            NumeroUnico = null;
                        }
                    }
                    _numeroUnicoID = value;
                    OnPropertyChanged("NumeroUnicoID");
                }
            }
        }
        private int _numeroUnicoID;
    
        [DataMember]
        public int RequisicionNumeroUnicoDetalleID
        {
            get { return _requisicionNumeroUnicoDetalleID; }
            set
            {
                if (_requisicionNumeroUnicoDetalleID != value)
                {
                    ChangeTracker.RecordOriginalValue("RequisicionNumeroUnicoDetalleID", _requisicionNumeroUnicoDetalleID);
                    if (!IsDeserializing)
                    {
                        if (RequisicionNumeroUnicoDetalle != null && RequisicionNumeroUnicoDetalle.RequisicionNumeroUnicoDetalleID != value)
                        {
                            RequisicionNumeroUnicoDetalle = null;
                        }
                    }
                    _requisicionNumeroUnicoDetalleID = value;
                    OnPropertyChanged("RequisicionNumeroUnicoDetalleID");
                }
            }
        }
        private int _requisicionNumeroUnicoDetalleID;
    
        [DataMember]
        public Nullable<System.DateTime> FechaPrimarios
        {
            get { return _fechaPrimarios; }
            set
            {
                if (_fechaPrimarios != value)
                {
                    _fechaPrimarios = value;
                    OnPropertyChanged("FechaPrimarios");
                }
            }
        }
        private Nullable<System.DateTime> _fechaPrimarios;
    
        [DataMember]
        public string ReportePrimarios
        {
            get { return _reportePrimarios; }
            set
            {
                if (_reportePrimarios != value)
                {
                    _reportePrimarios = value;
                    OnPropertyChanged("ReportePrimarios");
                }
            }
        }
        private string _reportePrimarios;
    
        [DataMember]
        public Nullable<System.DateTime> FechaIntermedio
        {
            get { return _fechaIntermedio; }
            set
            {
                if (_fechaIntermedio != value)
                {
                    _fechaIntermedio = value;
                    OnPropertyChanged("FechaIntermedio");
                }
            }
        }
        private Nullable<System.DateTime> _fechaIntermedio;
    
        [DataMember]
        public string ReporteIntermedio
        {
            get { return _reporteIntermedio; }
            set
            {
                if (_reporteIntermedio != value)
                {
                    _reporteIntermedio = value;
                    OnPropertyChanged("ReporteIntermedio");
                }
            }
        }
        private string _reporteIntermedio;
    
        [DataMember]
        public bool Liberado
        {
            get { return _liberado; }
            set
            {
                if (_liberado != value)
                {
                    _liberado = value;
                    OnPropertyChanged("Liberado");
                }
            }
        }
        private bool _liberado;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public NumeroUnico NumeroUnico
        {
            get { return _numeroUnico; }
            set
            {
                if (!ReferenceEquals(_numeroUnico, value))
                {
                    var previousValue = _numeroUnico;
                    _numeroUnico = value;
                    FixupNumeroUnico(previousValue);
                    OnNavigationPropertyChanged("NumeroUnico");
                }
            }
        }
        private NumeroUnico _numeroUnico;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public RequisicionNumeroUnicoDetalle RequisicionNumeroUnicoDetalle
        {
            get { return _requisicionNumeroUnicoDetalle; }
            set
            {
                if (!ReferenceEquals(_requisicionNumeroUnicoDetalle, value))
                {
                    var previousValue = _requisicionNumeroUnicoDetalle;
                    _requisicionNumeroUnicoDetalle = value;
                    FixupRequisicionNumeroUnicoDetalle(previousValue);
                    OnNavigationPropertyChanged("RequisicionNumeroUnicoDetalle");
                }
            }
        }
        private RequisicionNumeroUnicoDetalle _requisicionNumeroUnicoDetalle;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            NumeroUnico = null;
            Proyecto = null;
            RequisicionNumeroUnicoDetalle = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupNumeroUnico(NumeroUnico previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PinturaNumeroUnico.Contains(this))
            {
                previousValue.PinturaNumeroUnico.Remove(this);
            }
    
            if (NumeroUnico != null)
            {
                if (!NumeroUnico.PinturaNumeroUnico.Contains(this))
                {
                    NumeroUnico.PinturaNumeroUnico.Add(this);
                }
    
                NumeroUnicoID = NumeroUnico.NumeroUnicoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NumeroUnico")
                    && (ChangeTracker.OriginalValues["NumeroUnico"] == NumeroUnico))
                {
                    ChangeTracker.OriginalValues.Remove("NumeroUnico");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnico", previousValue);
                }
                if (NumeroUnico != null && !NumeroUnico.ChangeTracker.ChangeTrackingEnabled)
                {
                    NumeroUnico.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PinturaNumeroUnico.Contains(this))
            {
                previousValue.PinturaNumeroUnico.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.PinturaNumeroUnico.Contains(this))
                {
                    Proyecto.PinturaNumeroUnico.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupRequisicionNumeroUnicoDetalle(RequisicionNumeroUnicoDetalle previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PinturaNumeroUnico.Contains(this))
            {
                previousValue.PinturaNumeroUnico.Remove(this);
            }
    
            if (RequisicionNumeroUnicoDetalle != null)
            {
                if (!RequisicionNumeroUnicoDetalle.PinturaNumeroUnico.Contains(this))
                {
                    RequisicionNumeroUnicoDetalle.PinturaNumeroUnico.Add(this);
                }
    
                RequisicionNumeroUnicoDetalleID = RequisicionNumeroUnicoDetalle.RequisicionNumeroUnicoDetalleID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("RequisicionNumeroUnicoDetalle")
                    && (ChangeTracker.OriginalValues["RequisicionNumeroUnicoDetalle"] == RequisicionNumeroUnicoDetalle))
                {
                    ChangeTracker.OriginalValues.Remove("RequisicionNumeroUnicoDetalle");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("RequisicionNumeroUnicoDetalle", previousValue);
                }
                if (RequisicionNumeroUnicoDetalle != null && !RequisicionNumeroUnicoDetalle.ChangeTracker.ChangeTrackingEnabled)
                {
                    RequisicionNumeroUnicoDetalle.StartTracking();
                }
            }
        }

        #endregion

    }
}
