//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cuadrante))]
    [KnownType(typeof(Spool))]
    [KnownType(typeof(Usuario))]
    [Serializable]
    public partial class CuadranteHistorico: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CuadranteHistoricoID
        {
            get { return _cuadranteHistoricoID; }
            set
            {
                if (_cuadranteHistoricoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CuadranteHistoricoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cuadranteHistoricoID = value;
                    OnPropertyChanged("CuadranteHistoricoID");
                }
            }
        }
        private int _cuadranteHistoricoID;
    
        [DataMember]
        public int SpoolID
        {
            get { return _spoolID; }
            set
            {
                if (_spoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("SpoolID", _spoolID);
                    if (!IsDeserializing)
                    {
                        if (Spool != null && Spool.SpoolID != value)
                        {
                            Spool = null;
                        }
                    }
                    _spoolID = value;
                    OnPropertyChanged("SpoolID");
                }
            }
        }
        private int _spoolID;
    
        [DataMember]
        public int CuadranteID
        {
            get { return _cuadranteID; }
            set
            {
                if (_cuadranteID != value)
                {
                    ChangeTracker.RecordOriginalValue("CuadranteID", _cuadranteID);
                    if (!IsDeserializing)
                    {
                        if (Cuadrante != null && Cuadrante.CuadranteID != value)
                        {
                            Cuadrante = null;
                        }
                    }
                    _cuadranteID = value;
                    OnPropertyChanged("CuadranteID");
                }
            }
        }
        private int _cuadranteID;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    ChangeTracker.RecordOriginalValue("UsuarioModifica", _usuarioModifica);
                    if (!IsDeserializing)
                    {
                        if (Usuario != null && Usuario.UserId != value)
                        {
                            Usuario = null;
                        }
                    }
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Cuadrante Cuadrante
        {
            get { return _cuadrante; }
            set
            {
                if (!ReferenceEquals(_cuadrante, value))
                {
                    var previousValue = _cuadrante;
                    _cuadrante = value;
                    FixupCuadrante(previousValue);
                    OnNavigationPropertyChanged("Cuadrante");
                }
            }
        }
        private Cuadrante _cuadrante;
    
        [DataMember]
        public Spool Spool
        {
            get { return _spool; }
            set
            {
                if (!ReferenceEquals(_spool, value))
                {
                    var previousValue = _spool;
                    _spool = value;
                    FixupSpool(previousValue);
                    OnNavigationPropertyChanged("Spool");
                }
            }
        }
        private Spool _spool;
    
        [DataMember]
        public Usuario Usuario
        {
            get { return _usuario; }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    var previousValue = _usuario;
                    _usuario = value;
                    FixupUsuario(previousValue);
                    OnNavigationPropertyChanged("Usuario");
                }
            }
        }
        private Usuario _usuario;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Cuadrante = null;
            Spool = null;
            Usuario = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupCuadrante(Cuadrante previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CuadranteHistorico.Contains(this))
            {
                previousValue.CuadranteHistorico.Remove(this);
            }
    
            if (Cuadrante != null)
            {
                if (!Cuadrante.CuadranteHistorico.Contains(this))
                {
                    Cuadrante.CuadranteHistorico.Add(this);
                }
    
                CuadranteID = Cuadrante.CuadranteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Cuadrante")
                    && (ChangeTracker.OriginalValues["Cuadrante"] == Cuadrante))
                {
                    ChangeTracker.OriginalValues.Remove("Cuadrante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Cuadrante", previousValue);
                }
                if (Cuadrante != null && !Cuadrante.ChangeTracker.ChangeTrackingEnabled)
                {
                    Cuadrante.StartTracking();
                }
            }
        }
    
        private void FixupSpool(Spool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CuadranteHistorico.Contains(this))
            {
                previousValue.CuadranteHistorico.Remove(this);
            }
    
            if (Spool != null)
            {
                if (!Spool.CuadranteHistorico.Contains(this))
                {
                    Spool.CuadranteHistorico.Add(this);
                }
    
                SpoolID = Spool.SpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Spool")
                    && (ChangeTracker.OriginalValues["Spool"] == Spool))
                {
                    ChangeTracker.OriginalValues.Remove("Spool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Spool", previousValue);
                }
                if (Spool != null && !Spool.ChangeTracker.ChangeTrackingEnabled)
                {
                    Spool.StartTracking();
                }
            }
        }
    
        private void FixupUsuario(Usuario previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CuadranteHistorico.Contains(this))
            {
                previousValue.CuadranteHistorico.Remove(this);
            }
    
            if (Usuario != null)
            {
                if (!Usuario.CuadranteHistorico.Contains(this))
                {
                    Usuario.CuadranteHistorico.Add(this);
                }
    
                UsuarioModifica = Usuario.UserId;
            }
            else if (!skipKeys)
            {
                UsuarioModifica = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Usuario")
                    && (ChangeTracker.OriginalValues["Usuario"] == Usuario))
                {
                    ChangeTracker.OriginalValues.Remove("Usuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Usuario", previousValue);
                }
                if (Usuario != null && !Usuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    Usuario.StartTracking();
                }
            }
        }

        #endregion

    }
}
