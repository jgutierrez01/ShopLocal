//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CorteSpool))]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(MaterialSpool))]
    [KnownType(typeof(OrdenTrabajoSpool))]
    [KnownType(typeof(FamiliaAcero))]
    [KnownType(typeof(SpoolHold))]
    [KnownType(typeof(SpoolHoldHistorial))]
    [KnownType(typeof(JuntaCampoArmado))]
    [KnownType(typeof(HistoricoWorkstatus))]
    [KnownType(typeof(BastonSpool))]
    [KnownType(typeof(JuntaSpool))]
    [KnownType(typeof(CuadranteHistorico))]
    [KnownType(typeof(TransferenciaSpool))]
    [KnownType(typeof(AgrupadoresSpoolPND))]
    [Serializable]
    public partial class Spool: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SpoolID
        {
            get { return _spoolID; }
            set
            {
                if (_spoolID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SpoolID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _spoolID = value;
                    OnPropertyChanged("SpoolID");
                }
            }
        }
        private int _spoolID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string Dibujo
        {
            get { return _dibujo; }
            set
            {
                if (_dibujo != value)
                {
                    _dibujo = value;
                    OnPropertyChanged("Dibujo");
                }
            }
        }
        private string _dibujo;
    
        [DataMember]
        public string Especificacion
        {
            get { return _especificacion; }
            set
            {
                if (_especificacion != value)
                {
                    _especificacion = value;
                    OnPropertyChanged("Especificacion");
                }
            }
        }
        private string _especificacion;
    
        [DataMember]
        public string Cedula
        {
            get { return _cedula; }
            set
            {
                if (_cedula != value)
                {
                    _cedula = value;
                    OnPropertyChanged("Cedula");
                }
            }
        }
        private string _cedula;
    
        [DataMember]
        public Nullable<decimal> Pdis
        {
            get { return _pdis; }
            set
            {
                if (_pdis != value)
                {
                    _pdis = value;
                    OnPropertyChanged("Pdis");
                }
            }
        }
        private Nullable<decimal> _pdis;
    
        [DataMember]
        public Nullable<decimal> DiametroPlano
        {
            get { return _diametroPlano; }
            set
            {
                if (_diametroPlano != value)
                {
                    _diametroPlano = value;
                    OnPropertyChanged("DiametroPlano");
                }
            }
        }
        private Nullable<decimal> _diametroPlano;
    
        [DataMember]
        public Nullable<decimal> Peso
        {
            get { return _peso; }
            set
            {
                if (_peso != value)
                {
                    _peso = value;
                    OnPropertyChanged("Peso");
                }
            }
        }
        private Nullable<decimal> _peso;
    
        [DataMember]
        public Nullable<decimal> Area
        {
            get { return _area; }
            set
            {
                if (_area != value)
                {
                    _area = value;
                    OnPropertyChanged("Area");
                }
            }
        }
        private Nullable<decimal> _area;
    
        [DataMember]
        public Nullable<int> PorcentajePnd
        {
            get { return _porcentajePnd; }
            set
            {
                if (_porcentajePnd != value)
                {
                    _porcentajePnd = value;
                    OnPropertyChanged("PorcentajePnd");
                }
            }
        }
        private Nullable<int> _porcentajePnd;
    
        [DataMember]
        public bool RequierePwht
        {
            get { return _requierePwht; }
            set
            {
                if (_requierePwht != value)
                {
                    _requierePwht = value;
                    OnPropertyChanged("RequierePwht");
                }
            }
        }
        private bool _requierePwht;
    
        [DataMember]
        public bool AprobadoParaCruce
        {
            get { return _aprobadoParaCruce; }
            set
            {
                if (_aprobadoParaCruce != value)
                {
                    _aprobadoParaCruce = value;
                    OnPropertyChanged("AprobadoParaCruce");
                }
            }
        }
        private bool _aprobadoParaCruce;
    
        [DataMember]
        public Nullable<int> Prioridad
        {
            get { return _prioridad; }
            set
            {
                if (_prioridad != value)
                {
                    _prioridad = value;
                    OnPropertyChanged("Prioridad");
                }
            }
        }
        private Nullable<int> _prioridad;
    
        [DataMember]
        public string Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    _revision = value;
                    OnPropertyChanged("Revision");
                }
            }
        }
        private string _revision;
    
        [DataMember]
        public string RevisionCliente
        {
            get { return _revisionCliente; }
            set
            {
                if (_revisionCliente != value)
                {
                    _revisionCliente = value;
                    OnPropertyChanged("RevisionCliente");
                }
            }
        }
        private string _revisionCliente;
    
        [DataMember]
        public string Segmento1
        {
            get { return _segmento1; }
            set
            {
                if (_segmento1 != value)
                {
                    _segmento1 = value;
                    OnPropertyChanged("Segmento1");
                }
            }
        }
        private string _segmento1;
    
        [DataMember]
        public string Segmento2
        {
            get { return _segmento2; }
            set
            {
                if (_segmento2 != value)
                {
                    _segmento2 = value;
                    OnPropertyChanged("Segmento2");
                }
            }
        }
        private string _segmento2;
    
        [DataMember]
        public string Segmento3
        {
            get { return _segmento3; }
            set
            {
                if (_segmento3 != value)
                {
                    _segmento3 = value;
                    OnPropertyChanged("Segmento3");
                }
            }
        }
        private string _segmento3;
    
        [DataMember]
        public string Segmento4
        {
            get { return _segmento4; }
            set
            {
                if (_segmento4 != value)
                {
                    _segmento4 = value;
                    OnPropertyChanged("Segmento4");
                }
            }
        }
        private string _segmento4;
    
        [DataMember]
        public string Segmento5
        {
            get { return _segmento5; }
            set
            {
                if (_segmento5 != value)
                {
                    _segmento5 = value;
                    OnPropertyChanged("Segmento5");
                }
            }
        }
        private string _segmento5;
    
        [DataMember]
        public string Segmento6
        {
            get { return _segmento6; }
            set
            {
                if (_segmento6 != value)
                {
                    _segmento6 = value;
                    OnPropertyChanged("Segmento6");
                }
            }
        }
        private string _segmento6;
    
        [DataMember]
        public string Segmento7
        {
            get { return _segmento7; }
            set
            {
                if (_segmento7 != value)
                {
                    _segmento7 = value;
                    OnPropertyChanged("Segmento7");
                }
            }
        }
        private string _segmento7;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public int FamiliaAcero1ID
        {
            get { return _familiaAcero1ID; }
            set
            {
                if (_familiaAcero1ID != value)
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero1ID", _familiaAcero1ID);
                    if (!IsDeserializing)
                    {
                        if (FamiliaAcero1 != null && FamiliaAcero1.FamiliaAceroID != value)
                        {
                            FamiliaAcero1 = null;
                        }
                    }
                    _familiaAcero1ID = value;
                    OnPropertyChanged("FamiliaAcero1ID");
                }
            }
        }
        private int _familiaAcero1ID;
    
        [DataMember]
        public Nullable<int> FamiliaAcero2ID
        {
            get { return _familiaAcero2ID; }
            set
            {
                if (_familiaAcero2ID != value)
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero2ID", _familiaAcero2ID);
                    if (!IsDeserializing)
                    {
                        if (FamiliaAcero2 != null && FamiliaAcero2.FamiliaAceroID != value)
                        {
                            FamiliaAcero2 = null;
                        }
                    }
                    _familiaAcero2ID = value;
                    OnPropertyChanged("FamiliaAcero2ID");
                }
            }
        }
        private Nullable<int> _familiaAcero2ID;
    
        [DataMember]
        public bool PendienteDocumental
        {
            get { return _pendienteDocumental; }
            set
            {
                if (_pendienteDocumental != value)
                {
                    _pendienteDocumental = value;
                    OnPropertyChanged("PendienteDocumental");
                }
            }
        }
        private bool _pendienteDocumental;
    
        [DataMember]
        public string SistemaPintura
        {
            get { return _sistemaPintura; }
            set
            {
                if (_sistemaPintura != value)
                {
                    _sistemaPintura = value;
                    OnPropertyChanged("SistemaPintura");
                }
            }
        }
        private string _sistemaPintura;
    
        [DataMember]
        public string ColorPintura
        {
            get { return _colorPintura; }
            set
            {
                if (_colorPintura != value)
                {
                    _colorPintura = value;
                    OnPropertyChanged("ColorPintura");
                }
            }
        }
        private string _colorPintura;
    
        [DataMember]
        public string CodigoPintura
        {
            get { return _codigoPintura; }
            set
            {
                if (_codigoPintura != value)
                {
                    _codigoPintura = value;
                    OnPropertyChanged("CodigoPintura");
                }
            }
        }
        private string _codigoPintura;
    
        [DataMember]
        public Nullable<System.DateTime> FechaEtiqueta
        {
            get { return _fechaEtiqueta; }
            set
            {
                if (_fechaEtiqueta != value)
                {
                    _fechaEtiqueta = value;
                    OnPropertyChanged("FechaEtiqueta");
                }
            }
        }
        private Nullable<System.DateTime> _fechaEtiqueta;
    
        [DataMember]
        public string NumeroEtiqueta
        {
            get { return _numeroEtiqueta; }
            set
            {
                if (_numeroEtiqueta != value)
                {
                    _numeroEtiqueta = value;
                    OnPropertyChanged("NumeroEtiqueta");
                }
            }
        }
        private string _numeroEtiqueta;
    
        [DataMember]
        public string Campo1
        {
            get { return _campo1; }
            set
            {
                if (_campo1 != value)
                {
                    _campo1 = value;
                    OnPropertyChanged("Campo1");
                }
            }
        }
        private string _campo1;
    
        [DataMember]
        public string Campo2
        {
            get { return _campo2; }
            set
            {
                if (_campo2 != value)
                {
                    _campo2 = value;
                    OnPropertyChanged("Campo2");
                }
            }
        }
        private string _campo2;
    
        [DataMember]
        public string Campo3
        {
            get { return _campo3; }
            set
            {
                if (_campo3 != value)
                {
                    _campo3 = value;
                    OnPropertyChanged("Campo3");
                }
            }
        }
        private string _campo3;
    
        [DataMember]
        public string Campo4
        {
            get { return _campo4; }
            set
            {
                if (_campo4 != value)
                {
                    _campo4 = value;
                    OnPropertyChanged("Campo4");
                }
            }
        }
        private string _campo4;
    
        [DataMember]
        public string Campo5
        {
            get { return _campo5; }
            set
            {
                if (_campo5 != value)
                {
                    _campo5 = value;
                    OnPropertyChanged("Campo5");
                }
            }
        }
        private string _campo5;
    
        [DataMember]
        public Nullable<decimal> DiametroMayor
        {
            get { return _diametroMayor; }
            set
            {
                if (_diametroMayor != value)
                {
                    _diametroMayor = value;
                    OnPropertyChanged("DiametroMayor");
                }
            }
        }
        private Nullable<decimal> _diametroMayor;
    
        [DataMember]
        public Nullable<int> CuadranteID
        {
            get { return _cuadranteID; }
            set
            {
                if (_cuadranteID != value)
                {
                    _cuadranteID = value;
                    OnPropertyChanged("CuadranteID");
                }
            }
        }
        private Nullable<int> _cuadranteID;
    
        [DataMember]
        public Nullable<System.DateTime> FechaImportacion
        {
            get { return _fechaImportacion; }
            set
            {
                if (_fechaImportacion != value)
                {
                    _fechaImportacion = value;
                    OnPropertyChanged("FechaImportacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaImportacion;
    
        [DataMember]
        public string AreaGrupo
        {
            get { return _areaGrupo; }
            set
            {
                if (_areaGrupo != value)
                {
                    _areaGrupo = value;
                    OnPropertyChanged("AreaGrupo");
                }
            }
        }
        private string _areaGrupo;
    
        [DataMember]
        public string KgsGrupo
        {
            get { return _kgsGrupo; }
            set
            {
                if (_kgsGrupo != value)
                {
                    _kgsGrupo = value;
                    OnPropertyChanged("KgsGrupo");
                }
            }
        }
        private string _kgsGrupo;
    
        [DataMember]
        public string DiamGrupo
        {
            get { return _diamGrupo; }
            set
            {
                if (_diamGrupo != value)
                {
                    _diamGrupo = value;
                    OnPropertyChanged("DiamGrupo");
                }
            }
        }
        private string _diamGrupo;
    
        [DataMember]
        public string PeqGrupo
        {
            get { return _peqGrupo; }
            set
            {
                if (_peqGrupo != value)
                {
                    _peqGrupo = value;
                    OnPropertyChanged("PeqGrupo");
                }
            }
        }
        private string _peqGrupo;
    
        [DataMember]
        public string SistemaPinturaFinal
        {
            get { return _sistemaPinturaFinal; }
            set
            {
                if (_sistemaPinturaFinal != value)
                {
                    _sistemaPinturaFinal = value;
                    OnPropertyChanged("SistemaPinturaFinal");
                }
            }
        }
        private string _sistemaPinturaFinal;
    
        [DataMember]
        public string Paint
        {
            get { return _paint; }
            set
            {
                if (_paint != value)
                {
                    _paint = value;
                    OnPropertyChanged("Paint");
                }
            }
        }
        private string _paint;
    
        [DataMember]
        public string DiametroPromedio
        {
            get { return _diametroPromedio; }
            set
            {
                if (_diametroPromedio != value)
                {
                    _diametroPromedio = value;
                    OnPropertyChanged("DiametroPromedio");
                }
            }
        }
        private string _diametroPromedio;
    
        [DataMember]
        public string PaintLine
        {
            get { return _paintLine; }
            set
            {
                if (_paintLine != value)
                {
                    _paintLine = value;
                    OnPropertyChanged("PaintLine");
                }
            }
        }
        private string _paintLine;
    
        [DataMember]
        public string AreaEq
        {
            get { return _areaEq; }
            set
            {
                if (_areaEq != value)
                {
                    _areaEq = value;
                    OnPropertyChanged("AreaEq");
                }
            }
        }
        private string _areaEq;
    
        [DataMember]
        public string Inox
        {
            get { return _inox; }
            set
            {
                if (_inox != value)
                {
                    _inox = value;
                    OnPropertyChanged("Inox");
                }
            }
        }
        private string _inox;
    
        [DataMember]
        public string ClasifInox
        {
            get { return _clasifInox; }
            set
            {
                if (_clasifInox != value)
                {
                    _clasifInox = value;
                    OnPropertyChanged("ClasifInox");
                }
            }
        }
        private string _clasifInox;
    
        [DataMember]
        public string UltimoProceso
        {
            get { return _ultimoProceso; }
            set
            {
                if (_ultimoProceso != value)
                {
                    _ultimoProceso = value;
                    OnPropertyChanged("UltimoProceso");
                }
            }
        }
        private string _ultimoProceso;
    
        [DataMember]
        public string RequierePruebaHidrostatica
        {
            get { return _requierePruebaHidrostatica; }
            set
            {
                if (_requierePruebaHidrostatica != value)
                {
                    _requierePruebaHidrostatica = value;
                    OnPropertyChanged("RequierePruebaHidrostatica");
                }
            }
        }
        private string _requierePruebaHidrostatica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaLocalizacion
        {
            get { return _fechaLocalizacion; }
            set
            {
                if (_fechaLocalizacion != value)
                {
                    _fechaLocalizacion = value;
                    OnPropertyChanged("FechaLocalizacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaLocalizacion;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CorteSpool> CorteSpool
        {
            get
            {
                if (_corteSpool == null)
                {
                    _corteSpool = new TrackableCollection<CorteSpool>();
                    _corteSpool.CollectionChanged += FixupCorteSpool;
                }
                return _corteSpool;
            }
            set
            {
                if (!ReferenceEquals(_corteSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_corteSpool != null)
                    {
                        _corteSpool.CollectionChanged -= FixupCorteSpool;
                    }
                    _corteSpool = value;
                    if (_corteSpool != null)
                    {
                        _corteSpool.CollectionChanged += FixupCorteSpool;
                    }
                    OnNavigationPropertyChanged("CorteSpool");
                }
            }
        }
        private TrackableCollection<CorteSpool> _corteSpool;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TrackableCollection<MaterialSpool> MaterialSpool
        {
            get
            {
                if (_materialSpool == null)
                {
                    _materialSpool = new TrackableCollection<MaterialSpool>();
                    _materialSpool.CollectionChanged += FixupMaterialSpool;
                }
                return _materialSpool;
            }
            set
            {
                if (!ReferenceEquals(_materialSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_materialSpool != null)
                    {
                        _materialSpool.CollectionChanged -= FixupMaterialSpool;
                    }
                    _materialSpool = value;
                    if (_materialSpool != null)
                    {
                        _materialSpool.CollectionChanged += FixupMaterialSpool;
                    }
                    OnNavigationPropertyChanged("MaterialSpool");
                }
            }
        }
        private TrackableCollection<MaterialSpool> _materialSpool;
    
        [DataMember]
        public TrackableCollection<OrdenTrabajoSpool> OrdenTrabajoSpool
        {
            get
            {
                if (_ordenTrabajoSpool == null)
                {
                    _ordenTrabajoSpool = new TrackableCollection<OrdenTrabajoSpool>();
                    _ordenTrabajoSpool.CollectionChanged += FixupOrdenTrabajoSpool;
                }
                return _ordenTrabajoSpool;
            }
            set
            {
                if (!ReferenceEquals(_ordenTrabajoSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_ordenTrabajoSpool != null)
                    {
                        _ordenTrabajoSpool.CollectionChanged -= FixupOrdenTrabajoSpool;
                    }
                    _ordenTrabajoSpool = value;
                    if (_ordenTrabajoSpool != null)
                    {
                        _ordenTrabajoSpool.CollectionChanged += FixupOrdenTrabajoSpool;
                    }
                    OnNavigationPropertyChanged("OrdenTrabajoSpool");
                }
            }
        }
        private TrackableCollection<OrdenTrabajoSpool> _ordenTrabajoSpool;
    
        [DataMember]
        public FamiliaAcero FamiliaAcero1
        {
            get { return _familiaAcero1; }
            set
            {
                if (!ReferenceEquals(_familiaAcero1, value))
                {
                    var previousValue = _familiaAcero1;
                    _familiaAcero1 = value;
                    FixupFamiliaAcero1(previousValue);
                    OnNavigationPropertyChanged("FamiliaAcero1");
                }
            }
        }
        private FamiliaAcero _familiaAcero1;
    
        [DataMember]
        public FamiliaAcero FamiliaAcero2
        {
            get { return _familiaAcero2; }
            set
            {
                if (!ReferenceEquals(_familiaAcero2, value))
                {
                    var previousValue = _familiaAcero2;
                    _familiaAcero2 = value;
                    FixupFamiliaAcero2(previousValue);
                    OnNavigationPropertyChanged("FamiliaAcero2");
                }
            }
        }
        private FamiliaAcero _familiaAcero2;
    
        [DataMember]
        public SpoolHold SpoolHold
        {
            get { return _spoolHold; }
            set
            {
                if (!ReferenceEquals(_spoolHold, value))
                {
                    var previousValue = _spoolHold;
                    _spoolHold = value;
                    FixupSpoolHold(previousValue);
                    OnNavigationPropertyChanged("SpoolHold");
                }
            }
        }
        private SpoolHold _spoolHold;
    
        [DataMember]
        public TrackableCollection<SpoolHoldHistorial> SpoolHoldHistorial
        {
            get
            {
                if (_spoolHoldHistorial == null)
                {
                    _spoolHoldHistorial = new TrackableCollection<SpoolHoldHistorial>();
                    _spoolHoldHistorial.CollectionChanged += FixupSpoolHoldHistorial;
                }
                return _spoolHoldHistorial;
            }
            set
            {
                if (!ReferenceEquals(_spoolHoldHistorial, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_spoolHoldHistorial != null)
                    {
                        _spoolHoldHistorial.CollectionChanged -= FixupSpoolHoldHistorial;
                    }
                    _spoolHoldHistorial = value;
                    if (_spoolHoldHistorial != null)
                    {
                        _spoolHoldHistorial.CollectionChanged += FixupSpoolHoldHistorial;
                    }
                    OnNavigationPropertyChanged("SpoolHoldHistorial");
                }
            }
        }
        private TrackableCollection<SpoolHoldHistorial> _spoolHoldHistorial;
    
        [DataMember]
        public TrackableCollection<JuntaCampoArmado> JuntaCampoArmado
        {
            get
            {
                if (_juntaCampoArmado == null)
                {
                    _juntaCampoArmado = new TrackableCollection<JuntaCampoArmado>();
                    _juntaCampoArmado.CollectionChanged += FixupJuntaCampoArmado;
                }
                return _juntaCampoArmado;
            }
            set
            {
                if (!ReferenceEquals(_juntaCampoArmado, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_juntaCampoArmado != null)
                    {
                        _juntaCampoArmado.CollectionChanged -= FixupJuntaCampoArmado;
                    }
                    _juntaCampoArmado = value;
                    if (_juntaCampoArmado != null)
                    {
                        _juntaCampoArmado.CollectionChanged += FixupJuntaCampoArmado;
                    }
                    OnNavigationPropertyChanged("JuntaCampoArmado");
                }
            }
        }
        private TrackableCollection<JuntaCampoArmado> _juntaCampoArmado;
    
        [DataMember]
        public TrackableCollection<JuntaCampoArmado> JuntaCampoArmado1
        {
            get
            {
                if (_juntaCampoArmado1 == null)
                {
                    _juntaCampoArmado1 = new TrackableCollection<JuntaCampoArmado>();
                    _juntaCampoArmado1.CollectionChanged += FixupJuntaCampoArmado1;
                }
                return _juntaCampoArmado1;
            }
            set
            {
                if (!ReferenceEquals(_juntaCampoArmado1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_juntaCampoArmado1 != null)
                    {
                        _juntaCampoArmado1.CollectionChanged -= FixupJuntaCampoArmado1;
                    }
                    _juntaCampoArmado1 = value;
                    if (_juntaCampoArmado1 != null)
                    {
                        _juntaCampoArmado1.CollectionChanged += FixupJuntaCampoArmado1;
                    }
                    OnNavigationPropertyChanged("JuntaCampoArmado1");
                }
            }
        }
        private TrackableCollection<JuntaCampoArmado> _juntaCampoArmado1;
    
        [DataMember]
        public TrackableCollection<HistoricoWorkstatus> HistoricoWorkstatus
        {
            get
            {
                if (_historicoWorkstatus == null)
                {
                    _historicoWorkstatus = new TrackableCollection<HistoricoWorkstatus>();
                    _historicoWorkstatus.CollectionChanged += FixupHistoricoWorkstatus;
                }
                return _historicoWorkstatus;
            }
            set
            {
                if (!ReferenceEquals(_historicoWorkstatus, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_historicoWorkstatus != null)
                    {
                        _historicoWorkstatus.CollectionChanged -= FixupHistoricoWorkstatus;
                    }
                    _historicoWorkstatus = value;
                    if (_historicoWorkstatus != null)
                    {
                        _historicoWorkstatus.CollectionChanged += FixupHistoricoWorkstatus;
                    }
                    OnNavigationPropertyChanged("HistoricoWorkstatus");
                }
            }
        }
        private TrackableCollection<HistoricoWorkstatus> _historicoWorkstatus;
    
        [DataMember]
        public TrackableCollection<BastonSpool> BastonSpool
        {
            get
            {
                if (_bastonSpool == null)
                {
                    _bastonSpool = new TrackableCollection<BastonSpool>();
                    _bastonSpool.CollectionChanged += FixupBastonSpool;
                }
                return _bastonSpool;
            }
            set
            {
                if (!ReferenceEquals(_bastonSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bastonSpool != null)
                    {
                        _bastonSpool.CollectionChanged -= FixupBastonSpool;
                    }
                    _bastonSpool = value;
                    if (_bastonSpool != null)
                    {
                        _bastonSpool.CollectionChanged += FixupBastonSpool;
                    }
                    OnNavigationPropertyChanged("BastonSpool");
                }
            }
        }
        private TrackableCollection<BastonSpool> _bastonSpool;
    
        [DataMember]
        public TrackableCollection<JuntaSpool> JuntaSpool
        {
            get
            {
                if (_juntaSpool == null)
                {
                    _juntaSpool = new TrackableCollection<JuntaSpool>();
                    _juntaSpool.CollectionChanged += FixupJuntaSpool;
                }
                return _juntaSpool;
            }
            set
            {
                if (!ReferenceEquals(_juntaSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_juntaSpool != null)
                    {
                        _juntaSpool.CollectionChanged -= FixupJuntaSpool;
                    }
                    _juntaSpool = value;
                    if (_juntaSpool != null)
                    {
                        _juntaSpool.CollectionChanged += FixupJuntaSpool;
                    }
                    OnNavigationPropertyChanged("JuntaSpool");
                }
            }
        }
        private TrackableCollection<JuntaSpool> _juntaSpool;
    
        [DataMember]
        public TrackableCollection<CuadranteHistorico> CuadranteHistorico
        {
            get
            {
                if (_cuadranteHistorico == null)
                {
                    _cuadranteHistorico = new TrackableCollection<CuadranteHistorico>();
                    _cuadranteHistorico.CollectionChanged += FixupCuadranteHistorico;
                }
                return _cuadranteHistorico;
            }
            set
            {
                if (!ReferenceEquals(_cuadranteHistorico, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_cuadranteHistorico != null)
                    {
                        _cuadranteHistorico.CollectionChanged -= FixupCuadranteHistorico;
                    }
                    _cuadranteHistorico = value;
                    if (_cuadranteHistorico != null)
                    {
                        _cuadranteHistorico.CollectionChanged += FixupCuadranteHistorico;
                    }
                    OnNavigationPropertyChanged("CuadranteHistorico");
                }
            }
        }
        private TrackableCollection<CuadranteHistorico> _cuadranteHistorico;
    
        [DataMember]
        public TrackableCollection<TransferenciaSpool> TransferenciaSpool
        {
            get
            {
                if (_transferenciaSpool == null)
                {
                    _transferenciaSpool = new TrackableCollection<TransferenciaSpool>();
                    _transferenciaSpool.CollectionChanged += FixupTransferenciaSpool;
                }
                return _transferenciaSpool;
            }
            set
            {
                if (!ReferenceEquals(_transferenciaSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_transferenciaSpool != null)
                    {
                        _transferenciaSpool.CollectionChanged -= FixupTransferenciaSpool;
                    }
                    _transferenciaSpool = value;
                    if (_transferenciaSpool != null)
                    {
                        _transferenciaSpool.CollectionChanged += FixupTransferenciaSpool;
                    }
                    OnNavigationPropertyChanged("TransferenciaSpool");
                }
            }
        }
        private TrackableCollection<TransferenciaSpool> _transferenciaSpool;
    
        [DataMember]
        public TrackableCollection<AgrupadoresSpoolPND> AgrupadoresSpoolPND
        {
            get
            {
                if (_agrupadoresSpoolPND == null)
                {
                    _agrupadoresSpoolPND = new TrackableCollection<AgrupadoresSpoolPND>();
                    _agrupadoresSpoolPND.CollectionChanged += FixupAgrupadoresSpoolPND;
                }
                return _agrupadoresSpoolPND;
            }
            set
            {
                if (!ReferenceEquals(_agrupadoresSpoolPND, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_agrupadoresSpoolPND != null)
                    {
                        _agrupadoresSpoolPND.CollectionChanged -= FixupAgrupadoresSpoolPND;
                    }
                    _agrupadoresSpoolPND = value;
                    if (_agrupadoresSpoolPND != null)
                    {
                        _agrupadoresSpoolPND.CollectionChanged += FixupAgrupadoresSpoolPND;
                    }
                    OnNavigationPropertyChanged("AgrupadoresSpoolPND");
                }
            }
        }
        private TrackableCollection<AgrupadoresSpoolPND> _agrupadoresSpoolPND;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_corteSpool != null)
    		{
    			_corteSpool.CollectionChanged -= FixupCorteSpool;
    			_corteSpool.CollectionChanged += FixupCorteSpool;
    			}
    			if (_materialSpool != null)
    		{
    			_materialSpool.CollectionChanged -= FixupMaterialSpool;
    			_materialSpool.CollectionChanged += FixupMaterialSpool;
    			}
    			if (_ordenTrabajoSpool != null)
    		{
    			_ordenTrabajoSpool.CollectionChanged -= FixupOrdenTrabajoSpool;
    			_ordenTrabajoSpool.CollectionChanged += FixupOrdenTrabajoSpool;
    			}
    			if (_spoolHoldHistorial != null)
    		{
    			_spoolHoldHistorial.CollectionChanged -= FixupSpoolHoldHistorial;
    			_spoolHoldHistorial.CollectionChanged += FixupSpoolHoldHistorial;
    			}
    			if (_juntaCampoArmado != null)
    		{
    			_juntaCampoArmado.CollectionChanged -= FixupJuntaCampoArmado;
    			_juntaCampoArmado.CollectionChanged += FixupJuntaCampoArmado;
    			}
    			if (_juntaCampoArmado1 != null)
    		{
    			_juntaCampoArmado1.CollectionChanged -= FixupJuntaCampoArmado1;
    			_juntaCampoArmado1.CollectionChanged += FixupJuntaCampoArmado1;
    			}
    			if (_historicoWorkstatus != null)
    		{
    			_historicoWorkstatus.CollectionChanged -= FixupHistoricoWorkstatus;
    			_historicoWorkstatus.CollectionChanged += FixupHistoricoWorkstatus;
    			}
    			if (_bastonSpool != null)
    		{
    			_bastonSpool.CollectionChanged -= FixupBastonSpool;
    			_bastonSpool.CollectionChanged += FixupBastonSpool;
    			}
    			if (_juntaSpool != null)
    		{
    			_juntaSpool.CollectionChanged -= FixupJuntaSpool;
    			_juntaSpool.CollectionChanged += FixupJuntaSpool;
    			}
    			if (_cuadranteHistorico != null)
    		{
    			_cuadranteHistorico.CollectionChanged -= FixupCuadranteHistorico;
    			_cuadranteHistorico.CollectionChanged += FixupCuadranteHistorico;
    			}
    			if (_transferenciaSpool != null)
    		{
    			_transferenciaSpool.CollectionChanged -= FixupTransferenciaSpool;
    			_transferenciaSpool.CollectionChanged += FixupTransferenciaSpool;
    			}
    			if (_agrupadoresSpoolPND != null)
    		{
    			_agrupadoresSpoolPND.CollectionChanged -= FixupAgrupadoresSpoolPND;
    			_agrupadoresSpoolPND.CollectionChanged += FixupAgrupadoresSpoolPND;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            CorteSpool.Clear();
            Proyecto = null;
            MaterialSpool.Clear();
            OrdenTrabajoSpool.Clear();
            FamiliaAcero1 = null;
            FamiliaAcero2 = null;
            SpoolHold = null;
            SpoolHoldHistorial.Clear();
            JuntaCampoArmado.Clear();
            JuntaCampoArmado1.Clear();
            HistoricoWorkstatus.Clear();
            BastonSpool.Clear();
            JuntaSpool.Clear();
            CuadranteHistorico.Clear();
            TransferenciaSpool.Clear();
            AgrupadoresSpoolPND.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Spool.Contains(this))
            {
                previousValue.Spool.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.Spool.Contains(this))
                {
                    Proyecto.Spool.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupFamiliaAcero1(FamiliaAcero previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Spool_1.Contains(this))
            {
                previousValue.Spool_1.Remove(this);
            }
    
            if (FamiliaAcero1 != null)
            {
                if (!FamiliaAcero1.Spool_1.Contains(this))
                {
                    FamiliaAcero1.Spool_1.Add(this);
                }
    
                FamiliaAcero1ID = FamiliaAcero1.FamiliaAceroID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FamiliaAcero1")
                    && (ChangeTracker.OriginalValues["FamiliaAcero1"] == FamiliaAcero1))
                {
                    ChangeTracker.OriginalValues.Remove("FamiliaAcero1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero1", previousValue);
                }
                if (FamiliaAcero1 != null && !FamiliaAcero1.ChangeTracker.ChangeTrackingEnabled)
                {
                    FamiliaAcero1.StartTracking();
                }
            }
        }
    
        private void FixupFamiliaAcero2(FamiliaAcero previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Spool1.Contains(this))
            {
                previousValue.Spool1.Remove(this);
            }
    
            if (FamiliaAcero2 != null)
            {
                if (!FamiliaAcero2.Spool1.Contains(this))
                {
                    FamiliaAcero2.Spool1.Add(this);
                }
    
                FamiliaAcero2ID = FamiliaAcero2.FamiliaAceroID;
            }
            else if (!skipKeys)
            {
                FamiliaAcero2ID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FamiliaAcero2")
                    && (ChangeTracker.OriginalValues["FamiliaAcero2"] == FamiliaAcero2))
                {
                    ChangeTracker.OriginalValues.Remove("FamiliaAcero2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FamiliaAcero2", previousValue);
                }
                if (FamiliaAcero2 != null && !FamiliaAcero2.ChangeTracker.ChangeTrackingEnabled)
                {
                    FamiliaAcero2.StartTracking();
                }
            }
        }
    
        private void FixupSpoolHold(SpoolHold previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (SpoolHold != null)
            {
                ChangeTracker.ObjectStateChanging += SpoolHold.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Spool, this))
            {
                previousValue.Spool = null;
            }
    
            if (SpoolHold != null)
            {
                SpoolHold.Spool = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SpoolHold")
                    && (ChangeTracker.OriginalValues["SpoolHold"] == SpoolHold))
                {
                    ChangeTracker.OriginalValues.Remove("SpoolHold");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SpoolHold", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (SpoolHold != null && !SpoolHold.ChangeTracker.ChangeTrackingEnabled)
                {
                    SpoolHold.StartTracking();
                }
            }
        }
    
        private void FixupCorteSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CorteSpool item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CorteSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CorteSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CorteSpool", item);
                    }
                }
            }
        }
    
        private void FixupMaterialSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MaterialSpool item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MaterialSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MaterialSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MaterialSpool", item);
                    }
                }
            }
        }
    
        private void FixupOrdenTrabajoSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (OrdenTrabajoSpool item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("OrdenTrabajoSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrdenTrabajoSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("OrdenTrabajoSpool", item);
                    }
                }
            }
        }
    
        private void FixupSpoolHoldHistorial(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SpoolHoldHistorial item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SpoolHoldHistorial", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SpoolHoldHistorial item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SpoolHoldHistorial", item);
                    }
                }
            }
        }
    
        private void FixupJuntaCampoArmado(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (JuntaCampoArmado item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("JuntaCampoArmado", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JuntaCampoArmado item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("JuntaCampoArmado", item);
                    }
                }
            }
        }
    
        private void FixupJuntaCampoArmado1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (JuntaCampoArmado item in e.NewItems)
                {
                    item.Spool1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("JuntaCampoArmado1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JuntaCampoArmado item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool1, this))
                    {
                        item.Spool1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("JuntaCampoArmado1", item);
                    }
                }
            }
        }
    
        private void FixupHistoricoWorkstatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (HistoricoWorkstatus item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("HistoricoWorkstatus", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (HistoricoWorkstatus item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("HistoricoWorkstatus", item);
                    }
                }
            }
        }
    
        private void FixupBastonSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (BastonSpool item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("BastonSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BastonSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("BastonSpool", item);
                    }
                }
            }
        }
    
        private void FixupJuntaSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (JuntaSpool item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("JuntaSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (JuntaSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("JuntaSpool", item);
                    }
                }
            }
        }
    
        private void FixupCuadranteHistorico(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CuadranteHistorico item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CuadranteHistorico", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CuadranteHistorico item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CuadranteHistorico", item);
                    }
                }
            }
        }
    
        private void FixupTransferenciaSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TransferenciaSpool item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TransferenciaSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TransferenciaSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TransferenciaSpool", item);
                    }
                }
            }
        }
    
        private void FixupAgrupadoresSpoolPND(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AgrupadoresSpoolPND item in e.NewItems)
                {
                    item.Spool = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AgrupadoresSpoolPND", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AgrupadoresSpoolPND item in e.OldItems)
                {
                    if (ReferenceEquals(item.Spool, this))
                    {
                        item.Spool = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AgrupadoresSpoolPND", item);
                    }
                }
            }
        }

        #endregion

    }
}
