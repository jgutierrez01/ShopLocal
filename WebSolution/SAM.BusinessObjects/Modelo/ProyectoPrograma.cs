//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PeriodoPrograma))]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class ProyectoPrograma: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProyectoProgramaID
        {
            get { return _proyectoProgramaID; }
            set
            {
                if (_proyectoProgramaID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProyectoProgramaID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _proyectoProgramaID = value;
                    OnPropertyChanged("ProyectoProgramaID");
                }
            }
        }
        private int _proyectoProgramaID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public string Rango
        {
            get { return _rango; }
            set
            {
                if (_rango != value)
                {
                    _rango = value;
                    OnPropertyChanged("Rango");
                }
            }
        }
        private string _rango;
    
        [DataMember]
        public string Unidades
        {
            get { return _unidades; }
            set
            {
                if (_unidades != value)
                {
                    _unidades = value;
                    OnPropertyChanged("Unidades");
                }
            }
        }
        private string _unidades;
    
        [DataMember]
        public Nullable<int> IsosPlaneados
        {
            get { return _isosPlaneados; }
            set
            {
                if (_isosPlaneados != value)
                {
                    _isosPlaneados = value;
                    OnPropertyChanged("IsosPlaneados");
                }
            }
        }
        private Nullable<int> _isosPlaneados;
    
        [DataMember]
        public Nullable<int> IsosReprogramados
        {
            get { return _isosReprogramados; }
            set
            {
                if (_isosReprogramados != value)
                {
                    _isosReprogramados = value;
                    OnPropertyChanged("IsosReprogramados");
                }
            }
        }
        private Nullable<int> _isosReprogramados;
    
        [DataMember]
        public Nullable<int> SpoolsPlaneados
        {
            get { return _spoolsPlaneados; }
            set
            {
                if (_spoolsPlaneados != value)
                {
                    _spoolsPlaneados = value;
                    OnPropertyChanged("SpoolsPlaneados");
                }
            }
        }
        private Nullable<int> _spoolsPlaneados;
    
        [DataMember]
        public Nullable<int> SpoolsReprogramados
        {
            get { return _spoolsReprogramados; }
            set
            {
                if (_spoolsReprogramados != value)
                {
                    _spoolsReprogramados = value;
                    OnPropertyChanged("SpoolsReprogramados");
                }
            }
        }
        private Nullable<int> _spoolsReprogramados;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<PeriodoPrograma> PeriodoPrograma
        {
            get
            {
                if (_periodoPrograma == null)
                {
                    _periodoPrograma = new TrackableCollection<PeriodoPrograma>();
                    _periodoPrograma.CollectionChanged += FixupPeriodoPrograma;
                }
                return _periodoPrograma;
            }
            set
            {
                if (!ReferenceEquals(_periodoPrograma, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_periodoPrograma != null)
                    {
                        _periodoPrograma.CollectionChanged -= FixupPeriodoPrograma;
                    }
                    _periodoPrograma = value;
                    if (_periodoPrograma != null)
                    {
                        _periodoPrograma.CollectionChanged += FixupPeriodoPrograma;
                    }
                    OnNavigationPropertyChanged("PeriodoPrograma");
                }
            }
        }
        private TrackableCollection<PeriodoPrograma> _periodoPrograma;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_periodoPrograma != null)
    		{
    			_periodoPrograma.CollectionChanged -= FixupPeriodoPrograma;
    			_periodoPrograma.CollectionChanged += FixupPeriodoPrograma;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            PeriodoPrograma.Clear();
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProyectoPrograma.Contains(this))
            {
                previousValue.ProyectoPrograma.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.ProyectoPrograma.Contains(this))
                {
                    Proyecto.ProyectoPrograma.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupPeriodoPrograma(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PeriodoPrograma item in e.NewItems)
                {
                    item.ProyectoPrograma = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PeriodoPrograma", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PeriodoPrograma item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProyectoPrograma, this))
                    {
                        item.ProyectoPrograma = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PeriodoPrograma", item);
                    }
                }
            }
        }

        #endregion

    }
}
