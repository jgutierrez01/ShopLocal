//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(RequisicionPinturaDetalle))]
    [KnownType(typeof(WorkstatusSpool))]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class PinturaSpool: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PinturaSpoolID
        {
            get { return _pinturaSpoolID; }
            set
            {
                if (_pinturaSpoolID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PinturaSpoolID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _pinturaSpoolID = value;
                    OnPropertyChanged("PinturaSpoolID");
                }
            }
        }
        private int _pinturaSpoolID;
    
        [DataMember]
        public int WorkstatusSpoolID
        {
            get { return _workstatusSpoolID; }
            set
            {
                if (_workstatusSpoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("WorkstatusSpoolID", _workstatusSpoolID);
                    if (!IsDeserializing)
                    {
                        if (WorkstatusSpool != null && WorkstatusSpool.WorkstatusSpoolID != value)
                        {
                            WorkstatusSpool = null;
                        }
                    }
                    _workstatusSpoolID = value;
                    OnPropertyChanged("WorkstatusSpoolID");
                }
            }
        }
        private int _workstatusSpoolID;
    
        [DataMember]
        public Nullable<int> RequisicionPinturaDetalleID
        {
            get { return _requisicionPinturaDetalleID; }
            set
            {
                if (_requisicionPinturaDetalleID != value)
                {
                    ChangeTracker.RecordOriginalValue("RequisicionPinturaDetalleID", _requisicionPinturaDetalleID);
                    if (!IsDeserializing)
                    {
                        if (RequisicionPinturaDetalle != null && RequisicionPinturaDetalle.RequisicionPinturaDetalleID != value)
                        {
                            RequisicionPinturaDetalle = null;
                        }
                    }
                    _requisicionPinturaDetalleID = value;
                    OnPropertyChanged("RequisicionPinturaDetalleID");
                }
            }
        }
        private Nullable<int> _requisicionPinturaDetalleID;
    
        [DataMember]
        public Nullable<System.DateTime> FechaSandblast
        {
            get { return _fechaSandblast; }
            set
            {
                if (_fechaSandblast != value)
                {
                    _fechaSandblast = value;
                    OnPropertyChanged("FechaSandblast");
                }
            }
        }
        private Nullable<System.DateTime> _fechaSandblast;
    
        [DataMember]
        public string ReporteSandblast
        {
            get { return _reporteSandblast; }
            set
            {
                if (_reporteSandblast != value)
                {
                    _reporteSandblast = value;
                    OnPropertyChanged("ReporteSandblast");
                }
            }
        }
        private string _reporteSandblast;
    
        [DataMember]
        public Nullable<System.DateTime> FechaPrimarios
        {
            get { return _fechaPrimarios; }
            set
            {
                if (_fechaPrimarios != value)
                {
                    _fechaPrimarios = value;
                    OnPropertyChanged("FechaPrimarios");
                }
            }
        }
        private Nullable<System.DateTime> _fechaPrimarios;
    
        [DataMember]
        public string ReportePrimarios
        {
            get { return _reportePrimarios; }
            set
            {
                if (_reportePrimarios != value)
                {
                    _reportePrimarios = value;
                    OnPropertyChanged("ReportePrimarios");
                }
            }
        }
        private string _reportePrimarios;
    
        [DataMember]
        public Nullable<System.DateTime> FechaIntermedios
        {
            get { return _fechaIntermedios; }
            set
            {
                if (_fechaIntermedios != value)
                {
                    _fechaIntermedios = value;
                    OnPropertyChanged("FechaIntermedios");
                }
            }
        }
        private Nullable<System.DateTime> _fechaIntermedios;
    
        [DataMember]
        public string ReporteIntermedios
        {
            get { return _reporteIntermedios; }
            set
            {
                if (_reporteIntermedios != value)
                {
                    _reporteIntermedios = value;
                    OnPropertyChanged("ReporteIntermedios");
                }
            }
        }
        private string _reporteIntermedios;
    
        [DataMember]
        public Nullable<System.DateTime> FechaAcabadoVisual
        {
            get { return _fechaAcabadoVisual; }
            set
            {
                if (_fechaAcabadoVisual != value)
                {
                    _fechaAcabadoVisual = value;
                    OnPropertyChanged("FechaAcabadoVisual");
                }
            }
        }
        private Nullable<System.DateTime> _fechaAcabadoVisual;
    
        [DataMember]
        public string ReporteAcabadoVisual
        {
            get { return _reporteAcabadoVisual; }
            set
            {
                if (_reporteAcabadoVisual != value)
                {
                    _reporteAcabadoVisual = value;
                    OnPropertyChanged("ReporteAcabadoVisual");
                }
            }
        }
        private string _reporteAcabadoVisual;
    
        [DataMember]
        public Nullable<System.DateTime> FechaAdherencia
        {
            get { return _fechaAdherencia; }
            set
            {
                if (_fechaAdherencia != value)
                {
                    _fechaAdherencia = value;
                    OnPropertyChanged("FechaAdherencia");
                }
            }
        }
        private Nullable<System.DateTime> _fechaAdherencia;
    
        [DataMember]
        public string ReporteAdherencia
        {
            get { return _reporteAdherencia; }
            set
            {
                if (_reporteAdherencia != value)
                {
                    _reporteAdherencia = value;
                    OnPropertyChanged("ReporteAdherencia");
                }
            }
        }
        private string _reporteAdherencia;
    
        [DataMember]
        public Nullable<System.DateTime> FechaPullOff
        {
            get { return _fechaPullOff; }
            set
            {
                if (_fechaPullOff != value)
                {
                    _fechaPullOff = value;
                    OnPropertyChanged("FechaPullOff");
                }
            }
        }
        private Nullable<System.DateTime> _fechaPullOff;
    
        [DataMember]
        public string ReportePullOff
        {
            get { return _reportePullOff; }
            set
            {
                if (_reportePullOff != value)
                {
                    _reportePullOff = value;
                    OnPropertyChanged("ReportePullOff");
                }
            }
        }
        private string _reportePullOff;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public RequisicionPinturaDetalle RequisicionPinturaDetalle
        {
            get { return _requisicionPinturaDetalle; }
            set
            {
                if (!ReferenceEquals(_requisicionPinturaDetalle, value))
                {
                    var previousValue = _requisicionPinturaDetalle;
                    _requisicionPinturaDetalle = value;
                    FixupRequisicionPinturaDetalle(previousValue);
                    OnNavigationPropertyChanged("RequisicionPinturaDetalle");
                }
            }
        }
        private RequisicionPinturaDetalle _requisicionPinturaDetalle;
    
        [DataMember]
        public WorkstatusSpool WorkstatusSpool
        {
            get { return _workstatusSpool; }
            set
            {
                if (!ReferenceEquals(_workstatusSpool, value))
                {
                    var previousValue = _workstatusSpool;
                    _workstatusSpool = value;
                    FixupWorkstatusSpool(previousValue);
                    OnNavigationPropertyChanged("WorkstatusSpool");
                }
            }
        }
        private WorkstatusSpool _workstatusSpool;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            RequisicionPinturaDetalle = null;
            WorkstatusSpool = null;
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupRequisicionPinturaDetalle(RequisicionPinturaDetalle previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PinturaSpool.Contains(this))
            {
                previousValue.PinturaSpool.Remove(this);
            }
    
            if (RequisicionPinturaDetalle != null)
            {
                if (!RequisicionPinturaDetalle.PinturaSpool.Contains(this))
                {
                    RequisicionPinturaDetalle.PinturaSpool.Add(this);
                }
    
                RequisicionPinturaDetalleID = RequisicionPinturaDetalle.RequisicionPinturaDetalleID;
            }
            else if (!skipKeys)
            {
                RequisicionPinturaDetalleID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("RequisicionPinturaDetalle")
                    && (ChangeTracker.OriginalValues["RequisicionPinturaDetalle"] == RequisicionPinturaDetalle))
                {
                    ChangeTracker.OriginalValues.Remove("RequisicionPinturaDetalle");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("RequisicionPinturaDetalle", previousValue);
                }
                if (RequisicionPinturaDetalle != null && !RequisicionPinturaDetalle.ChangeTracker.ChangeTrackingEnabled)
                {
                    RequisicionPinturaDetalle.StartTracking();
                }
            }
        }
    
        private void FixupWorkstatusSpool(WorkstatusSpool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PinturaSpool.Contains(this))
            {
                previousValue.PinturaSpool.Remove(this);
            }
    
            if (WorkstatusSpool != null)
            {
                if (!WorkstatusSpool.PinturaSpool.Contains(this))
                {
                    WorkstatusSpool.PinturaSpool.Add(this);
                }
    
                WorkstatusSpoolID = WorkstatusSpool.WorkstatusSpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("WorkstatusSpool")
                    && (ChangeTracker.OriginalValues["WorkstatusSpool"] == WorkstatusSpool))
                {
                    ChangeTracker.OriginalValues.Remove("WorkstatusSpool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("WorkstatusSpool", previousValue);
                }
                if (WorkstatusSpool != null && !WorkstatusSpool.ChangeTracker.ChangeTrackingEnabled)
                {
                    WorkstatusSpool.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PinturaSpool.Contains(this))
            {
                previousValue.PinturaSpool.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.PinturaSpool.Contains(this))
                {
                    Proyecto.PinturaSpool.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }

        #endregion

    }
}
