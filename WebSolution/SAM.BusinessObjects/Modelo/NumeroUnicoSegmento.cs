//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(NumeroUnico))]
    [KnownType(typeof(Proyecto))]
    [Serializable]
    public partial class NumeroUnicoSegmento: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int NumeroUnicoSegmentoID
        {
            get { return _numeroUnicoSegmentoID; }
            set
            {
                if (_numeroUnicoSegmentoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'NumeroUnicoSegmentoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _numeroUnicoSegmentoID = value;
                    OnPropertyChanged("NumeroUnicoSegmentoID");
                }
            }
        }
        private int _numeroUnicoSegmentoID;
    
        [DataMember]
        public int NumeroUnicoID
        {
            get { return _numeroUnicoID; }
            set
            {
                if (_numeroUnicoID != value)
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnicoID", _numeroUnicoID);
                    if (!IsDeserializing)
                    {
                        if (NumeroUnico != null && NumeroUnico.NumeroUnicoID != value)
                        {
                            NumeroUnico = null;
                        }
                    }
                    _numeroUnicoID = value;
                    OnPropertyChanged("NumeroUnicoID");
                }
            }
        }
        private int _numeroUnicoID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public string Segmento
        {
            get { return _segmento; }
            set
            {
                if (_segmento != value)
                {
                    _segmento = value;
                    OnPropertyChanged("Segmento");
                }
            }
        }
        private string _segmento;
    
        [DataMember]
        public int InventarioFisico
        {
            get { return _inventarioFisico; }
            set
            {
                if (_inventarioFisico != value)
                {
                    _inventarioFisico = value;
                    OnPropertyChanged("InventarioFisico");
                }
            }
        }
        private int _inventarioFisico;
    
        [DataMember]
        public int InventarioCongelado
        {
            get { return _inventarioCongelado; }
            set
            {
                if (_inventarioCongelado != value)
                {
                    _inventarioCongelado = value;
                    OnPropertyChanged("InventarioCongelado");
                }
            }
        }
        private int _inventarioCongelado;
    
        [DataMember]
        public int InventarioDisponibleCruce
        {
            get { return _inventarioDisponibleCruce; }
            set
            {
                if (_inventarioDisponibleCruce != value)
                {
                    _inventarioDisponibleCruce = value;
                    OnPropertyChanged("InventarioDisponibleCruce");
                }
            }
        }
        private int _inventarioDisponibleCruce;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public int CantidadDanada
        {
            get { return _cantidadDanada; }
            set
            {
                if (_cantidadDanada != value)
                {
                    _cantidadDanada = value;
                    OnPropertyChanged("CantidadDanada");
                }
            }
        }
        private int _cantidadDanada;
    
        [DataMember]
        public int InventarioBuenEstado
        {
            get { return _inventarioBuenEstado; }
            set
            {
                if (_inventarioBuenEstado != value)
                {
                    _inventarioBuenEstado = value;
                    OnPropertyChanged("InventarioBuenEstado");
                }
            }
        }
        private int _inventarioBuenEstado;
    
        [DataMember]
        public string Rack
        {
            get { return _rack; }
            set
            {
                if (_rack != value)
                {
                    _rack = value;
                    OnPropertyChanged("Rack");
                }
            }
        }
        private string _rack;
    
        [DataMember]
        public int InventarioTransferenciaCorte
        {
            get { return _inventarioTransferenciaCorte; }
            set
            {
                if (_inventarioTransferenciaCorte != value)
                {
                    _inventarioTransferenciaCorte = value;
                    OnPropertyChanged("InventarioTransferenciaCorte");
                }
            }
        }
        private int _inventarioTransferenciaCorte;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public NumeroUnico NumeroUnico
        {
            get { return _numeroUnico; }
            set
            {
                if (!ReferenceEquals(_numeroUnico, value))
                {
                    var previousValue = _numeroUnico;
                    _numeroUnico = value;
                    FixupNumeroUnico(previousValue);
                    OnNavigationPropertyChanged("NumeroUnico");
                }
            }
        }
        private NumeroUnico _numeroUnico;
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            NumeroUnico = null;
            Proyecto = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupNumeroUnico(NumeroUnico previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NumeroUnicoSegmento.Contains(this))
            {
                previousValue.NumeroUnicoSegmento.Remove(this);
            }
    
            if (NumeroUnico != null)
            {
                if (!NumeroUnico.NumeroUnicoSegmento.Contains(this))
                {
                    NumeroUnico.NumeroUnicoSegmento.Add(this);
                }
    
                NumeroUnicoID = NumeroUnico.NumeroUnicoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("NumeroUnico")
                    && (ChangeTracker.OriginalValues["NumeroUnico"] == NumeroUnico))
                {
                    ChangeTracker.OriginalValues.Remove("NumeroUnico");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("NumeroUnico", previousValue);
                }
                if (NumeroUnico != null && !NumeroUnico.ChangeTracker.ChangeTrackingEnabled)
                {
                    NumeroUnico.StartTracking();
                }
            }
        }
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.NumeroUnicoSegmento.Contains(this))
            {
                previousValue.NumeroUnicoSegmento.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.NumeroUnicoSegmento.Contains(this))
                {
                    Proyecto.NumeroUnicoSegmento.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }

        #endregion

    }
}
