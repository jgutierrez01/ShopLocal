//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Spool))]
    [KnownType(typeof(TipoCorte))]
    [KnownType(typeof(ItemCode))]
    [Serializable]
    public partial class CorteSpool: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CorteSpoolID
        {
            get { return _corteSpoolID; }
            set
            {
                if (_corteSpoolID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CorteSpoolID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _corteSpoolID = value;
                    OnPropertyChanged("CorteSpoolID");
                }
            }
        }
        private int _corteSpoolID;
    
        [DataMember]
        public int SpoolID
        {
            get { return _spoolID; }
            set
            {
                if (_spoolID != value)
                {
                    ChangeTracker.RecordOriginalValue("SpoolID", _spoolID);
                    if (!IsDeserializing)
                    {
                        if (Spool != null && Spool.SpoolID != value)
                        {
                            Spool = null;
                        }
                    }
                    _spoolID = value;
                    OnPropertyChanged("SpoolID");
                }
            }
        }
        private int _spoolID;
    
        [DataMember]
        public int ItemCodeID
        {
            get { return _itemCodeID; }
            set
            {
                if (_itemCodeID != value)
                {
                    ChangeTracker.RecordOriginalValue("ItemCodeID", _itemCodeID);
                    if (!IsDeserializing)
                    {
                        if (ItemCode != null && ItemCode.ItemCodeID != value)
                        {
                            ItemCode = null;
                        }
                    }
                    _itemCodeID = value;
                    OnPropertyChanged("ItemCodeID");
                }
            }
        }
        private int _itemCodeID;
    
        [DataMember]
        public int TipoCorte1ID
        {
            get { return _tipoCorte1ID; }
            set
            {
                if (_tipoCorte1ID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoCorte1ID", _tipoCorte1ID);
                    if (!IsDeserializing)
                    {
                        if (TipoCorte != null && TipoCorte.TipoCorteID != value)
                        {
                            TipoCorte = null;
                        }
                    }
                    _tipoCorte1ID = value;
                    OnPropertyChanged("TipoCorte1ID");
                }
            }
        }
        private int _tipoCorte1ID;
    
        [DataMember]
        public int TipoCorte2ID
        {
            get { return _tipoCorte2ID; }
            set
            {
                if (_tipoCorte2ID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoCorte2ID", _tipoCorte2ID);
                    if (!IsDeserializing)
                    {
                        if (TipoCorte1 != null && TipoCorte1.TipoCorteID != value)
                        {
                            TipoCorte1 = null;
                        }
                    }
                    _tipoCorte2ID = value;
                    OnPropertyChanged("TipoCorte2ID");
                }
            }
        }
        private int _tipoCorte2ID;
    
        [DataMember]
        public string EtiquetaMaterial
        {
            get { return _etiquetaMaterial; }
            set
            {
                if (_etiquetaMaterial != value)
                {
                    _etiquetaMaterial = value;
                    OnPropertyChanged("EtiquetaMaterial");
                }
            }
        }
        private string _etiquetaMaterial;
    
        [DataMember]
        public string EtiquetaSeccion
        {
            get { return _etiquetaSeccion; }
            set
            {
                if (_etiquetaSeccion != value)
                {
                    _etiquetaSeccion = value;
                    OnPropertyChanged("EtiquetaSeccion");
                }
            }
        }
        private string _etiquetaSeccion;
    
        [DataMember]
        public string InicioFin
        {
            get { return _inicioFin; }
            set
            {
                if (_inicioFin != value)
                {
                    _inicioFin = value;
                    OnPropertyChanged("InicioFin");
                }
            }
        }
        private string _inicioFin;
    
        [DataMember]
        public Nullable<int> Cantidad
        {
            get { return _cantidad; }
            set
            {
                if (_cantidad != value)
                {
                    _cantidad = value;
                    OnPropertyChanged("Cantidad");
                }
            }
        }
        private Nullable<int> _cantidad;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    ChangeTracker.RecordOriginalValue("VersionRegistro", _versionRegistro);
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string Observaciones
        {
            get { return _observaciones; }
            set
            {
                if (_observaciones != value)
                {
                    _observaciones = value;
                    OnPropertyChanged("Observaciones");
                }
            }
        }
        private string _observaciones;
    
        [DataMember]
        public decimal Diametro
        {
            get { return _diametro; }
            set
            {
                if (_diametro != value)
                {
                    _diametro = value;
                    OnPropertyChanged("Diametro");
                }
            }
        }
        private decimal _diametro;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Spool Spool
        {
            get { return _spool; }
            set
            {
                if (!ReferenceEquals(_spool, value))
                {
                    var previousValue = _spool;
                    _spool = value;
                    FixupSpool(previousValue);
                    OnNavigationPropertyChanged("Spool");
                }
            }
        }
        private Spool _spool;
    
        [DataMember]
        public TipoCorte TipoCorte
        {
            get { return _tipoCorte; }
            set
            {
                if (!ReferenceEquals(_tipoCorte, value))
                {
                    var previousValue = _tipoCorte;
                    _tipoCorte = value;
                    FixupTipoCorte(previousValue);
                    OnNavigationPropertyChanged("TipoCorte");
                }
            }
        }
        private TipoCorte _tipoCorte;
    
        [DataMember]
        public TipoCorte TipoCorte1
        {
            get { return _tipoCorte1; }
            set
            {
                if (!ReferenceEquals(_tipoCorte1, value))
                {
                    var previousValue = _tipoCorte1;
                    _tipoCorte1 = value;
                    FixupTipoCorte1(previousValue);
                    OnNavigationPropertyChanged("TipoCorte1");
                }
            }
        }
        private TipoCorte _tipoCorte1;
    
        [DataMember]
        public ItemCode ItemCode
        {
            get { return _itemCode; }
            set
            {
                if (!ReferenceEquals(_itemCode, value))
                {
                    var previousValue = _itemCode;
                    _itemCode = value;
                    FixupItemCode(previousValue);
                    OnNavigationPropertyChanged("ItemCode");
                }
            }
        }
        private ItemCode _itemCode;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Spool = null;
            TipoCorte = null;
            TipoCorte1 = null;
            ItemCode = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupSpool(Spool previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteSpool.Contains(this))
            {
                previousValue.CorteSpool.Remove(this);
            }
    
            if (Spool != null)
            {
                if (!Spool.CorteSpool.Contains(this))
                {
                    Spool.CorteSpool.Add(this);
                }
    
                SpoolID = Spool.SpoolID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Spool")
                    && (ChangeTracker.OriginalValues["Spool"] == Spool))
                {
                    ChangeTracker.OriginalValues.Remove("Spool");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Spool", previousValue);
                }
                if (Spool != null && !Spool.ChangeTracker.ChangeTrackingEnabled)
                {
                    Spool.StartTracking();
                }
            }
        }
    
        private void FixupTipoCorte(TipoCorte previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteSpool.Contains(this))
            {
                previousValue.CorteSpool.Remove(this);
            }
    
            if (TipoCorte != null)
            {
                if (!TipoCorte.CorteSpool.Contains(this))
                {
                    TipoCorte.CorteSpool.Add(this);
                }
    
                TipoCorte1ID = TipoCorte.TipoCorteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoCorte")
                    && (ChangeTracker.OriginalValues["TipoCorte"] == TipoCorte))
                {
                    ChangeTracker.OriginalValues.Remove("TipoCorte");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoCorte", previousValue);
                }
                if (TipoCorte != null && !TipoCorte.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoCorte.StartTracking();
                }
            }
        }
    
        private void FixupTipoCorte1(TipoCorte previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteSpool1.Contains(this))
            {
                previousValue.CorteSpool1.Remove(this);
            }
    
            if (TipoCorte1 != null)
            {
                if (!TipoCorte1.CorteSpool1.Contains(this))
                {
                    TipoCorte1.CorteSpool1.Add(this);
                }
    
                TipoCorte2ID = TipoCorte1.TipoCorteID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoCorte1")
                    && (ChangeTracker.OriginalValues["TipoCorte1"] == TipoCorte1))
                {
                    ChangeTracker.OriginalValues.Remove("TipoCorte1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoCorte1", previousValue);
                }
                if (TipoCorte1 != null && !TipoCorte1.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoCorte1.StartTracking();
                }
            }
        }
    
        private void FixupItemCode(ItemCode previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CorteSpool.Contains(this))
            {
                previousValue.CorteSpool.Remove(this);
            }
    
            if (ItemCode != null)
            {
                if (!ItemCode.CorteSpool.Contains(this))
                {
                    ItemCode.CorteSpool.Add(this);
                }
    
                ItemCodeID = ItemCode.ItemCodeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ItemCode")
                    && (ChangeTracker.OriginalValues["ItemCode"] == ItemCode))
                {
                    ChangeTracker.OriginalValues.Remove("ItemCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ItemCode", previousValue);
                }
                if (ItemCode != null && !ItemCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    ItemCode.StartTracking();
                }
            }
        }

        #endregion

    }
}
