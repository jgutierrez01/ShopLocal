//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SAM.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Proyecto))]
    [KnownType(typeof(EmbarqueSpool))]
    [Serializable]
    public partial class Embarque: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int EmbarqueID
        {
            get { return _embarqueID; }
            set
            {
                if (_embarqueID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmbarqueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _embarqueID = value;
                    OnPropertyChanged("EmbarqueID");
                }
            }
        }
        private int _embarqueID;
    
        [DataMember]
        public int ProyectoID
        {
            get { return _proyectoID; }
            set
            {
                if (_proyectoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProyectoID", _proyectoID);
                    if (!IsDeserializing)
                    {
                        if (Proyecto != null && Proyecto.ProyectoID != value)
                        {
                            Proyecto = null;
                        }
                    }
                    _proyectoID = value;
                    OnPropertyChanged("ProyectoID");
                }
            }
        }
        private int _proyectoID;
    
        [DataMember]
        public Nullable<System.DateTime> FechaEmbarque
        {
            get { return _fechaEmbarque; }
            set
            {
                if (_fechaEmbarque != value)
                {
                    _fechaEmbarque = value;
                    OnPropertyChanged("FechaEmbarque");
                }
            }
        }
        private Nullable<System.DateTime> _fechaEmbarque;
    
        [DataMember]
        public string NumeroEmbarque
        {
            get { return _numeroEmbarque; }
            set
            {
                if (_numeroEmbarque != value)
                {
                    _numeroEmbarque = value;
                    OnPropertyChanged("NumeroEmbarque");
                }
            }
        }
        private string _numeroEmbarque;
    
        [DataMember]
        public string Observaciones
        {
            get { return _observaciones; }
            set
            {
                if (_observaciones != value)
                {
                    _observaciones = value;
                    OnPropertyChanged("Observaciones");
                }
            }
        }
        private string _observaciones;
    
        [DataMember]
        public Nullable<System.Guid> UsuarioModifica
        {
            get { return _usuarioModifica; }
            set
            {
                if (_usuarioModifica != value)
                {
                    _usuarioModifica = value;
                    OnPropertyChanged("UsuarioModifica");
                }
            }
        }
        private Nullable<System.Guid> _usuarioModifica;
    
        [DataMember]
        public Nullable<System.DateTime> FechaModificacion
        {
            get { return _fechaModificacion; }
            set
            {
                if (_fechaModificacion != value)
                {
                    _fechaModificacion = value;
                    OnPropertyChanged("FechaModificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaModificacion;
    
        [DataMember]
        public byte[] VersionRegistro
        {
            get { return _versionRegistro; }
            set
            {
                if (_versionRegistro != value)
                {
                    _versionRegistro = value;
                    OnPropertyChanged("VersionRegistro");
                }
            }
        }
        private byte[] _versionRegistro;
    
        [DataMember]
        public string Nota1
        {
            get { return _nota1; }
            set
            {
                if (_nota1 != value)
                {
                    _nota1 = value;
                    OnPropertyChanged("Nota1");
                }
            }
        }
        private string _nota1;
    
        [DataMember]
        public string Nota2
        {
            get { return _nota2; }
            set
            {
                if (_nota2 != value)
                {
                    _nota2 = value;
                    OnPropertyChanged("Nota2");
                }
            }
        }
        private string _nota2;
    
        [DataMember]
        public string Nota3
        {
            get { return _nota3; }
            set
            {
                if (_nota3 != value)
                {
                    _nota3 = value;
                    OnPropertyChanged("Nota3");
                }
            }
        }
        private string _nota3;
    
        [DataMember]
        public string Nota4
        {
            get { return _nota4; }
            set
            {
                if (_nota4 != value)
                {
                    _nota4 = value;
                    OnPropertyChanged("Nota4");
                }
            }
        }
        private string _nota4;
    
        [DataMember]
        public string Nota5
        {
            get { return _nota5; }
            set
            {
                if (_nota5 != value)
                {
                    _nota5 = value;
                    OnPropertyChanged("Nota5");
                }
            }
        }
        private string _nota5;
    
        [DataMember]
        public Nullable<System.DateTime> FechaEstimada
        {
            get { return _fechaEstimada; }
            set
            {
                if (_fechaEstimada != value)
                {
                    _fechaEstimada = value;
                    OnPropertyChanged("FechaEstimada");
                }
            }
        }
        private Nullable<System.DateTime> _fechaEstimada;
    
        [DataMember]
        public Nullable<System.DateTime> VigenciaAduana
        {
            get { return _vigenciaAduana; }
            set
            {
                if (_vigenciaAduana != value)
                {
                    _vigenciaAduana = value;
                    OnPropertyChanged("VigenciaAduana");
                }
            }
        }
        private Nullable<System.DateTime> _vigenciaAduana;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Proyecto Proyecto
        {
            get { return _proyecto; }
            set
            {
                if (!ReferenceEquals(_proyecto, value))
                {
                    var previousValue = _proyecto;
                    _proyecto = value;
                    FixupProyecto(previousValue);
                    OnNavigationPropertyChanged("Proyecto");
                }
            }
        }
        private Proyecto _proyecto;
    
        [DataMember]
        public TrackableCollection<EmbarqueSpool> EmbarqueSpool
        {
            get
            {
                if (_embarqueSpool == null)
                {
                    _embarqueSpool = new TrackableCollection<EmbarqueSpool>();
                    _embarqueSpool.CollectionChanged += FixupEmbarqueSpool;
                }
                return _embarqueSpool;
            }
            set
            {
                if (!ReferenceEquals(_embarqueSpool, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_embarqueSpool != null)
                    {
                        _embarqueSpool.CollectionChanged -= FixupEmbarqueSpool;
                    }
                    _embarqueSpool = value;
                    if (_embarqueSpool != null)
                    {
                        _embarqueSpool.CollectionChanged += FixupEmbarqueSpool;
                    }
                    OnNavigationPropertyChanged("EmbarqueSpool");
                }
            }
        }
        private TrackableCollection<EmbarqueSpool> _embarqueSpool;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    			if (_embarqueSpool != null)
    		{
    			_embarqueSpool.CollectionChanged -= FixupEmbarqueSpool;
    			_embarqueSpool.CollectionChanged += FixupEmbarqueSpool;
    			}
    		}
    
    
        protected virtual void ClearNavigationProperties()
        {
            Proyecto = null;
            EmbarqueSpool.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupProyecto(Proyecto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Embarque.Contains(this))
            {
                previousValue.Embarque.Remove(this);
            }
    
            if (Proyecto != null)
            {
                if (!Proyecto.Embarque.Contains(this))
                {
                    Proyecto.Embarque.Add(this);
                }
    
                ProyectoID = Proyecto.ProyectoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Proyecto")
                    && (ChangeTracker.OriginalValues["Proyecto"] == Proyecto))
                {
                    ChangeTracker.OriginalValues.Remove("Proyecto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Proyecto", previousValue);
                }
                if (Proyecto != null && !Proyecto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Proyecto.StartTracking();
                }
            }
        }
    
        private void FixupEmbarqueSpool(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EmbarqueSpool item in e.NewItems)
                {
                    item.Embarque = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EmbarqueSpool", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmbarqueSpool item in e.OldItems)
                {
                    if (ReferenceEquals(item.Embarque, this))
                    {
                        item.Embarque = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EmbarqueSpool", item);
                    }
                }
            }
        }

        #endregion

    }
}
